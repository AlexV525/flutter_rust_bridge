// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.20.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use crate::api::misc_no_twin_example_a::*;
use crate::api::misc_no_twin_example_b::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.20";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_boxed_blob_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<[u8; 1600]>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::boxed_blob_twin_normal(api_blob))
                })())
            }
        },
    )
}
fn wire_func_test_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::TestIdTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::func_test_id_twin_normal(api_id))
                })())
            }
        },
    )
}
fn wire_get_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::get_array_twin_normal())
                })())
            }
        },
    )
}
fn wire_get_complex_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::get_complex_array_twin_normal())
                })())
            }
        },
    )
}
fn wire_last_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    array: impl CstDecode<[f64; 16]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_array = array.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::last_number_twin_normal(api_array))
                })())
            }
        },
    )
}
fn wire_nested_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[crate::api::array::TestIdTwinNormal; 4]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::nested_id_twin_normal(api_id))
                })())
            }
        },
    )
}
fn wire_new_msgid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 32]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::new_msgid_twin_normal(api_id))
                })())
            }
        },
    )
}
fn wire_return_boxed_feed_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 8]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_feed_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::return_boxed_feed_id_twin_normal(api_id))
                })())
            }
        },
    )
}
fn wire_return_boxed_raw_feed_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::FeedIdTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_raw_feed_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::return_boxed_raw_feed_id_twin_normal(
                        api_id,
                    ))
                })())
            }
        },
    )
}
fn wire_use_boxed_blob_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<crate::api::array::BlobTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::use_boxed_blob_twin_normal(api_blob))
                })())
            }
        },
    )
}
fn wire_use_msgid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::array::MessageIdTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::array::use_msgid_twin_normal(api_id))
                })())
            }
        },
    )
}
fn wire_func_async_simple_add_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32>,
    b: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_async_simple_add_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::async_misc::func_async_simple_add_twin_normal(api_a, api_b)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_func_async_void_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_async_void_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::async_misc::func_async_void_twin_normal().await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_simple_use_async_spawn_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_use_async_spawn",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::async_spawn::simple_use_async_spawn(api_arg).await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_simple_use_async_spawn_blocking_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_use_async_spawn_blocking",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::async_spawn::simple_use_async_spawn_blocking(api_arg).await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_handle_customized_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::attribute::CustomizedTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_customized_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_val = val.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::attribute::handle_customized_struct_twin_normal(api_val),
                    )
                })())
            }
        },
    )
}
fn wire_next_user_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    user_id: impl CstDecode<crate::api::attribute::UserIdTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::attribute::next_user_id_twin_normal(
                        api_user_id,
                    ))
                })())
            }
        },
    )
}
fn wire_benchmark_void_semi_serialize_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_semi_serialize",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_sse((move || {
                Result::<_, ()>::Ok(crate::api::benchmark_misc::benchmark_void_semi_serialize())
            })())
        },
    )
}
fn wire_datetime_local_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Local>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_local_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::datetime_local_twin_normal(api_d))
                })())
            }
        },
    )
}
fn wire_datetime_utc_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Utc>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_utc_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::datetime_utc_twin_normal(api_d))
                })())
            }
        },
    )
}
fn wire_duration_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::Duration>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "duration_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::duration_twin_normal(api_d))
                })())
            }
        },
    )
}
fn wire_handle_durations_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    durations: impl CstDecode<Vec<chrono::Duration>>,
    since: impl CstDecode<chrono::DateTime<chrono::Local>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_durations_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_durations = durations.cst_decode();
            let api_since = since.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::handle_durations_twin_normal(
                        api_durations,
                        api_since,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_timestamps_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>>,
    epoch: impl CstDecode<chrono::NaiveDateTime>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_timestamps_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_timestamps = timestamps.cst_decode();
            let api_epoch = epoch.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::handle_timestamps_twin_normal(
                        api_timestamps,
                        api_epoch,
                    ))
                })())
            }
        },
    )
}
fn wire_how_long_does_it_take_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mine: impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "how_long_does_it_take_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_mine = mine.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::chrono_type::how_long_does_it_take_twin_normal(api_mine)
                })())
            }
        },
    )
}
fn wire_naivedatetime_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::NaiveDateTime>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "naivedatetime_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::naivedatetime_twin_normal(api_d))
                })())
            }
        },
    )
}
fn wire_optional_empty_datetime_utc_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "optional_empty_datetime_utc_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_d = d.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::chrono_type::optional_empty_datetime_utc_twin_normal(api_d),
                    )
                })())
            }
        },
    )
}
fn wire_test_chrono_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_chrono_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::test_chrono_twin_normal())
                })())
            }
        },
    )
}
fn wire_test_precise_chrono_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_precise_chrono_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::chrono_type::test_precise_chrono_twin_normal())
                })())
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::comment::StructWithCommentsTwinNormal::instance_method_twin_normal(&api_that))
                    })())
                } })
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::comment::StructWithCommentsTwinNormal::static_method_twin_normal())
                    })())
                } })
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::comment::function_with_comments_slash_star_star_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::comment::function_with_comments_triple_slash_multi_line_twin_normal())
                    })())
                } })
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::comment::function_with_comments_triple_slash_single_line_twin_normal())
                    })())
                } })
}
fn wire_check_init_done_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "check_init_done",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::customization::check_init_done())
                })())
            }
        },
    )
}
fn wire_init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::customization::init_app())
                })())
            }
        },
    )
}
fn wire_my_init_one_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "my_init_one", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::customization::my_init_one()
                    })())
                } })
}
fn wire_my_init_two_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "my_init_two",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::customization::my_init_two())
                })())
            }
        },
    )
}
fn wire_return_dart_dynamic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_dart_dynamic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_dynamic::return_dart_dynamic_twin_normal())
                })())
            }
        },
    )
}
fn wire_rust_call_dart_loopback_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_loopback_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::dart_fn::rust_call_dart_loopback_twin_normal(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_multi_times_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    num_times: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_multi_times_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback = decode_DartFn_Inputs__Output_unit(callback.cst_decode());
            let api_num_times = num_times.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_multi_times_twin_normal(
                                api_callback,
                                api_num_times,
                            )
                            .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_one_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_one_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback = decode_DartFn_Inputs_String_Output_unit(callback.cst_decode());
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_one_arg_twin_normal(api_callback)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback = decode_DartFn_Inputs__Output_String(callback.cst_decode());
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_return_twin_normal(api_callback)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_simple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_simple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback = decode_DartFn_Inputs__Output_unit(callback.cst_decode());
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_simple_twin_normal(api_callback)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_two_args_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_two_args_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_callback =
                decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
                    callback.cst_decode(),
                );
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_two_args_twin_normal(api_callback)
                                .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_with_dart_opaque_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_call_dart_with_dart_opaque_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            let api_callback = decode_DartFn_Inputs_DartOpaque_Output_unit(callback.cst_decode());
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        Result::<_, ()>::Ok(
                            crate::api::dart_fn::rust_call_dart_with_dart_opaque_arg_twin_normal(
                                api_input,
                                api_callback,
                            )
                            .await,
                        )
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire_rust_call_dart_with_dart_opaque_result_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_result_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs__Output_DartOpaque(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::dart_fn::rust_call_dart_with_dart_opaque_result_twin_normal(api_callback).await)
                    })().await)
                } })
}
fn wire_async_accept_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "async_accept_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::async_accept_dart_opaque_twin_normal(api_opaque),
                    )
                })())
            }
        },
    )
}
fn wire_clone_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clone_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::clone_dart_opaque_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_create_enum_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_enum_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::create_enum_dart_opaque_twin_normal(api_opaque),
                    )
                })())
            }
        },
    )
}
fn wire_create_nested_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_nested_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque1 = opaque1.cst_decode();
            let api_opaque2 = opaque2.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::create_nested_dart_opaque_twin_normal(
                            api_opaque1,
                            api_opaque2,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_drop_static_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "drop_static_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::drop_static_dart_opaque_twin_normal(api_id),
                    )
                })())
            }
        },
    )
}
fn wire_get_enum_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_enum_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::get_enum_dart_opaque_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_get_nested_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_nested_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::get_nested_dart_opaque_twin_normal(api_opaque),
                    )
                })())
            }
        },
    )
}
fn wire_loop_back_array_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_array_get_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_loop_back_array_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_array_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_loop_back_option_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_option_get_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_loop_back_option_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_option_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_loop_back_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_twin_normal(api_opaque))
                })())
            }
        },
    )
}
fn wire_loop_back_vec_get_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_get_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_vec_get_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_loop_back_vec_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::dart_opaque::loop_back_vec_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_panic_unwrap_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_unwrap_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::panic_unwrap_dart_opaque_twin_normal(api_opaque),
                    )
                })())
            }
        },
    )
}
fn wire_set_static_dart_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32>,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_static_dart_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::dart_opaque::set_static_dart_opaque_twin_normal(
                            api_id, api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_sync_accept_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_accept_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::dart_opaque_sync::sync_accept_dart_opaque_twin_normal(api_opaque),
                )
            })())
        },
    )
}
fn wire_sync_loopback_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_loopback_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::dart_opaque_sync::sync_loopback_twin_normal(
                    api_opaque,
                ))
            })())
        },
    )
}
fn wire_sync_option_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                crate::api::dart_opaque_sync::sync_option_dart_opaque_twin_normal(api_opaque)
            })())
        },
    )
}
fn wire_sync_option_loopback_twin_normal_impl(
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_loopback_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::dart_opaque_sync::sync_option_loopback_twin_normal(api_opaque),
                )
            })())
        },
    )
}
fn wire_unwrap_dart_opaque_twin_normal_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_dart_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::dart_opaque_sync::unwrap_dart_opaque_twin_normal(api_opaque),
                )
            })())
        },
    )
}
fn wire_test_duplicated_module_names_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::deliberate_name_conflict::StructInLowerLevel>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_duplicated_module_names",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::deliberate_name_conflict::test_duplicated_module_names(api_s),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumSimpleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::func_enum_simple_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_func_enum_with_discriminant_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithDiscriminantTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_discriminant_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_discriminant_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_mixed_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_mixed_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_struct_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_with_item_tuple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::enumeration::func_enum_with_item_tuple_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_handle_enum_parameter_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekday: impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_parameter_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::handle_enum_parameter_twin_normal(
                        api_weekday,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_enum_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_val = val.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::handle_enum_struct_twin_normal(
                        api_val,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_return_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_return_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::handle_return_enum_twin_normal(
                        api_input,
                    ))
                })())
            }
        },
    )
}
fn wire_multiply_by_ten_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    measure: impl CstDecode<crate::api::enumeration::MeasureTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "multiply_by_ten_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::multiply_by_ten_twin_normal(
                        api_measure,
                    ))
                })())
            }
        },
    )
}
fn wire_print_note_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    note: impl CstDecode<crate::api::enumeration::NoteTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_note = note.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::enumeration::print_note_twin_normal(api_note))
                })())
            }
        },
    )
}
fn wire_EventTwinNormal_as_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::event_listener::EventTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "EventTwinNormal_as_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::event_listener::EventTwinNormal::as_string_twin_normal(
                            &api_that,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_close_event_listener_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "close_event_listener_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::event_listener::close_event_listener_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_create_event_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    address: impl CstDecode<String>,
    payload: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_event_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_address = address.cst_decode();
            let api_payload = payload.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::event_listener::create_event_twin_normal(
                        api_address,
                        api_payload,
                    ))
                })())
            }
        },
    )
}
fn wire_register_event_listener_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_event_listener_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::event_listener::register_event_listener_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::event_listener::EventTwinNormal>(),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_CustomStructTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    message: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "CustomStructTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_message = message.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::exception::CustomStructTwinNormal::new_twin_normal(api_message),
                    )
                })())
            }
        },
    )
}
fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::CustomStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::CustomStructTwinNormal::nonstatic_return_custom_struct_error_twin_normal(&api_that)
                    })())
                } })
}
fn wire_CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::CustomStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::CustomStructTwinNormal::nonstatic_return_custom_struct_ok_twin_normal(&api_that)
                    })())
                } })
}
fn wire_CustomStructTwinNormal_static_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_static_return_custom_struct_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::CustomStructTwinNormal::static_return_custom_struct_error_twin_normal()
                    })())
                } })
}
fn wire_CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::CustomStructTwinNormal::static_return_custom_struct_ok_twin_normal()
                    })())
                } })
}
fn wire_SomeStructTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SomeStructTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::exception::SomeStructTwinNormal::new_twin_normal(api_value),
                    )
                })())
            }
        },
    )
}
fn wire_SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::SomeStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::SomeStructTwinNormal::non_static_return_err_custom_error_twin_normal(&api_that)
                    })())
                } })
}
fn wire_SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::exception::SomeStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::SomeStructTwinNormal::non_static_return_ok_custom_error_twin_normal(&api_that)
                    })())
                } })
}
fn wire_SomeStructTwinNormal_static_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_static_return_err_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::SomeStructTwinNormal::static_return_err_custom_error_twin_normal()
                    })())
                } })
}
fn wire_SomeStructTwinNormal_static_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinNormal_static_return_ok_custom_error_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::exception::SomeStructTwinNormal::static_return_ok_custom_error_twin_normal()
                    })())
                } })
}
fn wire_custom_enum_error_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::custom_enum_error_panic_twin_normal()
                })())
            }
        },
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::custom_enum_error_return_error_twin_normal()
                })())
            }
        },
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::custom_enum_error_return_ok_twin_normal(api_arg)
                })())
            }
        },
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::custom_nested_error_return_error_twin_normal(api_arg)
                })())
            }
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::custom_struct_error_return_error_twin_normal(api_arg)
                })())
            }
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::func_return_error_twin_normal()
                })())
            }
        },
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::func_type_fallible_panic_twin_normal()
                })())
            }
        },
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::exception::func_type_infallible_panic_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_panic_with_custom_result_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_with_custom_result_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::panic_with_custom_result_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_custom_nested_error_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_custom_nested_error_1_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_custom_nested_error_1_variant1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_1_variant1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_custom_nested_error_1_variant1_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_custom_nested_error_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_nested_error_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_custom_nested_error_2_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_custom_struct_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_custom_struct_error_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_custom_struct_ok_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_ok_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_custom_struct_ok_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_err_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_err_custom_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_err_custom_error_twin_normal()
                })())
            }
        },
    )
}
fn wire_return_error_variant_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    variant: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_error_variant_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_variant = variant.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_error_variant_twin_normal(api_variant)
                })())
            }
        },
    )
}
fn wire_return_ok_custom_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_ok_custom_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::return_ok_custom_error_twin_normal()
                })())
            }
        },
    )
}
fn wire_stream_sink_throw_anyhow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stream_sink_throw_anyhow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::exception::stream_sink_throw_anyhow_twin_normal(StreamSink::new(
                        context.rust2dart_context().stream_sink::<_, String>(),
                    ))
                })())
            }
        },
    )
}
fn wire_throw_anyhow_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::api::exception::throw_anyhow_twin_normal())())
            }
        },
    )
}
fn wire_call_new_module_system_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "call_new_module_system_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::external_type_in_crate::call_new_module_system_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_call_old_module_system_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "call_old_module_system_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::external_type_in_crate::call_old_module_system_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_use_imported_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_imported_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::external_type_in_crate::use_imported_enum_twin_normal(
                            api_my_enum,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_use_imported_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_imported_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::external_type_in_crate::use_imported_struct_twin_normal(
                            api_my_struct,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_another_macro_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "another_macro_struct_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::inside_macro::another_macro_struct_twin_normal())
                    })())
                } })
}
fn wire_func_macro_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::inside_macro::MacroStruct>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_macro_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::inside_macro::func_macro_struct_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_func_hash_map_i32_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_i32_i32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::map_and_set::func_hash_map_i32_i32_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_func_hash_map_string_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_string_bytes_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::map_and_set::func_hash_map_string_bytes_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_map_string_complex_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_string_complex_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::map_and_set::func_hash_map_string_complex_enum_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_map_string_simple_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_string_simple_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::map_and_set::func_hash_map_string_simple_enum_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_map_string_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_string_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::map_and_set::func_hash_map_string_string_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_map_string_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_map_string_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::map_and_set::func_hash_map_string_struct_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_set_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashSet<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_set_i32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::map_and_set::func_hash_set_i32_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_func_hash_set_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashSet<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_set_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::map_and_set::func_hash_set_string_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_concatenate_static_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_concatenate_static_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::concatenate_static_twin_normal(api_a, api_b))
                    })())
                } })
}
fn wire_ConcatenateWithTwinNormal_concatenate_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_concatenate_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::method::ConcatenateWithTwinNormal::concatenate_twin_normal(
                            &api_that, api_b,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_static_stream_sink_single_arg_twin_normal(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_static_stream_sink_twin_normal(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::method::Log2TwinNormal>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_stream_sink_at_1_twin_normal(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::method::ConcatenateWithTwinNormal::handle_some_stream_sink_twin_normal(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::method::Log2TwinNormal>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::method::ConcatenateWithTwinNormal::new_twin_normal(api_a),
                    )
                })())
            }
        },
    )
}
fn wire_ConcatenateWithTwinNormal_simple_getter_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "ConcatenateWithTwinNormal_simple_getter_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::method::ConcatenateWithTwinNormal::simple_getter_twin_normal(
                            &api_that,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_SumWithTwinNormal_sum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::method::SumWithTwinNormal>,
    y: impl CstDecode<u32>,
    z: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SumWithTwinNormal_sum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_y = y.cst_decode();
            let api_z = z.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::method::SumWithTwinNormal::sum_twin_normal(
                        &api_that, api_y, api_z,
                    ))
                })())
            }
        },
    )
}
fn wire_get_sum_array_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32>,
    b: impl CstDecode<u32>,
    c: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            let api_c = c.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::method::get_sum_array_twin_normal(
                        api_a, api_b, api_c,
                    ))
                })())
            }
        },
    )
}
fn wire_get_sum_struct_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::method::get_sum_struct_twin_normal())
                })())
            }
        },
    )
}
fn wire_app_settings_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::app_settings_stream_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, mirror_ApplicationSettings>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_app_settings_vec_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_vec_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::app_settings_vec_stream_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, Vec<mirror_ApplicationSettings>>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_first_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_nums = nums.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::first_number_twin_normal(api_nums))
                })())
            }
        },
    )
}
fn wire_first_sequence_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_seqs = seqs.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::first_sequence_twin_normal(api_seqs))
                })())
            }
        },
    )
}
fn wire_get_app_settings_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::get_app_settings_twin_normal())
                })())
            }
        },
    )
}
fn wire_get_fallible_app_settings_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_fallible_app_settings_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::mirror::get_fallible_app_settings_twin_normal()
                })())
            }
        },
    )
}
fn wire_get_message_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::get_message_twin_normal())
                })())
            }
        },
    )
}
fn wire_is_app_embedded_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::is_app_embedded_twin_normal(
                        api_app_settings,
                    ))
                })())
            }
        },
    )
}
fn wire_mirror_struct_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mirror_struct_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::mirror_struct_stream_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::mirror::MirrorStructTwinNormal>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_mirror_tuple_stream_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mirror_tuple_stream_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::mirror_tuple_stream_twin_normal(
                            StreamSink::new(context.rust2dart_context().stream_sink::<_, (
                                mirror_ApplicationSettings,
                                mirror_RawStringEnumMirrored,
                            )>(
                            )),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_repeat_number_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    num: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_num = num.cst_decode();
            let api_times = times.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::repeat_number_twin_normal(
                        api_num, api_times,
                    ))
                })())
            }
        },
    )
}
fn wire_repeat_sequence_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seq: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_seq = seq.cst_decode();
            let api_times = times.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::repeat_sequence_twin_normal(
                        api_seq, api_times,
                    ))
                })())
            }
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_contains_mirrored_sub_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::test_contains_mirrored_sub_struct_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_test_fallible_of_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_fallible_of_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::mirror::test_fallible_of_raw_string_mirrored_twin_normal()
                })())
            }
        },
    )
}
fn wire_test_list_of_nested_enums_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_list_of_nested_enums_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::test_list_of_nested_enums_mirrored_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_list_of_raw_nested_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::test_list_of_raw_nested_string_mirrored_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_test_nested_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_nested_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::test_nested_raw_string_mirrored_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_test_raw_string_enum_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nested: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_enum_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_nested = nested.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::mirror::test_raw_string_enum_mirrored_twin_normal(api_nested),
                    )
                })())
            }
        },
    )
}
fn wire_test_raw_string_mirrored_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_mirrored_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::mirror::test_raw_string_mirrored_twin_normal())
                })())
            }
        },
    )
}
fn wire_handle_big_buffers_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_big_buffers_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::handle_big_buffers_twin_normal())
                })())
            }
        },
    )
}
fn wire_handle_complex_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_complex_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::misc_example::handle_complex_struct_twin_normal(api_s),
                    )
                })())
            }
        },
    )
}
fn wire_handle_nested_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::handle_nested_struct_twin_normal(
                        api_s,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::handle_string_twin_normal(api_s))
                })())
            }
        },
    )
}
fn wire_handle_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize>,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_boxed = boxed.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::handle_struct_twin_normal(
                        api_arg, api_boxed,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_vec_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    v: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_v = v.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::handle_vec_u8_twin_normal(api_v))
                })())
            }
        },
    )
}
fn wire_list_of_primitive_enums_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekdays: impl CstDecode<Vec<crate::api::misc_example::WeekdaysTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_of_primitive_enums_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_weekdays = weekdays.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::misc_example::list_of_primitive_enums_twin_normal(api_weekdays),
                    )
                })())
            }
        },
    )
}
fn wire_test_abc_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    abc: impl CstDecode<crate::api::misc_example::AbcTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_abc_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_abc = abc.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_example::test_abc_enum_twin_normal(
                        api_abc,
                    ))
                })())
            }
        },
    )
}
fn wire_test_struct_with_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    se: impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_struct_with_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_se = se.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::misc_example::test_struct_with_enum_twin_normal(api_se),
                    )
                })())
            }
        },
    )
}
fn wire_StructInMiscNoTwinExampleA_sample_function_a_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructInMiscNoTwinExampleA_sample_function_a", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::misc_no_twin_example_a::StructInMiscNoTwinExampleA::sample_function_a(&api_that).await)
                    })().await)
                } })
}
fn wire_StructWithImplBlockInMultiFile_method_in_a_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithImplBlockInMultiFile_method_in_a", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::misc_no_twin_example_a::StructWithImplBlockInMultiFile::method_in_a(&api_that))
                    })())
                } })
}
fn wire_StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::misc_no_twin_example_b::StructInMiscNoTwinExampleB::get_struct_in_misc_no_twin_example_a(&api_that).await)
                    })().await)
                } })
}
fn wire_StructInMiscNoTwinExampleB_sample_function_b_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructInMiscNoTwinExampleB_sample_function_b", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::misc_no_twin_example_b::StructInMiscNoTwinExampleB::sample_function_b(&api_that).await)
                    })().await)
                } })
}
fn wire_StructWithImplBlockInMultiFile_method_in_b_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithImplBlockInMultiFile_method_in_b", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::misc_no_twin_example_a::StructWithImplBlockInMultiFile::method_in_b(&api_that))
                    })())
                } })
}
fn wire_empty_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    empty: impl CstDecode<crate::api::misc_type::EmptyTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_empty = empty.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_type::empty_struct_twin_normal(api_empty))
                })())
            }
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_type::func_return_unit_twin_normal())
                })())
            }
        },
    )
}
fn wire_handle_list_of_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_list_of_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_l = l.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_type::handle_list_of_struct_twin_normal(
                        api_l,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_string_list_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    names: impl CstDecode<Vec<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_list_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_names = names.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::misc_type::handle_string_list_twin_normal(
                        api_names,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_newtype_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_newtype_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::newtype_pattern::handle_newtype_twin_normal(
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_increment_boxed_optional_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<Box<f64>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_increment_boxed_optional_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::optional::handle_increment_boxed_optional_twin_normal(api_opt),
                    )
                })())
            }
        },
    )
}
fn wire_handle_option_box_arguments_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    i8box: impl CstDecode<Option<Box<i8>>>,
    u8box: impl CstDecode<Option<Box<u8>>>,
    i32box: impl CstDecode<Option<Box<i32>>>,
    i64box: impl CstDecode<Option<Box<i64>>>,
    f64box: impl CstDecode<Option<Box<f64>>>,
    boolbox: impl CstDecode<Option<Box<bool>>>,
    structbox: impl CstDecode<Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_option_box_arguments_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.cst_decode();
            let api_u8box = u8box.cst_decode();
            let api_i32box = i32box.cst_decode();
            let api_i64box = i64box.cst_decode();
            let api_f64box = f64box.cst_decode();
            let api_boolbox = boolbox.cst_decode();
            let api_structbox = structbox.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::optional::handle_option_box_arguments_twin_normal(
                            api_i8box,
                            api_u8box,
                            api_i32box,
                            api_i64box,
                            api_f64box,
                            api_boolbox,
                            api_structbox,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_optional_increment_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<crate::api::optional::ExoticOptionalsTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_increment_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::optional::handle_optional_increment_twin_normal(api_opt),
                    )
                })())
            }
        },
    )
}
fn wire_handle_optional_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    left: impl CstDecode<f64>,
    right: impl CstDecode<f64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_left = left.cst_decode();
            let api_right = right.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::optional::handle_optional_return_twin_normal(
                        api_left, api_right,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_optional_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    document: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_document = document.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::optional::handle_optional_struct_twin_normal(
                        api_document,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_vec_of_opts_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<crate::api::optional::OptVecsTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_opts_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::optional::handle_vec_of_opts_twin_normal(
                        api_opt,
                    ))
                })())
            }
        },
    )
}
fn wire_primitive_optional_types_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<Option<i32>>,
    my_i64: impl CstDecode<Option<i64>>,
    my_f64: impl CstDecode<Option<f64>>,
    my_bool: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_optional_types_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::optional_primitive_misc::primitive_optional_types_twin_normal(
                            api_my_i32,
                            api_my_i64,
                            api_my_f64,
                            api_my_bool,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_vec_of_primitive_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    n: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_primitive_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_n = n.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::primitive_list_misc::handle_vec_of_primitive_twin_normal(api_n),
                    )
                })())
            }
        },
    )
}
fn wire_primitive_types_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<i32>,
    my_i64: impl CstDecode<i64>,
    my_f64: impl CstDecode<f64>,
    my_bool: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_types_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::primitive_misc::primitive_types_twin_normal(
                        api_my_i32,
                        api_my_i64,
                        api_my_f64,
                        api_my_bool,
                    ))
                })())
            }
        },
    )
}
fn wire_primitive_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_u32: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_u32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_my_u32 = my_u32.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::primitive_misc::primitive_u32_twin_normal(
                        api_my_u32,
                    ))
                })())
            }
        },
    )
}
fn wire_boxed_blob_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<[u8; 1600]>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "boxed_blob_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_blob = blob.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::boxed_blob_twin_rust_async(api_blob).await)
                    })().await)
                } })
}
fn wire_func_test_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_test_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::func_test_id_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_get_array_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::get_array_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_get_complex_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_complex_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::get_complex_array_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_last_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    array: impl CstDecode<[f64; 16]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "last_number_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_array = array.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::last_number_twin_rust_async(api_array).await)
                    })().await)
                } })
}
fn wire_nested_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "nested_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::nested_id_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_new_msgid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 32]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "new_msgid_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::new_msgid_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_return_boxed_feed_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<[u8; 8]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_feed_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::return_boxed_feed_id_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_return_boxed_raw_feed_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_raw_feed_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::return_boxed_raw_feed_id_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_use_boxed_blob_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_boxed_blob_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_blob = blob.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::use_boxed_blob_twin_rust_async(api_blob).await)
                    })().await)
                } })
}
fn wire_use_msgid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_msgid_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async::use_msgid_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_boxed_blob_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "boxed_blob_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <Box<[u8; 1600]>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::boxed_blob_twin_rust_async_sse(api_blob).await)
                    })().await)
                } })
}
fn wire_func_test_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_test_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::func_test_id_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_get_array_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_array_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::get_array_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_get_complex_array_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_complex_array_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::get_complex_array_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_last_number_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "last_number_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_array = <[f64; 16]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::last_number_twin_rust_async_sse(api_array).await)
                    })().await)
                } })
}
fn wire_nested_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "nested_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::nested_id_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_new_msgid_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "new_msgid_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 32]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::new_msgid_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_return_boxed_feed_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_feed_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 8]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::return_boxed_feed_id_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_return_boxed_raw_feed_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_raw_feed_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::return_boxed_raw_feed_id_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_use_boxed_blob_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_boxed_blob_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::use_boxed_blob_twin_rust_async_sse(api_blob).await)
                    })().await)
                } })
}
fn wire_use_msgid_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_msgid_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_rust_async_sse::use_msgid_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_boxed_blob_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <Box<[u8; 1600]>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::boxed_blob_twin_sse(api_blob),
                    )
                })())
            }
        },
    )
}
fn wire_func_test_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::func_test_id_twin_sse(api_id),
                    )
                })())
            }
        },
    )
}
fn wire_get_array_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::get_array_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_get_complex_array_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::get_complex_array_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_last_number_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_array = <[f64; 16]>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::last_number_twin_sse(api_array),
                    )
                })())
            }
        },
    )
}
fn wire_nested_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id =
                <[crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4]>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::nested_id_twin_sse(api_id),
                    )
                })())
            }
        },
    )
}
fn wire_new_msgid_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 32]>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::new_msgid_twin_sse(api_id),
                    )
                })())
            }
        },
    )
}
fn wire_return_boxed_feed_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_feed_id_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 8]>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::return_boxed_feed_id_twin_sse(
                            api_id,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_return_boxed_raw_feed_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_raw_feed_id_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_sse::return_boxed_raw_feed_id_twin_sse(api_id))
                    })())
                } })
}
fn wire_use_boxed_blob_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob =
                <Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::use_boxed_blob_twin_sse(
                            api_blob,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_use_msgid_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::array_twin_sse::use_msgid_twin_sse(api_id),
                    )
                })())
            }
        },
    )
}
fn wire_boxed_blob_twin_sync_impl(
    blob: impl CstDecode<Box<[u8; 1600]>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_blob = blob.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::boxed_blob_twin_sync(api_blob),
                )
            })())
        },
    )
}
fn wire_func_test_id_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::func_test_id_twin_sync(api_id),
                )
            })())
        },
    )
}
fn wire_get_array_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::get_array_twin_sync(),
                )
            })())
        },
    )
}
fn wire_get_complex_array_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::get_complex_array_twin_sync(),
                )
            })())
        },
    )
}
fn wire_last_number_twin_sync_impl(
    array: impl CstDecode<[f64; 16]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_array = array.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::last_number_twin_sync(api_array),
                )
            })())
        },
    )
}
fn wire_nested_id_twin_sync_impl(
    id: impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "nested_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::nested_id_twin_sync(api_id),
                )
            })())
        },
    )
}
fn wire_new_msgid_twin_sync_impl(
    id: impl CstDecode<[u8; 32]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::new_msgid_twin_sync(api_id),
                )
            })())
        },
    )
}
fn wire_return_boxed_feed_id_twin_sync_impl(
    id: impl CstDecode<[u8; 8]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_feed_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::return_boxed_feed_id_twin_sync(
                        api_id,
                    ),
                )
            })())
        },
    )
}
fn wire_return_boxed_raw_feed_id_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_boxed_raw_feed_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::return_boxed_raw_feed_id_twin_sync(
                        api_id,
                    ),
                )
            })())
        },
    )
}
fn wire_use_boxed_blob_twin_sync_impl(
    blob: impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_blob = blob.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::use_boxed_blob_twin_sync(api_blob),
                )
            })())
        },
    )
}
fn wire_use_msgid_twin_sync_impl(
    id: impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync::use_msgid_twin_sync(api_id),
                )
            })())
        },
    )
}
fn wire_boxed_blob_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "boxed_blob_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <Box<[u8; 1600]>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::boxed_blob_twin_sync_sse(
                        api_blob,
                    ),
                )
            })())
        },
    )
}
fn wire_func_test_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_test_id_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id =
                <crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::func_test_id_twin_sync_sse(
                        api_id,
                    ),
                )
            })())
        },
    )
}
fn wire_get_array_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_array_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::get_array_twin_sync_sse(),
                )
            })())
        },
    )
}
fn wire_get_complex_array_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_complex_array_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::get_complex_array_twin_sync_sse(
                    ),
                )
            })())
        },
    )
}
fn wire_last_number_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "last_number_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_array = <[f64; 16]>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::last_number_twin_sync_sse(
                        api_array,
                    ),
                )
            })())
        },
    )
}
fn wire_nested_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "nested_id_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4]>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_sync_sse::nested_id_twin_sync_sse(api_id))
                })()) })
}
fn wire_new_msgid_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "new_msgid_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 32]>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::new_msgid_twin_sync_sse(api_id),
                )
            })())
        },
    )
}
fn wire_return_boxed_feed_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_feed_id_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <[u8; 8]>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_sync_sse::return_boxed_feed_id_twin_sync_sse(api_id))
                })()) })
}
fn wire_return_boxed_raw_feed_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_boxed_raw_feed_id_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::array_twin_sync_sse::return_boxed_raw_feed_id_twin_sync_sse(api_id))
                })()) })
}
fn wire_use_boxed_blob_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_boxed_blob_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob =
                <Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::use_boxed_blob_twin_sync_sse(
                        api_blob,
                    ),
                )
            })())
        },
    )
}
fn wire_use_msgid_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "use_msgid_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id =
                <crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::array_twin_sync_sse::use_msgid_twin_sync_sse(api_id),
                )
            })())
        },
    )
}
fn wire_func_async_simple_add_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_async_simple_add_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <i32>::sse_decode(&mut deserializer);
let api_b = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::async_misc_twin_sse::func_async_simple_add_twin_sse(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_func_async_void_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_async_void_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::async_misc_twin_sse::func_async_void_twin_sse().await)
                    })().await)
                } })
}
fn wire_handle_customized_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_val = val.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async::handle_customized_struct_twin_rust_async(api_val).await)
                    })().await)
                } })
}
fn wire_next_user_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    user_id: impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "next_user_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_user_id = user_id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async::next_user_id_twin_rust_async(api_user_id).await)
                    })().await)
                } })
}
fn wire_handle_customized_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async_sse::handle_customized_struct_twin_rust_async_sse(api_val).await)
                    })().await)
                } })
}
fn wire_next_user_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "next_user_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id = <crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_rust_async_sse::next_user_id_twin_rust_async_sse(api_user_id).await)
                    })().await)
                } })
}
fn wire_handle_customized_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_sse::handle_customized_struct_twin_sse(api_val))
                    })())
                } })
}
fn wire_next_user_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id =
                <crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::attribute_twin_sse::next_user_id_twin_sse(
                            api_user_id,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_customized_struct_twin_sync_impl(
    val: impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_val = val.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_sync::handle_customized_struct_twin_sync(api_val))
                })()) })
}
fn wire_next_user_id_twin_sync_impl(
    user_id: impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_user_id = user_id.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::attribute_twin_sync::next_user_id_twin_sync(
                        api_user_id,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_customized_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_customized_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::attribute_twin_sync_sse::handle_customized_struct_twin_sync_sse(api_val))
                })()) })
}
fn wire_next_user_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "next_user_id_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_user_id =
                <crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::attribute_twin_sync_sse::next_user_id_twin_sync_sse(
                        api_user_id,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_basic_general_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic::example_basic_type_basic_general_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_basic_primitive_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic::example_basic_type_basic_primitive_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_basic_struct_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::basic::BasicStructTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic::example_basic_type_basic_struct_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_bool_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_bool_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_bytes_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_bytes_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_f32_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_f64_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i16>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_i16_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_i32_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_i64_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i8>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_i8_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_isize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<isize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_isize_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_isize_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_string_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_string_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u16>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u16_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_u16_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u32_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_u32_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u64_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_u64_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u8>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_u8_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_usize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_usize_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic::example_basic_type_usize_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_list_type_basic_general_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_basic_general_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_struct_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_basic_struct_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_bool_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_bytes_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_f32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_f64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_i16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_i32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_i64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_i8_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_string_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_u16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_u32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_u64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list::example_basic_list_type_u8_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_bool_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_bytes_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_f32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_f64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_i16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_i64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_i8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_u16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_u32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_u64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async::example_basic_list_type_u8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_bool_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_bool_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_bytes_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_f32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_f32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_f64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_f64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_i16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_i64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_i8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_i8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_u16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_u32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_u64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_u8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_rust_async_sse::example_basic_list_type_u8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_list_type_basic_general_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_basic_general_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_basic_primitive_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_struct_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_basic_struct_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_bool_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_bool_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_bytes_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_f32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_f32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_f64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_f64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_i16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_i32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_i64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_i8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_i8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_u16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_u32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_u64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_u8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sse::example_basic_list_type_u8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_list_type_basic_general_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_basic_general_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_basic_struct_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_basic_struct_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_bool_twin_sync_impl(
    arg: impl CstDecode<Vec<bool>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_bool_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_bytes_twin_sync_impl(
    arg: impl CstDecode<Vec<Vec<u8>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_bytes_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_f32_twin_sync_impl(
    arg: impl CstDecode<Vec<f32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_f32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_f64_twin_sync_impl(
    arg: impl CstDecode<Vec<f64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_f64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i16_twin_sync_impl(
    arg: impl CstDecode<Vec<i16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_i16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i32_twin_sync_impl(
    arg: impl CstDecode<Vec<i32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_i32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i64_twin_sync_impl(
    arg: impl CstDecode<Vec<i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_i64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i8_twin_sync_impl(
    arg: impl CstDecode<Vec<i8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_i8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_string_twin_sync_impl(
    arg: impl CstDecode<Vec<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_string_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u16_twin_sync_impl(
    arg: impl CstDecode<Vec<u16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_u16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u32_twin_sync_impl(
    arg: impl CstDecode<Vec<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_u32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u64_twin_sync_impl(
    arg: impl CstDecode<Vec<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_u64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u8_twin_sync_impl(
    arg: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync::example_basic_list_type_u8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_list_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_general_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_basic_general_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_basic_struct_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_basic_struct_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_bool_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bool_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<bool>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_bool_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_bytes_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_f32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_f32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_f64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_f64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<f64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_f64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_i16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_i64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_i8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_i8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<i8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_i8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_u16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_u32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_u64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_list_type_u8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_list_type_u8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_list_twin_sync_sse::example_basic_list_type_u8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_general_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_basic_general_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_struct_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_basic_struct_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_bool_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_bytes_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_f32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_f64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_i16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_i32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_i64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_map_type_i8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_map::example_basic_map_type_i8_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_map_type_isize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, isize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_isize_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_string_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_u16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_u32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_u64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_map_type_u8_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_map::example_basic_map_type_u8_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_map_type_usize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map::example_basic_map_type_usize_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_bool_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_bytes_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_f32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_f64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_i16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_i64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_i8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_isize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, isize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_isize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_u16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_u32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_u64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_u8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_usize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async::example_basic_map_type_usize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_bool_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_bool_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_bytes_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_f32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_f32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_f64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_f64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_i16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_i64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_i8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_i8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_isize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, isize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_isize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_u16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_u32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_u64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_u8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_u8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_usize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, usize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_rust_async_sse::example_basic_map_type_usize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_map_type_basic_general_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_basic_general_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_basic_primitive_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_struct_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_basic_struct_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_bool_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_bool_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_bytes_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_f32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_f32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_f64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_f64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_i16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_i32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_i64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_i8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_i8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_isize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, isize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_isize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_u16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_u32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_u64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_u8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_u8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_usize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, usize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sse::example_basic_map_type_usize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_map_type_basic_general_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_basic_general_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_struct_twin_sync_twin_sync_impl(
    arg: impl CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_basic_struct_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_bool_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, bool>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_bool_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_bytes_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, Vec<u8>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_bytes_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_f32_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, f32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_f32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_f64_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, f64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_f64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i16_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, i16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_i16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i32_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_i32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i64_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_i64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i8_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, i8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_i8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_isize_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, isize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_isize_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_string_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_string_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u16_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, u16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_u16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u32_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_u32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u64_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_u64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u8_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_u8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_usize_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync::example_basic_map_type_usize_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_general_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_basic_general_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_basic_struct_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_basic_struct_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_bool_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bool_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, bool>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_bool_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_bytes_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_f32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_f32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_f64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_f64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, f64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_f64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_i16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_i64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_i8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_i8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_i8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_isize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_isize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, isize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_isize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_u16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_u32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_u64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_u8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_u8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_u8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_map_type_usize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_map_type_usize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, usize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_map_twin_sync_sse::example_basic_map_type_usize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_basic_general_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_struct_twin_normal_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic::BasicStructTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_normal_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_basic_struct_twin_normal_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_bool_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_bool_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_bytes_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_f32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_f32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_f64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_f64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_i16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_i32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_i64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_i8_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_isize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<isize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_isize_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_string_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_string_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u16_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_u16_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u32_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_u32_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u64_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_u64_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u8_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_u8_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_usize_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional::example_basic_optional_type_usize_twin_normal(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_bool_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_bytes_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_f32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<f64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_f64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_i16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_i64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<i8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_i8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_isize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<isize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_isize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u16>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_u16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_u32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u64>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_u64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_u8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_usize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Option<usize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async::example_basic_optional_type_usize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_bool_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_bool_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_bytes_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_f32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_f32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_f64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_f64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_i16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_i64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_i8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_i8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_isize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<isize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_isize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_u16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_u32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_u64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_u8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_u8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_usize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<usize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_rust_async_sse::example_basic_optional_type_usize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_basic_general_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_basic_primitive_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_struct_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_basic_struct_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_bool_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_bool_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_bytes_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_f32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_f32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_f64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_f64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_i16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_i32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_i64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_i8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_i8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_isize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<isize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_isize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u16>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_u16_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_u32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u64>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_u64_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_u8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_u8_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_usize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<usize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sse::example_basic_optional_type_usize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_basic_general_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_struct_twin_sync_twin_sync_impl(
    arg: impl CstDecode<Option<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_basic_struct_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_bool_twin_sync_impl(
    arg: impl CstDecode<Option<bool>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_bool_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_bytes_twin_sync_impl(
    arg: impl CstDecode<Option<Vec<u8>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_bytes_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_f32_twin_sync_impl(
    arg: impl CstDecode<Option<f32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_f32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_f64_twin_sync_impl(
    arg: impl CstDecode<Option<f64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_f64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i16_twin_sync_impl(
    arg: impl CstDecode<Option<i16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_i16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i32_twin_sync_impl(
    arg: impl CstDecode<Option<i32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_i32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i64_twin_sync_impl(
    arg: impl CstDecode<Option<i64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_i64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i8_twin_sync_impl(
    arg: impl CstDecode<Option<i8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_i8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_isize_twin_sync_impl(
    arg: impl CstDecode<Option<isize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_isize_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_string_twin_sync_impl(
    arg: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_string_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u16_twin_sync_impl(
    arg: impl CstDecode<Option<u16>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_u16_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u32_twin_sync_impl(
    arg: impl CstDecode<Option<u32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_u32_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u64_twin_sync_impl(
    arg: impl CstDecode<Option<u64>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_u64_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u8_twin_sync_impl(
    arg: impl CstDecode<Option<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_u8_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_usize_twin_sync_impl(
    arg: impl CstDecode<Option<usize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync::example_basic_optional_type_usize_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_general_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_basic_general_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_basic_struct_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_basic_struct_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_bool_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bool_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_bool_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_bytes_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_f32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_f32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_f64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_f64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<f64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_f64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_i16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_i64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_i8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_i8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<i8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_i8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_isize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_isize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<isize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_isize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u16>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_u16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_u32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u64>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_u64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_u8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_u8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_u8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_optional_type_usize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_optional_type_usize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Option<usize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_optional_twin_sync_sse::example_basic_optional_type_usize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_struct_twin_rust_async_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_rust_async_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_basic_struct_twin_rust_async_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_bool_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bool_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_bool_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_bytes_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_f32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_f32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_f64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<f64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_f64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i16>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_i16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_i64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<i8>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_i8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_isize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<isize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_isize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_isize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u16_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u16>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u16_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_u16_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_u32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u64_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u64_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_u64_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u8>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_u8_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_usize_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_usize_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async::example_basic_type_usize_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_basic_general_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_basic_primitive_enum_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_basic_struct_twin_rust_async_sse_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_bool_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bool_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_bool_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_bytes_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_f32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_f32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_f64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_f64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i16>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_i16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_i64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_i8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i8>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_i8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_isize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_isize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <isize>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_isize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u16_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u16_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u16>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_u16_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_u32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u64_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u64_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_u64_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_u8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u8>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_u8_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_usize_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_usize_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_rust_async_sse::example_basic_type_usize_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_example_basic_type_basic_general_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_basic_general_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_basic_primitive_enum_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_basic_primitive_enum_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_basic_struct_twin_sse_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_sse_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_basic_struct_twin_sse_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_bool_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_bool_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <bool>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_bool_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_bytes_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_f32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f32_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_f32_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_f64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f64_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_f64_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i16_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i16>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_i16_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i32_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_i32_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i64_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_i64_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_i8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i8_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i8>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_i8_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_isize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_isize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <isize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_isize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_u16_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u16_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u16>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_u16_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u32_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_u32_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u64_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u64_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u64>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_u64_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_u8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u8_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u8>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::basic_twin_sse::example_basic_type_u8_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_example_basic_type_usize_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_usize_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sse::example_basic_type_usize_twin_sse(api_arg))
                    })())
                } })
}
fn wire_example_basic_type_basic_general_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync::example_basic_type_basic_general_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_type_basic_primitive_enum_twin_sync_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync::example_basic_type_basic_primitive_enum_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_type_basic_struct_twin_sync_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_sync_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync::example_basic_type_basic_struct_twin_sync_twin_sync(api_arg))
                })()) })
}
fn wire_example_basic_type_bool_twin_sync_impl(
    arg: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_bool_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_bool_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_bytes_twin_sync_impl(
    arg: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_bytes_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_bytes_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_f32_twin_sync_impl(
    arg: impl CstDecode<f32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_f32_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_f64_twin_sync_impl(
    arg: impl CstDecode<f64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_f64_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_f64_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_i16_twin_sync_impl(
    arg: impl CstDecode<i16>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i16_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_i16_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_i32_twin_sync_impl(
    arg: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_i32_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_i64_twin_sync_impl(
    arg: impl CstDecode<i64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i64_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_i64_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_i8_twin_sync_impl(
    arg: impl CstDecode<i8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_i8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_i8_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_isize_twin_sync_impl(
    arg: impl CstDecode<isize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_isize_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_isize_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_string_twin_sync_impl(
    arg: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_string_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_string_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_u16_twin_sync_impl(
    arg: impl CstDecode<u16>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u16_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_u16_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_u32_twin_sync_impl(
    arg: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_u32_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_u64_twin_sync_impl(
    arg: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u64_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_u64_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_u8_twin_sync_impl(
    arg: impl CstDecode<u8>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_u8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_u8_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_usize_twin_sync_impl(
    arg: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "example_basic_type_usize_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::basic_twin_sync::example_basic_type_usize_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_example_basic_type_basic_general_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_general_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_basic_general_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_basic_primitive_enum_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_basic_struct_twin_sync_sse_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_basic_struct_twin_sync_sse_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_basic_struct_twin_sync_sse_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_bool_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bool_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <bool>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_bool_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_bytes_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_f32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_f32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_f64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_f64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <f64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_f64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_i16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i16>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_i16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_i64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_i64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_i8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_i8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <i8>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_i8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_isize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_isize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <isize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_isize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_u16_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u16_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u16>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_u16_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_u32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_u32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_u64_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u64_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_u64_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_u8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_u8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u8>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_u8_twin_sync_sse(api_arg))
                })()) })
}
fn wire_example_basic_type_usize_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "example_basic_type_usize_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <usize>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::basic_twin_sync_sse::example_basic_type_usize_twin_sync_sse(api_arg))
                })()) })
}
fn wire_benchmark_binary_tree_input_json_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_input_json_twin_normal(api_raw))
                    })())
                } })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_input_protobuf_twin_normal(api_raw))
                    })())
                } })
}
fn wire_benchmark_binary_tree_input_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    tree: impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_tree = tree.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_input_twin_normal(api_tree))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_json_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_output_json_twin_normal(api_depth))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_output_protobuf_twin_normal(api_depth))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_binary_tree_output_twin_normal(api_depth))
                    })())
                } })
}
fn wire_benchmark_blob_input_json_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_blob_input_json_twin_normal(api_raw))
                    })())
                } })
}
fn wire_benchmark_blob_input_protobuf_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_blob_input_protobuf_twin_normal(api_raw))
                    })())
                } })
}
fn wire_benchmark_blob_input_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_blob_input_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::benchmark_api::benchmark_blob_input_twin_normal(
                            api_blob,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_benchmark_blob_output_json_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_blob_output_json_twin_normal(api_size))
                    })())
                } })
}
fn wire_benchmark_blob_output_protobuf_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_blob_output_protobuf_twin_normal(api_size))
                    })())
                } })
}
fn wire_benchmark_blob_output_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_blob_output_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_size = size.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::benchmark_api::benchmark_blob_output_twin_normal(
                            api_size,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_benchmark_input_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_input_bytes_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_bytes = bytes.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::benchmark_api::benchmark_input_bytes_twin_normal(
                            api_bytes,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_benchmark_output_bytes_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api::benchmark_output_bytes_twin_normal(api_size))
                    })())
                } })
}
fn wire_benchmark_void_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::benchmark_api::benchmark_void_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_benchmark_binary_tree_input_json_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_input_json_twin_rust_async(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_input_protobuf_twin_rust_async(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    tree: impl CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_tree = tree.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_input_twin_rust_async(api_tree).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_json_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_output_json_twin_rust_async(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_output_protobuf_twin_rust_async(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    depth: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_depth = depth.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_binary_tree_output_twin_rust_async(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_json_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_input_json_twin_rust_async(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_protobuf_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    raw: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_raw = raw.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_input_protobuf_twin_rust_async(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    blob: impl CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_blob = blob.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_input_twin_rust_async(api_blob).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_json_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_output_json_twin_rust_async(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_protobuf_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_output_protobuf_twin_rust_async(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_blob_output_twin_rust_async(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_input_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    bytes: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_bytes = bytes.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_input_bytes_twin_rust_async(api_bytes).await)
                    })().await)
                } })
}
fn wire_benchmark_output_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    size: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_size = size.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_output_bytes_twin_rust_async(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_void_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_void_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async::benchmark_void_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_json_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_input_json_twin_rust_async_sse(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_input_protobuf_twin_rust_async_sse(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tree = <crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_input_twin_rust_async_sse(api_tree).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_json_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_output_json_twin_rust_async_sse(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_output_protobuf_twin_rust_async_sse(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_output_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_binary_tree_output_twin_rust_async_sse(api_depth).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_json_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_input_json_twin_rust_async_sse(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_protobuf_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_input_protobuf_twin_rust_async_sse(api_raw).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_input_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_input_twin_rust_async_sse(api_blob).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_json_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_output_json_twin_rust_async_sse(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_protobuf_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_output_protobuf_twin_rust_async_sse(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_blob_output_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_blob_output_twin_rust_async_sse(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_input_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_input_bytes_twin_rust_async_sse(api_bytes).await)
                    })().await)
                } })
}
fn wire_benchmark_output_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_output_bytes_twin_rust_async_sse(api_size).await)
                    })().await)
                } })
}
fn wire_benchmark_void_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_void_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::benchmark_void_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_benchmark_binary_tree_input_json_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_input_json_twin_sse(api_raw))
                    })())
                } })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_input_protobuf_twin_sse(api_raw))
                    })())
                } })
}
fn wire_benchmark_binary_tree_input_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tree = <crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_input_twin_sse(api_tree))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_json_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_output_json_twin_sse(api_depth))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_output_protobuf_twin_sse(api_depth))
                    })())
                } })
}
fn wire_benchmark_binary_tree_output_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_binary_tree_output_twin_sse(api_depth))
                    })())
                } })
}
fn wire_benchmark_blob_input_json_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_input_json_twin_sse(api_raw))
                    })())
                } })
}
fn wire_benchmark_blob_input_protobuf_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_input_protobuf_twin_sse(api_raw))
                    })())
                } })
}
fn wire_benchmark_blob_input_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_input_twin_sse(api_blob))
                    })())
                } })
}
fn wire_benchmark_blob_output_json_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_output_json_twin_sse(api_size))
                    })())
                } })
}
fn wire_benchmark_blob_output_protobuf_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_output_protobuf_twin_sse(api_size))
                    })())
                } })
}
fn wire_benchmark_blob_output_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_blob_output_twin_sse(api_size))
                    })())
                } })
}
fn wire_benchmark_input_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_input_bytes_twin_sse(api_bytes))
                    })())
                } })
}
fn wire_benchmark_output_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_output_bytes_twin_sse(api_size))
                    })())
                } })
}
fn wire_benchmark_void_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::benchmark_api_twin_sse::benchmark_void_twin_sse(
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_benchmark_binary_tree_input_json_twin_sync_impl(
    raw: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_raw = raw.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_input_json_twin_sync(api_raw))
                })()) })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_sync_impl(
    raw: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_raw = raw.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_input_protobuf_twin_sync(api_raw))
                })()) })
}
fn wire_benchmark_binary_tree_input_twin_sync_impl(
    tree: impl CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_tree = tree.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_input_twin_sync(api_tree))
                })()) })
}
fn wire_benchmark_binary_tree_output_json_twin_sync_impl(
    depth: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_depth = depth.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_output_json_twin_sync(api_depth))
                })()) })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_sync_impl(
    depth: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_depth = depth.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_output_protobuf_twin_sync(api_depth))
                })()) })
}
fn wire_benchmark_binary_tree_output_twin_sync_impl(
    depth: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_depth = depth.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_binary_tree_output_twin_sync(api_depth))
                })()) })
}
fn wire_benchmark_blob_input_json_twin_sync_impl(
    raw: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_raw = raw.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_input_json_twin_sync(api_raw))
                })()) })
}
fn wire_benchmark_blob_input_protobuf_twin_sync_impl(
    raw: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_raw = raw.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_input_protobuf_twin_sync(api_raw))
                })()) })
}
fn wire_benchmark_blob_input_twin_sync_impl(
    blob: impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_blob = blob.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_input_twin_sync(api_blob))
                })()) })
}
fn wire_benchmark_blob_output_json_twin_sync_impl(
    size: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_size = size.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_output_json_twin_sync(api_size))
                })()) })
}
fn wire_benchmark_blob_output_protobuf_twin_sync_impl(
    size: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_size = size.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_output_protobuf_twin_sync(api_size))
                })()) })
}
fn wire_benchmark_blob_output_twin_sync_impl(
    size: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_size = size.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_blob_output_twin_sync(api_size))
                })()) })
}
fn wire_benchmark_input_bytes_twin_sync_impl(
    bytes: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_bytes = bytes.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_input_bytes_twin_sync(api_bytes))
                })()) })
}
fn wire_benchmark_output_bytes_twin_sync_impl(
    size: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_size = size.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_output_bytes_twin_sync(api_size))
                })()) })
}
fn wire_benchmark_void_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "benchmark_void_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::benchmark_api_twin_sync::benchmark_void_twin_sync(),
                )
            })())
        },
    )
}
fn wire_benchmark_binary_tree_input_json_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_json_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_input_json_twin_sync_sse(api_raw))
                })()) })
}
fn wire_benchmark_binary_tree_input_protobuf_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_protobuf_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_input_protobuf_twin_sync_sse(api_raw))
                })()) })
}
fn wire_benchmark_binary_tree_input_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_input_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_tree = <crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_input_twin_sync_sse(api_tree))
                })()) })
}
fn wire_benchmark_binary_tree_output_json_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_json_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_output_json_twin_sync_sse(api_depth))
                })()) })
}
fn wire_benchmark_binary_tree_output_protobuf_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_protobuf_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_output_protobuf_twin_sync_sse(api_depth))
                })()) })
}
fn wire_benchmark_binary_tree_output_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_binary_tree_output_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_depth = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_binary_tree_output_twin_sync_sse(api_depth))
                })()) })
}
fn wire_benchmark_blob_input_json_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_json_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_input_json_twin_sync_sse(api_raw))
                })()) })
}
fn wire_benchmark_blob_input_protobuf_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_protobuf_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_raw = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_input_protobuf_twin_sync_sse(api_raw))
                })()) })
}
fn wire_benchmark_blob_input_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_input_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blob = <crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_input_twin_sync_sse(api_blob))
                })()) })
}
fn wire_benchmark_blob_output_json_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_json_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_output_json_twin_sync_sse(api_size))
                })()) })
}
fn wire_benchmark_blob_output_protobuf_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_protobuf_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_output_protobuf_twin_sync_sse(api_size))
                })()) })
}
fn wire_benchmark_blob_output_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_blob_output_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_blob_output_twin_sync_sse(api_size))
                })()) })
}
fn wire_benchmark_input_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_input_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_bytes = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_input_bytes_twin_sync_sse(api_bytes))
                })()) })
}
fn wire_benchmark_output_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_output_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_size = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_output_bytes_twin_sync_sse(api_size))
                })()) })
}
fn wire_benchmark_void_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "benchmark_void_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::benchmark_api_twin_sync_sse::benchmark_void_twin_sync_sse())
                })()) })
}
fn wire_datetime_local_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Local>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "datetime_local_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::datetime_local_twin_rust_async(api_d).await)
                    })().await)
                } })
}
fn wire_datetime_utc_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::DateTime<chrono::Utc>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "datetime_utc_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::datetime_utc_twin_rust_async(api_d).await)
                    })().await)
                } })
}
fn wire_duration_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::Duration>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "duration_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::duration_twin_rust_async(api_d).await)
                    })().await)
                } })
}
fn wire_handle_durations_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    durations: impl CstDecode<Vec<chrono::Duration>>,
    since: impl CstDecode<chrono::DateTime<chrono::Local>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_durations_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_durations = durations.cst_decode();let api_since = since.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::handle_durations_twin_rust_async(api_durations, api_since).await)
                    })().await)
                } })
}
fn wire_handle_timestamps_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>>,
    epoch: impl CstDecode<chrono::NaiveDateTime>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_timestamps_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_timestamps = timestamps.cst_decode();let api_epoch = epoch.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::handle_timestamps_twin_rust_async(api_timestamps, api_epoch).await)
                    })().await)
                } })
}
fn wire_how_long_does_it_take_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mine: impl CstDecode<
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "how_long_does_it_take_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_mine = mine.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::chrono_type_twin_rust_async::how_long_does_it_take_twin_rust_async(api_mine).await
                    })().await)
                } })
}
fn wire_naivedatetime_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<chrono::NaiveDateTime>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "naivedatetime_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::naivedatetime_twin_rust_async(api_d).await)
                    })().await)
                } })
}
fn wire_optional_empty_datetime_utc_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "optional_empty_datetime_utc_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_d = d.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::optional_empty_datetime_utc_twin_rust_async(api_d).await)
                    })().await)
                } })
}
fn wire_test_chrono_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_chrono_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::test_chrono_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_precise_chrono_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_precise_chrono_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_rust_async::test_precise_chrono_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_datetime_local_twin_sync_impl(
    d: impl CstDecode<chrono::DateTime<chrono::Local>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_local_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::datetime_local_twin_sync(
                        api_d,
                    ),
                )
            })())
        },
    )
}
fn wire_datetime_utc_twin_sync_impl(
    d: impl CstDecode<chrono::DateTime<chrono::Utc>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "datetime_utc_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::datetime_utc_twin_sync(api_d),
                )
            })())
        },
    )
}
fn wire_duration_twin_sync_impl(
    d: impl CstDecode<chrono::Duration>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "duration_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::duration_twin_sync(api_d),
                )
            })())
        },
    )
}
fn wire_handle_durations_twin_sync_impl(
    durations: impl CstDecode<Vec<chrono::Duration>>,
    since: impl CstDecode<chrono::DateTime<chrono::Local>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_durations_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_durations = durations.cst_decode();
            let api_since = since.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::handle_durations_twin_sync(
                        api_durations,
                        api_since,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_timestamps_twin_sync_impl(
    timestamps: impl CstDecode<Vec<chrono::NaiveDateTime>>,
    epoch: impl CstDecode<chrono::NaiveDateTime>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_timestamps_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_timestamps = timestamps.cst_decode();
            let api_epoch = epoch.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::handle_timestamps_twin_sync(
                        api_timestamps,
                        api_epoch,
                    ),
                )
            })())
        },
    )
}
fn wire_how_long_does_it_take_twin_sync_impl(
    mine: impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "how_long_does_it_take_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_mine = mine.cst_decode();
            transform_result_dco((move || {
                crate::api::pseudo_manual::chrono_type_twin_sync::how_long_does_it_take_twin_sync(
                    api_mine,
                )
            })())
        },
    )
}
fn wire_naivedatetime_twin_sync_impl(
    d: impl CstDecode<chrono::NaiveDateTime>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "naivedatetime_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_d = d.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::naivedatetime_twin_sync(
                        api_d,
                    ),
                )
            })())
        },
    )
}
fn wire_optional_empty_datetime_utc_twin_sync_impl(
    d: impl CstDecode<Option<chrono::DateTime<chrono::Utc>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "optional_empty_datetime_utc_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_d = d.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::chrono_type_twin_sync::optional_empty_datetime_utc_twin_sync(api_d))
                })()) })
}
fn wire_test_chrono_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_chrono_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::test_chrono_twin_sync(),
                )
            })())
        },
    )
}
fn wire_test_precise_chrono_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_precise_chrono_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::chrono_type_twin_sync::test_precise_chrono_twin_sync(
                    ),
                )
            })())
        },
    )
}
fn wire_StructWithCommentsTwinRustAsync_instance_method_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsync_instance_method_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync::instance_method_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_StructWithCommentsTwinRustAsync_static_method_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsync_static_method_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync::static_method_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_function_with_comments_slash_star_star_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_slash_star_star_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_triple_slash_multi_line_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_function_with_comments_triple_slash_single_line_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async::function_with_comments_triple_slash_single_line_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsyncSse_instance_method_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse::instance_method_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinRustAsyncSse_static_method_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse::static_method_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_function_with_comments_slash_star_star_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async_sse::function_with_comments_slash_star_star_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async_sse::function_with_comments_triple_slash_multi_line_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_function_with_comments_triple_slash_single_line_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_rust_async_sse::function_with_comments_triple_slash_single_line_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_StructWithCommentsTwinSse_instance_method_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSse_instance_method_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse::instance_method_twin_sse(&api_that))
                    })())
                } })
}
fn wire_StructWithCommentsTwinSse_static_method_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSse_static_method_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse::static_method_twin_sse())
                    })())
                } })
}
fn wire_function_with_comments_slash_star_star_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sse::function_with_comments_slash_star_star_twin_sse())
                    })())
                } })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sse::function_with_comments_triple_slash_multi_line_twin_sse())
                    })())
                } })
}
fn wire_function_with_comments_triple_slash_single_line_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sse::function_with_comments_triple_slash_single_line_twin_sse())
                    })())
                } })
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::instance_method_twin_sync(&api_that))
                })()) })
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSync_static_method_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync::static_method_twin_sync())
                })()) })
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_slash_star_star_twin_sync())
                })()) })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_multi_line_twin_sync())
                })()) })
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync::function_with_comments_triple_slash_single_line_twin_sync())
                })()) })
}
fn wire_StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSyncSse_instance_method_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse::instance_method_twin_sync_sse(&api_that))
                })()) })
}
fn wire_StructWithCommentsTwinSyncSse_static_method_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "StructWithCommentsTwinSyncSse_static_method_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse::static_method_twin_sync_sse())
                })()) })
}
fn wire_function_with_comments_slash_star_star_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_slash_star_star_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync_sse::function_with_comments_slash_star_star_twin_sync_sse())
                })()) })
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_multi_line_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync_sse::function_with_comments_triple_slash_multi_line_twin_sync_sse())
                })()) })
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "function_with_comments_triple_slash_single_line_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::comment_twin_sync_sse::function_with_comments_triple_slash_single_line_twin_sync_sse())
                })()) })
}
fn wire_return_dart_dynamic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_dart_dynamic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_dynamic_twin_rust_async::return_dart_dynamic_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_return_dart_dynamic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_dart_dynamic_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_dynamic_twin_sync::return_dart_dynamic_twin_sync())
                })()) })
}
fn wire_rust_call_dart_loopback_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_loopback_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_loopback_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_multi_times_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    num_times: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_multi_times_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs__Output_unit(callback.cst_decode());let api_num_times = num_times.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_multi_times_twin_rust_async(api_callback, api_num_times).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_one_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_one_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs_String_Output_unit(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_one_arg_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs__Output_String(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_return_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_simple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_simple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs__Output_unit(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_simple_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_two_args_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_two_args_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_two_args_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode();let api_callback = decode_DartFn_Inputs_DartOpaque_Output_unit(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_with_dart_opaque_arg_twin_rust_async(api_input, api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_result_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    callback: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_result_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_callback = decode_DartFn_Inputs__Output_DartOpaque(callback.cst_decode()); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async::rust_call_dart_with_dart_opaque_result_twin_rust_async(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_loopback_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_loopback_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_sse_Output_demo_struct_for_rust_call_dart_twin_rust_async_sse(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_loopback_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_multi_times_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_multi_times_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_num_times = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_multi_times_twin_rust_async_sse(api_callback, api_num_times).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_one_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_one_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_String_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_one_arg_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_return_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_return_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_String(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_return_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_simple_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_simple_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_simple_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_two_args_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_two_args_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_sse_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_two_args_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
let api_callback = decode_DartFn_Inputs_DartOpaque_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_with_dart_opaque_arg_twin_rust_async_sse(api_input, api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_result_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_result_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_DartOpaque(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::rust_call_dart_with_dart_opaque_result_twin_rust_async_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_loopback_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_loopback_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_sse_Output_demo_struct_for_rust_call_dart_twin_sse(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_loopback_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_multi_times_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_multi_times_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));
let api_num_times = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_multi_times_twin_sse(api_callback, api_num_times).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_one_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_one_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_String_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_one_arg_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_return_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_return_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_String(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_return_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_simple_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_simple_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_simple_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_two_args_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_two_args_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_sse_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_two_args_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
let api_callback = decode_DartFn_Inputs_DartOpaque_Output_unit(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_with_dart_opaque_arg_twin_sse(api_input, api_callback).await)
                    })().await)
                } })
}
fn wire_rust_call_dart_with_dart_opaque_result_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_call_dart_with_dart_opaque_result_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_callback = decode_DartFn_Inputs__Output_DartOpaque(<flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer));deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_fn_twin_sse::rust_call_dart_with_dart_opaque_result_twin_sse(api_callback).await)
                    })().await)
                } })
}
fn wire_sync_accept_dart_opaque_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_accept_dart_opaque_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_sync_twin_sse::sync_accept_dart_opaque_twin_sse(api_opaque))
                })()) })
}
fn wire_sync_loopback_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_loopback_twin_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_sync_twin_sse::sync_loopback_twin_sse(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_sync_option_dart_opaque_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_option_dart_opaque_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::dart_opaque_sync_twin_sse::sync_option_dart_opaque_twin_sse(api_opaque)
                })()) })
}
fn wire_sync_option_loopback_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_option_loopback_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_sync_twin_sse::sync_option_loopback_twin_sse(api_opaque))
                })()) })
}
fn wire_unwrap_dart_opaque_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_dart_opaque_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_sync_twin_sse::unwrap_dart_opaque_twin_sse(api_opaque))
                })()) })
}
fn wire_async_accept_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::async_accept_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_clone_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "clone_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::clone_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_create_enum_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::create_enum_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_create_nested_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque1 = opaque1.cst_decode();let api_opaque2 = opaque2.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::create_nested_dart_opaque_twin_rust_async(api_opaque1, api_opaque2).await)
                    })().await)
                } })
}
fn wire_drop_static_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::drop_static_dart_opaque_twin_rust_async(api_id).await)
                    })().await)
                } })
}
fn wire_get_enum_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::get_enum_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_get_nested_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::get_nested_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_array_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_array_get_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_array_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_option_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_option_get_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_option_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_option_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_vec_get_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_get_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_vec_get_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_vec_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::loop_back_vec_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_panic_unwrap_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::panic_unwrap_dart_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_set_static_dart_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<i32>,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode();let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async::set_static_dart_opaque_twin_rust_async(api_id, api_opaque).await)
                    })().await)
                } })
}
fn wire_async_accept_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::async_accept_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_clone_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "clone_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::clone_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_create_enum_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::create_enum_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_create_nested_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque1 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
let api_opaque2 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::create_nested_dart_opaque_twin_rust_async_sse(api_opaque1, api_opaque2).await)
                    })().await)
                } })
}
fn wire_drop_static_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::drop_static_dart_opaque_twin_rust_async_sse(api_id).await)
                    })().await)
                } })
}
fn wire_get_enum_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::get_enum_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_get_nested_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::get_nested_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_array_get_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_get_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <[flutter_rust_bridge::DartOpaque; 1]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_array_get_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_array_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_array_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_option_get_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_option_get_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_option_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_option_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_vec_get_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_get_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Vec<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_vec_get_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_loop_back_vec_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::loop_back_vec_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_panic_unwrap_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::panic_unwrap_dart_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_set_static_dart_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);
let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::set_static_dart_opaque_twin_rust_async_sse(api_id, api_opaque).await)
                    })().await)
                } })
}
fn wire_async_accept_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::async_accept_dart_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_clone_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clone_dart_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::clone_dart_opaque_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_create_enum_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::create_enum_dart_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_create_nested_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque1 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
let api_opaque2 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::create_nested_dart_opaque_twin_sse(api_opaque1, api_opaque2))
                    })())
                } })
}
fn wire_drop_static_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::drop_static_dart_opaque_twin_sse(api_id))
                    })())
                } })
}
fn wire_get_enum_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::get_enum_dart_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_get_nested_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::get_nested_dart_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_loop_back_array_get_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_get_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <[flutter_rust_bridge::DartOpaque; 1]>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_array_get_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_loop_back_array_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_array_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_loop_back_option_get_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_option_get_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_loop_back_option_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_option_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_loop_back_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_loop_back_vec_get_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_get_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Vec<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_vec_get_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_loop_back_vec_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::dart_opaque_twin_sse::loop_back_vec_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_panic_unwrap_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::panic_unwrap_dart_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_set_static_dart_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);
let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sse::set_static_dart_opaque_twin_sse(api_id, api_opaque))
                    })())
                } })
}
fn wire_async_accept_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::async_accept_dart_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_clone_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "clone_dart_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::clone_dart_opaque_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_create_enum_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::create_enum_dart_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_create_nested_dart_opaque_twin_sync_impl(
    opaque1: impl CstDecode<flutter_rust_bridge::DartOpaque>,
    opaque2: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque1 = opaque1.cst_decode();let api_opaque2 = opaque2.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::create_nested_dart_opaque_twin_sync(api_opaque1, api_opaque2))
                })()) })
}
fn wire_drop_static_dart_opaque_twin_sync_impl(
    id: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_id = id.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::drop_static_dart_opaque_twin_sync(api_id))
                })()) })
}
fn wire_get_enum_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::get_enum_dart_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_get_nested_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::get_nested_dart_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_loop_back_array_get_twin_sync_impl(
    opaque: impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_get_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_array_get_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_array_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_array_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_option_get_twin_sync_impl(
    opaque: impl CstDecode<Option<flutter_rust_bridge::DartOpaque>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_option_get_twin_sync(api_opaque))
                })()) })
}
fn wire_loop_back_option_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_option_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_option_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_vec_get_twin_sync_impl(
    opaque: impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_get_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_vec_get_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_vec_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_vec_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync::loop_back_vec_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_panic_unwrap_dart_opaque_twin_sync_impl(
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::panic_unwrap_dart_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_set_static_dart_opaque_twin_sync_impl(
    id: impl CstDecode<i32>,
    opaque: impl CstDecode<flutter_rust_bridge::DartOpaque>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_id = id.cst_decode();let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync::set_static_dart_opaque_twin_sync(api_id, api_opaque))
                })()) })
}
fn wire_async_accept_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "async_accept_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::async_accept_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_clone_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "clone_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::clone_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_create_enum_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_enum_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::create_enum_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_create_nested_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque1 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
let api_opaque2 = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::create_nested_dart_opaque_twin_sync_sse(api_opaque1, api_opaque2))
                })()) })
}
fn wire_drop_static_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "drop_static_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::drop_static_dart_opaque_twin_sync_sse(api_id))
                })()) })
}
fn wire_get_enum_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_enum_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::get_enum_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_get_nested_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_nested_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::get_nested_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_array_get_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_get_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <[flutter_rust_bridge::DartOpaque; 1]>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_array_get_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_array_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_array_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_array_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_option_get_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_get_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_option_get_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_option_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_option_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_option_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "loop_back_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_twin_sync_sse(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_loop_back_vec_get_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_get_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Vec<flutter_rust_bridge::DartOpaque>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_vec_get_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_loop_back_vec_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "loop_back_vec_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::loop_back_vec_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_panic_unwrap_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_unwrap_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::panic_unwrap_dart_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_set_static_dart_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "set_static_dart_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_id = <i32>::sse_decode(&mut deserializer);
let api_opaque = <flutter_rust_bridge::DartOpaque>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::dart_opaque_twin_sync_sse::set_static_dart_opaque_twin_sync_sse(api_id, api_opaque))
                })()) })
}
fn wire_func_enum_simple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_simple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_simple_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_discriminant_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_discriminant_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_discriminant_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_mixed_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_mixed_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_struct_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_tuple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::func_enum_with_item_tuple_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_handle_enum_parameter_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekday: impl CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_weekday = weekday.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_enum_parameter_twin_rust_async(api_weekday).await)
                    })().await)
                } })
}
fn wire_handle_enum_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    val: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_val = val.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_enum_struct_twin_rust_async(api_val).await)
                    })().await)
                } })
}
fn wire_handle_return_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_return_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::handle_return_enum_twin_rust_async(api_input).await)
                    })().await)
                } })
}
fn wire_multiply_by_ten_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    measure: impl CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "multiply_by_ten_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_measure = measure.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::multiply_by_ten_twin_rust_async(api_measure).await)
                    })().await)
                } })
}
fn wire_print_note_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    note: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "print_note_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_note = note.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async::print_note_twin_rust_async(api_note).await)
                    })().await)
                } })
}
fn wire_func_enum_simple_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_simple_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::func_enum_simple_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_discriminant_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_discriminant_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::func_enum_with_discriminant_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_mixed_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::func_enum_with_item_mixed_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::func_enum_with_item_struct_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_enum_with_item_tuple_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::func_enum_with_item_tuple_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_handle_enum_parameter_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekday = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::handle_enum_parameter_twin_rust_async_sse(api_weekday).await)
                    })().await)
                } })
}
fn wire_handle_enum_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::handle_enum_struct_twin_rust_async_sse(api_val).await)
                    })().await)
                } })
}
fn wire_handle_return_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_return_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::handle_return_enum_twin_rust_async_sse(api_input).await)
                    })().await)
                } })
}
fn wire_multiply_by_ten_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "multiply_by_ten_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_measure = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::multiply_by_ten_twin_rust_async_sse(api_measure).await)
                    })().await)
                } })
}
fn wire_print_note_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "print_note_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_note = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_rust_async_sse::print_note_twin_rust_async_sse(api_note).await)
                    })().await)
                } })
}
fn wire_func_enum_simple_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_simple_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg =
                <crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::enumeration_twin_sse::func_enum_simple_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_with_discriminant_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_discriminant_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::func_enum_with_discriminant_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_enum_with_item_mixed_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::func_enum_with_item_mixed_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_enum_with_item_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::func_enum_with_item_struct_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_enum_with_item_tuple_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::func_enum_with_item_tuple_twin_sse(api_arg))
                    })())
                } })
}
fn wire_handle_enum_parameter_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekday = <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::handle_enum_parameter_twin_sse(api_weekday))
                    })())
                } })
}
fn wire_handle_enum_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::handle_enum_struct_twin_sse(api_val))
                    })())
                } })
}
fn wire_handle_return_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_return_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sse::handle_return_enum_twin_sse(api_input))
                    })())
                } })
}
fn wire_multiply_by_ten_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "multiply_by_ten_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_measure =
                <crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::enumeration_twin_sse::multiply_by_ten_twin_sse(
                            api_measure,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_print_note_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_note =
                <crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::enumeration_twin_sse::print_note_twin_sse(
                            api_note,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync::func_enum_simple_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_func_enum_with_discriminant_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_discriminant_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_discriminant_twin_sync(api_arg))
                })()) })
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_mixed_twin_sync(api_arg))
                })()) })
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_struct_twin_sync(api_arg))
                })()) })
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::func_enum_with_item_tuple_twin_sync(api_arg))
                })()) })
}
fn wire_handle_enum_parameter_twin_sync_impl(
    weekday: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_weekday = weekday.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync::handle_enum_parameter_twin_sync(api_weekday))
                })()) })
}
fn wire_handle_enum_struct_twin_sync_impl(
    val: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_enum_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_val = val.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync::handle_enum_struct_twin_sync(
                        api_val,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_return_enum_twin_sync_impl(
    input: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_return_enum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync::handle_return_enum_twin_sync(
                        api_input,
                    ),
                )
            })())
        },
    )
}
fn wire_multiply_by_ten_twin_sync_impl(
    measure: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "multiply_by_ten_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_measure = measure.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync::multiply_by_ten_twin_sync(
                        api_measure,
                    ),
                )
            })())
        },
    )
}
fn wire_print_note_twin_sync_impl(
    note: impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_note = note.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync::print_note_twin_sync(
                        api_note,
                    ),
                )
            })())
        },
    )
}
fn wire_func_enum_simple_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_simple_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::func_enum_simple_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_enum_with_discriminant_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_discriminant_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::func_enum_with_discriminant_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_enum_with_item_mixed_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_mixed_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::func_enum_with_item_mixed_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_enum_with_item_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::func_enum_with_item_struct_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_enum_with_item_tuple_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_enum_with_item_tuple_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::func_enum_with_item_tuple_twin_sync_sse(api_arg))
                })()) })
}
fn wire_handle_enum_parameter_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_parameter_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekday = <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::handle_enum_parameter_twin_sync_sse(api_weekday))
                })()) })
}
fn wire_handle_enum_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_enum_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_val = <crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::handle_enum_struct_twin_sync_sse(api_val))
                })()) })
}
fn wire_handle_return_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_return_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::handle_return_enum_twin_sync_sse(api_input))
                })()) })
}
fn wire_multiply_by_ten_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "multiply_by_ten_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_measure = <crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::enumeration_twin_sync_sse::multiply_by_ten_twin_sync_sse(api_measure))
                })()) })
}
fn wire_print_note_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "print_note_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_note =
                <crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::enumeration_twin_sync_sse::print_note_twin_sync_sse(
                        api_note,
                    ),
                )
            })())
        },
    )
}
fn wire_EventTwinRustAsync_as_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "EventTwinRustAsync_as_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync::as_string_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_close_event_listener_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "close_event_listener_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::close_event_listener_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_create_event_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    address: impl CstDecode<String>,
    payload: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_event_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_address = address.cst_decode();let api_payload = payload.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async::create_event_twin_rust_async(api_address, api_payload).await)
                    })().await)
                } })
}
fn wire_register_event_listener_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_event_listener_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::event_listener_twin_rust_async::register_event_listener_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>())).await
                    })().await)
                } })
}
fn wire_EventTwinRustAsyncSse_as_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "EventTwinRustAsyncSse_as_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse::as_string_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_close_event_listener_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "close_event_listener_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async_sse::close_event_listener_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_create_event_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_event_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
let api_payload = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_rust_async_sse::create_event_twin_rust_async_sse(api_address, api_payload).await)
                    })().await)
                } })
}
fn wire_register_event_listener_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_event_listener_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::event_listener_twin_rust_async_sse::register_event_listener_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse>())).await
                    })().await)
                } })
}
fn wire_EventTwinSse_as_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "EventTwinSse_as_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse::as_string_twin_sse(&api_that))
                    })())
                } })
}
fn wire_close_event_listener_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "close_event_listener_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::event_listener_twin_sse::close_event_listener_twin_sse())
                    })())
                } })
}
fn wire_create_event_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_event_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_address = <String>::sse_decode(&mut deserializer);
            let api_payload = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::event_listener_twin_sse::create_event_twin_sse(
                            api_address,
                            api_payload,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_register_event_listener_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_event_listener_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::event_listener_twin_sse::register_event_listener_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>()))
                    })())
                } })
}
fn wire_CustomStructTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    message: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_message = message.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::new_twin_rust_async(api_message).await)
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::nonstatic_return_custom_struct_error_twin_rust_async(&api_that).await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::nonstatic_return_custom_struct_ok_twin_rust_async(&api_that).await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::static_return_custom_struct_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync::static_return_custom_struct_ok_twin_rust_async().await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_value = value.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::new_twin_rust_async(api_value).await)
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::non_static_return_err_custom_error_twin_rust_async(&api_that).await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::non_static_return_ok_custom_error_twin_rust_async(&api_that).await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::static_return_err_custom_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync::static_return_ok_custom_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_custom_enum_error_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_panic_twin_rust_async().await
                    })().await)
                } })
}
fn wire_custom_enum_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_return_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_custom_enum_error_return_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::custom_enum_error_return_ok_twin_rust_async(api_arg).await
                    })().await)
                } })
}
fn wire_custom_nested_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::custom_nested_error_return_error_twin_rust_async(api_arg).await
                    })().await)
                } })
}
fn wire_custom_struct_error_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::custom_struct_error_return_error_twin_rust_async(api_arg).await
                    })().await)
                } })
}
fn wire_func_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::func_return_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_func_type_fallible_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_fallible_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::func_type_fallible_panic_twin_rust_async().await
                    })().await)
                } })
}
fn wire_func_type_infallible_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async::func_type_infallible_panic_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_panic_with_custom_result_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_with_custom_result_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::panic_with_custom_result_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_1_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_1_variant1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_1_variant1_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_custom_nested_error_2_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_custom_struct_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_custom_struct_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_custom_struct_ok_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_ok_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_custom_struct_ok_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_err_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_err_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_err_custom_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_return_error_variant_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    variant: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_error_variant_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_variant = variant.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_error_variant_twin_rust_async(api_variant).await
                    })().await)
                } })
}
fn wire_return_ok_custom_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_ok_custom_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::return_ok_custom_error_twin_rust_async().await
                    })().await)
                } })
}
fn wire_stream_sink_throw_anyhow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::stream_sink_throw_anyhow_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_throw_anyhow_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "throw_anyhow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async::throw_anyhow_twin_rust_async().await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsyncSse_new_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_message = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse::new_twin_rust_async_sse(api_message).await)
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse::nonstatic_return_custom_struct_error_twin_rust_async_sse(&api_that).await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsyncSse_nonstatic_return_custom_struct_ok_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse::nonstatic_return_custom_struct_ok_twin_rust_async_sse(&api_that).await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsyncSse_static_return_custom_struct_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse::static_return_custom_struct_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinRustAsyncSse_static_return_custom_struct_ok_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse::static_return_custom_struct_ok_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsyncSse_new_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsyncSse_new_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse::new_twin_rust_async_sse(api_value).await)
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsyncSse_non_static_return_err_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse::non_static_return_err_custom_error_twin_rust_async_sse(&api_that).await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsyncSse_non_static_return_ok_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse::non_static_return_ok_custom_error_twin_rust_async_sse(&api_that).await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsyncSse_static_return_err_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse::static_return_err_custom_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinRustAsyncSse_static_return_ok_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse::static_return_ok_custom_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_custom_enum_error_panic_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_panic_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::custom_enum_error_panic_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_custom_enum_error_return_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::custom_enum_error_return_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_custom_enum_error_return_ok_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::custom_enum_error_return_ok_twin_rust_async_sse(api_arg).await
                    })().await)
                } })
}
fn wire_custom_nested_error_return_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::custom_nested_error_return_error_twin_rust_async_sse(api_arg).await
                    })().await)
                } })
}
fn wire_custom_struct_error_return_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::custom_struct_error_return_error_twin_rust_async_sse(api_arg).await
                    })().await)
                } })
}
fn wire_func_return_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::func_return_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_func_type_fallible_panic_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_fallible_panic_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::func_type_fallible_panic_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_func_type_infallible_panic_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_rust_async_sse::func_type_infallible_panic_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_panic_with_custom_result_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_with_custom_result_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::panic_with_custom_result_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_1_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_custom_nested_error_1_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_1_variant1_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_custom_nested_error_1_variant1_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_custom_nested_error_2_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_custom_nested_error_2_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_custom_struct_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_custom_struct_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_custom_struct_ok_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_ok_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_custom_struct_ok_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_err_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_err_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_err_custom_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_return_error_variant_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_error_variant_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_variant = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_error_variant_twin_rust_async_sse(api_variant).await
                    })().await)
                } })
}
fn wire_return_ok_custom_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_ok_custom_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::return_ok_custom_error_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_stream_sink_throw_anyhow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::stream_sink_throw_anyhow_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_throw_anyhow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "throw_anyhow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::exception_twin_rust_async_sse::throw_anyhow_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_CustomStructTwinSse_new_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSse_new_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_message = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse::new_twin_sse(api_message))
                    })())
                } })
}
fn wire_CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSse_nonstatic_return_custom_struct_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse::nonstatic_return_custom_struct_error_twin_sse(&api_that)
                    })())
                } })
}
fn wire_CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSse_nonstatic_return_custom_struct_ok_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse::nonstatic_return_custom_struct_ok_twin_sse(&api_that)
                    })())
                } })
}
fn wire_CustomStructTwinSse_static_return_custom_struct_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSse_static_return_custom_struct_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse::static_return_custom_struct_error_twin_sse()
                    })())
                } })
}
fn wire_CustomStructTwinSse_static_return_custom_struct_ok_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSse_static_return_custom_struct_ok_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse::static_return_custom_struct_ok_twin_sse()
                    })())
                } })
}
fn wire_SomeStructTwinSse_new_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSse_new_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse::new_twin_sse(api_value))
                    })())
                } })
}
fn wire_SomeStructTwinSse_non_static_return_err_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSse_non_static_return_err_custom_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse::non_static_return_err_custom_error_twin_sse(&api_that)
                    })())
                } })
}
fn wire_SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSse_non_static_return_ok_custom_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse::non_static_return_ok_custom_error_twin_sse(&api_that)
                    })())
                } })
}
fn wire_SomeStructTwinSse_static_return_err_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSse_static_return_err_custom_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse::static_return_err_custom_error_twin_sse()
                    })())
                } })
}
fn wire_SomeStructTwinSse_static_return_ok_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSse_static_return_ok_custom_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse::static_return_ok_custom_error_twin_sse()
                    })())
                } })
}
fn wire_custom_enum_error_panic_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_panic_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::custom_enum_error_panic_twin_sse(
                    )
                })())
            }
        },
    )
}
fn wire_custom_enum_error_return_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::custom_enum_error_return_error_twin_sse()
                    })())
                } })
}
fn wire_custom_enum_error_return_ok_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::custom_enum_error_return_ok_twin_sse(api_arg)
                    })())
                } })
}
fn wire_custom_nested_error_return_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::custom_nested_error_return_error_twin_sse(api_arg)
                    })())
                } })
}
fn wire_custom_struct_error_return_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::custom_struct_error_return_error_twin_sse(api_arg)
                    })())
                } })
}
fn wire_func_return_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::func_return_error_twin_sse()
                })())
            }
        },
    )
}
fn wire_func_type_fallible_panic_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_fallible_panic_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::func_type_fallible_panic_twin_sse()
                    })())
                } })
}
fn wire_func_type_infallible_panic_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sse::func_type_infallible_panic_twin_sse())
                    })())
                } })
}
fn wire_panic_with_custom_result_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_with_custom_result_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::panic_with_custom_result_twin_sse()
                    })())
                } })
}
fn wire_return_custom_nested_error_1_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::return_custom_nested_error_1_twin_sse()
                    })())
                } })
}
fn wire_return_custom_nested_error_1_variant1_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::return_custom_nested_error_1_variant1_twin_sse()
                    })())
                } })
}
fn wire_return_custom_nested_error_2_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::return_custom_nested_error_2_twin_sse()
                    })())
                } })
}
fn wire_return_custom_struct_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::return_custom_struct_error_twin_sse()
                    })())
                } })
}
fn wire_return_custom_struct_ok_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_ok_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::return_custom_struct_ok_twin_sse(
                    )
                })())
            }
        },
    )
}
fn wire_return_err_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_err_custom_error_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::return_err_custom_error_twin_sse(
                    )
                })())
            }
        },
    )
}
fn wire_return_error_variant_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_error_variant_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_variant = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::return_error_variant_twin_sse(
                        api_variant,
                    )
                })())
            }
        },
    )
}
fn wire_return_ok_custom_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_ok_custom_error_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::return_ok_custom_error_twin_sse()
                })())
            }
        },
    )
}
fn wire_stream_sink_throw_anyhow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sse::stream_sink_throw_anyhow_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>()))
                    })())
                } })
}
fn wire_throw_anyhow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::exception_twin_sse::throw_anyhow_twin_sse()
                })())
            }
        },
    )
}
fn wire_CustomStructTwinSync_new_twin_sync_impl(
    message: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_new_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_message = message.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::new_twin_sync(api_message))
                })()) })
}
fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::nonstatic_return_custom_struct_error_twin_sync(&api_that)
                })()) })
}
fn wire_CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::nonstatic_return_custom_struct_ok_twin_sync(&api_that)
                })()) })
}
fn wire_CustomStructTwinSync_static_return_custom_struct_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_static_return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::static_return_custom_struct_error_twin_sync()
                })()) })
}
fn wire_CustomStructTwinSync_static_return_custom_struct_ok_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSync_static_return_custom_struct_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync::static_return_custom_struct_ok_twin_sync()
                })()) })
}
fn wire_SomeStructTwinSync_new_twin_sync_impl(
    value: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_new_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_value = value.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::new_twin_sync(api_value))
                })()) })
}
fn wire_SomeStructTwinSync_non_static_return_err_custom_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_non_static_return_err_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::non_static_return_err_custom_error_twin_sync(&api_that)
                })()) })
}
fn wire_SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::non_static_return_ok_custom_error_twin_sync(&api_that)
                })()) })
}
fn wire_SomeStructTwinSync_static_return_err_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_static_return_err_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::static_return_err_custom_error_twin_sync()
                })()) })
}
fn wire_SomeStructTwinSync_static_return_ok_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSync_static_return_ok_custom_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync::static_return_ok_custom_error_twin_sync()
                })()) })
}
fn wire_custom_enum_error_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "custom_enum_error_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_panic_twin_sync()
            })())
        },
    )
}
fn wire_custom_enum_error_return_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_error_twin_sync()
                })()) })
}
fn wire_custom_enum_error_return_ok_twin_sync_impl(
    arg: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::custom_enum_error_return_ok_twin_sync(api_arg)
                })()) })
}
fn wire_custom_nested_error_return_error_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::custom_nested_error_return_error_twin_sync(api_arg)
                })()) })
}
fn wire_custom_struct_error_return_error_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::custom_struct_error_return_error_twin_sync(api_arg)
                })()) })
}
fn wire_func_return_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::func_return_error_twin_sync()
            })())
        },
    )
}
fn wire_func_type_fallible_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_type_fallible_panic_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::func_type_fallible_panic_twin_sync()
            })())
        },
    )
}
fn wire_func_type_infallible_panic_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync::func_type_infallible_panic_twin_sync())
                })()) })
}
fn wire_panic_with_custom_result_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "panic_with_custom_result_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::panic_with_custom_result_twin_sync()
            })())
        },
    )
}
fn wire_return_custom_nested_error_1_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_1_twin_sync()
                })()) })
}
fn wire_return_custom_nested_error_1_variant1_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_1_variant1_twin_sync()
                })()) })
}
fn wire_return_custom_nested_error_2_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::return_custom_nested_error_2_twin_sync()
                })()) })
}
fn wire_return_custom_struct_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::exception_twin_sync::return_custom_struct_error_twin_sync()
                })()) })
}
fn wire_return_custom_struct_ok_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_custom_struct_ok_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::return_custom_struct_ok_twin_sync()
            })())
        },
    )
}
fn wire_return_err_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_err_custom_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::return_err_custom_error_twin_sync()
            })())
        },
    )
}
fn wire_return_error_variant_twin_sync_impl(
    variant: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_error_variant_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_variant = variant.cst_decode();
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::return_error_variant_twin_sync(
                    api_variant,
                )
            })())
        },
    )
}
fn wire_return_ok_custom_error_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "return_ok_custom_error_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::return_ok_custom_error_twin_sync()
            })())
        },
    )
}
fn wire_stream_sink_throw_anyhow_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::pseudo_manual::exception_twin_sync::stream_sink_throw_anyhow_twin_sync(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>()))
                    })())
                } })
}
fn wire_throw_anyhow_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::exception_twin_sync::throw_anyhow_twin_sync()
            })())
        },
    )
}
fn wire_CustomStructTwinSyncSse_new_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSyncSse_new_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_message = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse::new_twin_sync_sse(api_message))
                })()) })
}
fn wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSyncSse_nonstatic_return_custom_struct_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse::nonstatic_return_custom_struct_error_twin_sync_sse(&api_that)
                })()) })
}
fn wire_CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSyncSse_nonstatic_return_custom_struct_ok_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse::nonstatic_return_custom_struct_ok_twin_sync_sse(&api_that)
                })()) })
}
fn wire_CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSyncSse_static_return_custom_struct_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse::static_return_custom_struct_error_twin_sync_sse()
                })()) })
}
fn wire_CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "CustomStructTwinSyncSse_static_return_custom_struct_ok_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse::static_return_custom_struct_ok_twin_sync_sse()
                })()) })
}
fn wire_SomeStructTwinSyncSse_new_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSyncSse_new_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse::new_twin_sync_sse(api_value))
                })()) })
}
fn wire_SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSyncSse_non_static_return_err_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse::non_static_return_err_custom_error_twin_sync_sse(&api_that)
                })()) })
}
fn wire_SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSyncSse_non_static_return_ok_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse::non_static_return_ok_custom_error_twin_sync_sse(&api_that)
                })()) })
}
fn wire_SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSyncSse_static_return_err_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse::static_return_err_custom_error_twin_sync_sse()
                })()) })
}
fn wire_SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SomeStructTwinSyncSse_static_return_ok_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse::static_return_ok_custom_error_twin_sync_sse()
                })()) })
}
fn wire_custom_enum_error_panic_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_panic_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::custom_enum_error_panic_twin_sync_sse()
                })()) })
}
fn wire_custom_enum_error_return_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::custom_enum_error_return_error_twin_sync_sse()
                })()) })
}
fn wire_custom_enum_error_return_ok_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_enum_error_return_ok_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::custom_enum_error_return_ok_twin_sync_sse(api_arg)
                })()) })
}
fn wire_custom_nested_error_return_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_nested_error_return_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::custom_nested_error_return_error_twin_sync_sse(api_arg)
                })()) })
}
fn wire_custom_struct_error_return_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "custom_struct_error_return_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::custom_struct_error_return_error_twin_sync_sse(api_arg)
                })()) })
}
fn wire_func_return_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_error_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::pseudo_manual::exception_twin_sync_sse::func_return_error_twin_sync_sse(
                )
            })())
        },
    )
}
fn wire_func_type_fallible_panic_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_fallible_panic_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::func_type_fallible_panic_twin_sync_sse()
                })()) })
}
fn wire_func_type_infallible_panic_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_type_infallible_panic_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::exception_twin_sync_sse::func_type_infallible_panic_twin_sync_sse())
                })()) })
}
fn wire_panic_with_custom_result_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "panic_with_custom_result_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::panic_with_custom_result_twin_sync_sse()
                })()) })
}
fn wire_return_custom_nested_error_1_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_custom_nested_error_1_twin_sync_sse()
                })()) })
}
fn wire_return_custom_nested_error_1_variant1_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_1_variant1_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_custom_nested_error_1_variant1_twin_sync_sse()
                })()) })
}
fn wire_return_custom_nested_error_2_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_nested_error_2_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_custom_nested_error_2_twin_sync_sse()
                })()) })
}
fn wire_return_custom_struct_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_custom_struct_error_twin_sync_sse()
                })()) })
}
fn wire_return_custom_struct_ok_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_custom_struct_ok_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_custom_struct_ok_twin_sync_sse()
                })()) })
}
fn wire_return_err_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_err_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_err_custom_error_twin_sync_sse()
                })()) })
}
fn wire_return_error_variant_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_error_variant_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_variant = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_error_variant_twin_sync_sse(api_variant)
                })()) })
}
fn wire_return_ok_custom_error_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "return_ok_custom_error_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::exception_twin_sync_sse::return_ok_custom_error_twin_sync_sse()
                })()) })
}
fn wire_stream_sink_throw_anyhow_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "stream_sink_throw_anyhow_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::exception_twin_sync_sse::stream_sink_throw_anyhow_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>()))
                    })())
                } })
}
fn wire_throw_anyhow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "throw_anyhow_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                crate::api::pseudo_manual::exception_twin_sync_sse::throw_anyhow_twin_sync_sse()
            })())
        },
    )
}
fn wire_call_new_module_system_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::call_new_module_system_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_call_old_module_system_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::call_old_module_system_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_use_imported_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_enum = my_enum.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::use_imported_enum_twin_rust_async(api_my_enum).await)
                    })().await)
                } })
}
fn wire_use_imported_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_struct = my_struct.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async::use_imported_struct_twin_rust_async(api_my_struct).await)
                    })().await)
                } })
}
fn wire_call_new_module_system_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async_sse::call_new_module_system_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_call_old_module_system_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async_sse::call_old_module_system_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_use_imported_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_enum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async_sse::use_imported_enum_twin_rust_async_sse(api_my_enum).await)
                    })().await)
                } })
}
fn wire_use_imported_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_struct = <crate::auxiliary::sample_types::MyStruct>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_rust_async_sse::use_imported_struct_twin_rust_async_sse(api_my_struct).await)
                    })().await)
                } })
}
fn wire_call_new_module_system_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sse::call_new_module_system_twin_sse())
                    })())
                } })
}
fn wire_call_old_module_system_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sse::call_old_module_system_twin_sse())
                    })())
                } })
}
fn wire_use_imported_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_enum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sse::use_imported_enum_twin_sse(api_my_enum))
                    })())
                } })
}
fn wire_use_imported_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_struct = <crate::auxiliary::sample_types::MyStruct>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sse::use_imported_struct_twin_sse(api_my_struct))
                    })())
                } })
}
fn wire_call_new_module_system_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::call_new_module_system_twin_sync())
                })()) })
}
fn wire_call_old_module_system_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::call_old_module_system_twin_sync())
                })()) })
}
fn wire_use_imported_enum_twin_sync_impl(
    my_enum: impl CstDecode<crate::auxiliary::sample_types::MyEnum>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_enum = my_enum.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::use_imported_enum_twin_sync(api_my_enum))
                })()) })
}
fn wire_use_imported_struct_twin_sync_impl(
    my_struct: impl CstDecode<crate::auxiliary::sample_types::MyStruct>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_struct = my_struct.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync::use_imported_struct_twin_sync(api_my_struct))
                })()) })
}
fn wire_call_new_module_system_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_new_module_system_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync_sse::call_new_module_system_twin_sync_sse())
                })()) })
}
fn wire_call_old_module_system_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "call_old_module_system_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync_sse::call_old_module_system_twin_sync_sse())
                })()) })
}
fn wire_use_imported_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_enum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync_sse::use_imported_enum_twin_sync_sse(api_my_enum))
                })()) })
}
fn wire_use_imported_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "use_imported_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_struct = <crate::auxiliary::sample_types::MyStruct>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::external_type_in_crate_twin_sync_sse::use_imported_struct_twin_sync_sse(api_my_struct))
                })()) })
}
fn wire_func_hash_map_i32_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_i32_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_i32_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_bytes_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, Vec<u8>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_bytes_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_string_bytes_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_complex_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_complex_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_string_complex_enum_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_simple_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_simple_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_string_simple_enum_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_string_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_map_string_struct_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_set_i32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashSet<i32>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_i32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_set_i32_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_set_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<std::collections::HashSet<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async::func_hash_set_string_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_i32_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_i32_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_i32_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_bytes_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_bytes_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_string_bytes_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_complex_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_complex_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_string_complex_enum_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_simple_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_simple_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_string_simple_enum_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_string_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_string_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_map_string_struct_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_set_i32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_i32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_set_i32_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_set_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_rust_async_sse::func_hash_set_string_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_hash_map_i32_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_i32_i32_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_i32_i32_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_string_bytes_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_bytes_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_string_bytes_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_string_complex_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_complex_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_string_complex_enum_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_string_simple_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_simple_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_string_simple_enum_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_string_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_string_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_string_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_map_string_struct_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_set_i32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_set_i32_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<i32>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_set_i32_twin_sse(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_hash_set_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_string_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sse::func_hash_set_string_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_hash_map_i32_i32_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<i32, i32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_i32_i32_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_i32_i32_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_string_bytes_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<String, Vec<u8>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_bytes_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_string_bytes_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_string_complex_enum_twin_sync_impl(
    arg: impl CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_complex_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_string_complex_enum_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_string_simple_enum_twin_sync_impl(
    arg: impl CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_simple_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_string_simple_enum_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_string_string_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<String, String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_string_string_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_string_struct_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_map_string_struct_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_set_i32_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashSet<i32>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_hash_set_i32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_set_i32_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_func_hash_set_string_twin_sync_impl(
    arg: impl CstDecode<std::collections::HashSet<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_string_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync::func_hash_set_string_twin_sync(api_arg))
                })()) })
}
fn wire_func_hash_map_i32_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_i32_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<i32, i32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_i32_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_map_string_bytes_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_bytes_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, Vec<u8>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_string_bytes_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_map_string_complex_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_complex_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_string_complex_enum_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_map_string_simple_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_simple_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_string_simple_enum_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_map_string_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_string_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_map_string_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_map_string_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_map_string_struct_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_set_i32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_i32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<i32>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_set_i32_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_hash_set_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_hash_set_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <std::collections::HashSet<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::map_and_set_twin_sync_sse::func_hash_set_string_twin_sync_sse(api_arg))
                })()) })
}
fn wire_ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::concatenate_static_twin_rust_async(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_concatenate_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    >,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_concatenate_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::concatenate_twin_rust_async(&api_that, api_b).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_static_stream_sink_single_arg_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_static_stream_sink_twin_rust_async(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_stream_sink_at_1_twin_rust_async(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    >,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::handle_some_stream_sink_twin_rust_async(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::new_twin_rust_async(api_a).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsync_simple_getter_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsync_simple_getter_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync::simple_getter_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_SumWithTwinRustAsync_sum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>,
    y: impl CstDecode<u32>,
    z: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SumWithTwinRustAsync_sum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode();let api_y = y.cst_decode();let api_z = z.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync::sum_twin_rust_async(&api_that, api_y, api_z).await)
                    })().await)
                } })
}
fn wire_get_sum_array_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32>,
    b: impl CstDecode<u32>,
    c: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();let api_c = c.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::get_sum_array_twin_rust_async(api_a, api_b, api_c).await)
                    })().await)
                } })
}
fn wire_get_sum_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async::get_sum_struct_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_concatenate_static_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::concatenate_static_twin_rust_async_sse(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_concatenate_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::concatenate_twin_rust_async_sse(&api_that, api_b).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_single_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::handle_some_static_stream_sink_single_arg_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_handle_some_static_stream_sink_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::handle_some_static_stream_sink_twin_rust_async_sse(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_at_1_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::handle_some_stream_sink_at_1_twin_rust_async_sse(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_handle_some_stream_sink_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::handle_some_stream_sink_twin_rust_async_sse(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse>())).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_new_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::new_twin_rust_async_sse(api_a).await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinRustAsyncSse_simple_getter_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinRustAsyncSse_simple_getter_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse::simple_getter_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_SumWithTwinRustAsyncSse_sum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SumWithTwinRustAsyncSse_sum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_y = <u32>::sse_decode(&mut deserializer);
let api_z = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse::sum_twin_rust_async_sse(&api_that, api_y, api_z).await)
                    })().await)
                } })
}
fn wire_get_sum_array_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_array_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <u32>::sse_decode(&mut deserializer);
let api_b = <u32>::sse_decode(&mut deserializer);
let api_c = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::get_sum_array_twin_rust_async_sse(api_a, api_b, api_c).await)
                    })().await)
                } })
}
fn wire_get_sum_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_sum_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_rust_async_sse::get_sum_struct_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_ConcatenateWithTwinSse_concatenate_static_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_concatenate_static_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::concatenate_static_twin_sse(api_a, api_b))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_concatenate_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_concatenate_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::concatenate_twin_sse(&api_that, api_b))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_handle_some_static_stream_sink_single_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::handle_some_static_stream_sink_single_arg_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_handle_some_static_stream_sink_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::handle_some_static_stream_sink_twin_sse(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sse::Log2TwinSse>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_handle_some_stream_sink_at_1_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::handle_some_stream_sink_at_1_twin_sse(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_handle_some_stream_sink_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>::sse_decode(&mut deserializer);
let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::handle_some_stream_sink_twin_sse(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sse::Log2TwinSse>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_new_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_new_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::new_twin_sse(api_a))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSse_simple_getter_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSse_simple_getter_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse::simple_getter_twin_sse(&api_that))
                    })())
                } })
}
fn wire_SumWithTwinSse_sum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SumWithTwinSse_sum_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>::sse_decode(
                &mut deserializer,
            );
            let api_y = <u32>::sse_decode(&mut deserializer);
            let api_z = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse::sum_twin_sse(
                            &api_that, api_y, api_z,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_get_sum_array_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <u32>::sse_decode(&mut deserializer);
            let api_b = <u32>::sse_decode(&mut deserializer);
            let api_c = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::method_twin_sse::get_sum_array_twin_sse(
                            api_a, api_b, api_c,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_get_sum_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::method_twin_sse::get_sum_struct_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_ConcatenateWithTwinSync_concatenate_static_twin_sync_impl(
    a: impl CstDecode<String>,
    b: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_concatenate_static_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::concatenate_static_twin_sync(api_a, api_b))
                })()) })
}
fn wire_ConcatenateWithTwinSync_concatenate_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>,
    b: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_concatenate_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::concatenate_twin_sync(&api_that, api_b))
                })()) })
}
fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_static_stream_sink_single_arg_twin_sync(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_static_stream_sink_twin_sync(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_stream_sink_at_1_twin_sync(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_that = that.cst_decode();let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::handle_some_stream_sink_twin_sync(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSync_new_twin_sync_impl(
    a: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_new_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::new_twin_sync(api_a))
                })()) })
}
fn wire_ConcatenateWithTwinSync_simple_getter_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSync_simple_getter_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync::simple_getter_twin_sync(&api_that))
                })()) })
}
fn wire_SumWithTwinSync_sum_twin_sync_impl(
    that: impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>,
    y: impl CstDecode<u32>,
    z: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "SumWithTwinSync_sum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_y = y.cst_decode();
            let api_z = z.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync::sum_twin_sync(
                        &api_that, api_y, api_z,
                    ),
                )
            })())
        },
    )
}
fn wire_get_sum_array_twin_sync_impl(
    a: impl CstDecode<u32>,
    b: impl CstDecode<u32>,
    c: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            let api_c = c.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::method_twin_sync::get_sum_array_twin_sync(
                        api_a, api_b, api_c,
                    ),
                )
            })())
        },
    )
}
fn wire_get_sum_struct_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::method_twin_sync::get_sum_struct_twin_sync(),
                )
            })())
        },
    )
}
fn wire_ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_concatenate_static_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::concatenate_static_twin_sync_sse(api_a, api_b))
                })()) })
}
fn wire_ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_concatenate_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::concatenate_twin_sync_sse(&api_that, api_b))
                })()) })
}
fn wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_single_arg_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::handle_some_static_stream_sink_single_arg_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_handle_some_static_stream_sink_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::handle_some_static_stream_sink_twin_sync_sse(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_handle_some_stream_sink_at_1_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::handle_some_stream_sink_at_1_twin_sync_sse(&api_that, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_handle_some_stream_sink_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>::sse_decode(&mut deserializer);
let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::handle_some_stream_sink_twin_sync_sse(&api_that, api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse>())))
                    })())
                } })
}
fn wire_ConcatenateWithTwinSyncSse_new_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_new_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::new_twin_sync_sse(api_a))
                })()) })
}
fn wire_ConcatenateWithTwinSyncSse_simple_getter_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "ConcatenateWithTwinSyncSse_simple_getter_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse::simple_getter_twin_sync_sse(&api_that))
                })()) })
}
fn wire_SumWithTwinSyncSse_sum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "SumWithTwinSyncSse_sum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>::sse_decode(&mut deserializer);
let api_y = <u32>::sse_decode(&mut deserializer);
let api_z = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse::sum_twin_sync_sse(&api_that, api_y, api_z))
                })()) })
}
fn wire_get_sum_array_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_array_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <u32>::sse_decode(&mut deserializer);
            let api_b = <u32>::sse_decode(&mut deserializer);
            let api_c = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::method_twin_sync_sse::get_sum_array_twin_sync_sse(
                        api_a, api_b, api_c,
                    ),
                )
            })())
        },
    )
}
fn wire_get_sum_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_sum_struct_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::method_twin_sync_sse::get_sum_struct_twin_sync_sse(),
                )
            })())
        },
    )
}
fn wire_app_settings_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::app_settings_stream_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,mirror_ApplicationSettings>())).await)
                    })().await)
                } })
}
fn wire_app_settings_vec_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::app_settings_vec_stream_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>())).await)
                    })().await)
                } })
}
fn wire_first_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_number_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_nums = nums.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::first_number_twin_rust_async(api_nums).await)
                    })().await)
                } })
}
fn wire_first_sequence_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_sequence_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_seqs = seqs.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::first_sequence_twin_rust_async(api_seqs).await)
                    })().await)
                } })
}
fn wire_get_app_settings_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_app_settings_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::get_app_settings_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_get_fallible_app_settings_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_fallible_app_settings_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::mirror_twin_rust_async::get_fallible_app_settings_twin_rust_async().await
                    })().await)
                } })
}
fn wire_get_message_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_message_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::get_message_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_is_app_embedded_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "is_app_embedded_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_app_settings = app_settings.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::is_app_embedded_twin_rust_async(api_app_settings).await)
                    })().await)
                } })
}
fn wire_mirror_struct_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::mirror_struct_stream_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync>())).await)
                    })().await)
                } })
}
fn wire_mirror_tuple_stream_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::mirror_tuple_stream_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>())).await)
                    })().await)
                } })
}
fn wire_repeat_number_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    num: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_number_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_num = num.cst_decode();let api_times = times.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::repeat_number_twin_rust_async(api_num, api_times).await)
                    })().await)
                } })
}
fn wire_repeat_sequence_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    seq: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_sequence_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_seq = seq.cst_decode();let api_times = times.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::repeat_sequence_twin_rust_async(api_seq, api_times).await)
                    })().await)
                } })
}
fn wire_test_contains_mirrored_sub_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_contains_mirrored_sub_struct_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::mirror_twin_rust_async::test_fallible_of_raw_string_mirrored_twin_rust_async().await
                    })().await)
                } })
}
fn wire_test_list_of_nested_enums_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_list_of_nested_enums_mirrored_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_list_of_raw_nested_string_mirrored_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_nested_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_nested_raw_string_mirrored_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_raw_string_enum_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    nested: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_nested = nested.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_raw_string_enum_mirrored_twin_rust_async(api_nested).await)
                    })().await)
                } })
}
fn wire_test_raw_string_mirrored_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_mirrored_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async::test_raw_string_mirrored_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_app_settings_stream_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_stream_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::app_settings_stream_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,mirror_ApplicationSettings>())).await)
                    })().await)
                } })
}
fn wire_app_settings_vec_stream_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::app_settings_vec_stream_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>())).await)
                    })().await)
                } })
}
fn wire_first_number_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_number_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nums = <crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::first_number_twin_rust_async_sse(api_nums).await)
                    })().await)
                } })
}
fn wire_first_sequence_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "first_sequence_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seqs = <crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::first_sequence_twin_rust_async_sse(api_seqs).await)
                    })().await)
                } })
}
fn wire_get_app_settings_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_app_settings_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::get_app_settings_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_get_fallible_app_settings_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_fallible_app_settings_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::mirror_twin_rust_async_sse::get_fallible_app_settings_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_get_message_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_message_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::get_message_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_is_app_embedded_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "is_app_embedded_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_app_settings = <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::is_app_embedded_twin_rust_async_sse(api_app_settings).await)
                    })().await)
                } })
}
fn wire_mirror_struct_stream_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::mirror_struct_stream_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse>())).await)
                    })().await)
                } })
}
fn wire_mirror_tuple_stream_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::mirror_tuple_stream_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>())).await)
                    })().await)
                } })
}
fn wire_repeat_number_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_number_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_num = <i32>::sse_decode(&mut deserializer);
let api_times = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::repeat_number_twin_rust_async_sse(api_num, api_times).await)
                    })().await)
                } })
}
fn wire_repeat_sequence_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "repeat_sequence_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seq = <i32>::sse_decode(&mut deserializer);
let api_times = <usize>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::repeat_sequence_twin_rust_async_sse(api_seq, api_times).await)
                    })().await)
                } })
}
fn wire_test_contains_mirrored_sub_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_contains_mirrored_sub_struct_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_fallible_of_raw_string_mirrored_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_test_list_of_nested_enums_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_list_of_nested_enums_mirrored_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_list_of_raw_nested_string_mirrored_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_nested_raw_string_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_nested_raw_string_mirrored_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_raw_string_enum_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nested = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_raw_string_enum_mirrored_twin_rust_async_sse(api_nested).await)
                    })().await)
                } })
}
fn wire_test_raw_string_mirrored_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_mirrored_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_rust_async_sse::test_raw_string_mirrored_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_app_settings_stream_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_stream_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::app_settings_stream_twin_sse(
                            StreamSink::new(
                                context
                                    .rust2dart_context()
                                    .stream_sink::<_, mirror_ApplicationSettings>(),
                            ),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_app_settings_vec_stream_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::app_settings_vec_stream_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>())))
                    })())
                } })
}
fn wire_first_number_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nums = <crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::first_number_twin_sse(api_nums),
                    )
                })())
            }
        },
    )
}
fn wire_first_sequence_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seqs = <crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::first_sequence_twin_sse(
                            api_seqs,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_get_app_settings_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::get_app_settings_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_get_fallible_app_settings_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_fallible_app_settings_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::mirror_twin_sse::get_fallible_app_settings_twin_sse()
                })())
            }
        },
    )
}
fn wire_get_message_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::get_message_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_is_app_embedded_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_app_settings =
                <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::is_app_embedded_twin_sse(
                            api_app_settings,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_mirror_struct_stream_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::mirror_struct_stream_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse>())))
                    })())
                } })
}
fn wire_mirror_tuple_stream_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mirror_tuple_stream_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::mirror_tuple_stream_twin_sse(
                            StreamSink::new(context.rust2dart_context().stream_sink::<_, (
                                mirror_ApplicationSettings,
                                mirror_RawStringEnumMirrored,
                            )>(
                            )),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_repeat_number_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_num = <i32>::sse_decode(&mut deserializer);
            let api_times = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::repeat_number_twin_sse(
                            api_num, api_times,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_repeat_sequence_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seq = <i32>::sse_decode(&mut deserializer);
            let api_times = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sse::repeat_sequence_twin_sse(
                            api_seq, api_times,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_contains_mirrored_sub_struct_twin_sse())
                    })())
                } })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::mirror_twin_sse::test_fallible_of_raw_string_mirrored_twin_sse()
                    })())
                } })
}
fn wire_test_list_of_nested_enums_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_list_of_nested_enums_mirrored_twin_sse())
                    })())
                } })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_list_of_raw_nested_string_mirrored_twin_sse())
                    })())
                } })
}
fn wire_test_nested_raw_string_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_nested_raw_string_mirrored_twin_sse())
                    })())
                } })
}
fn wire_test_raw_string_enum_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nested = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_raw_string_enum_mirrored_twin_sse(api_nested))
                    })())
                } })
}
fn wire_test_raw_string_mirrored_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_mirrored_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sse::test_raw_string_mirrored_twin_sse())
                    })())
                } })
}
fn wire_app_settings_stream_twin_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "app_settings_stream_twin_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sync::app_settings_stream_twin_sync(
                            StreamSink::new(
                                context
                                    .rust2dart_context()
                                    .stream_sink::<_, mirror_ApplicationSettings>(),
                            ),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_app_settings_vec_stream_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::app_settings_vec_stream_twin_sync(StreamSink::new(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>())))
                    })())
                } })
}
fn wire_first_number_twin_sync_impl(
    nums: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_nums = nums.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::first_number_twin_sync(api_nums),
                )
            })())
        },
    )
}
fn wire_first_sequence_twin_sync_impl(
    seqs: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_seqs = seqs.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::first_sequence_twin_sync(api_seqs),
                )
            })())
        },
    )
}
fn wire_get_app_settings_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::get_app_settings_twin_sync(),
                )
            })())
        },
    )
}
fn wire_get_fallible_app_settings_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_fallible_app_settings_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::pseudo_manual::mirror_twin_sync::get_fallible_app_settings_twin_sync()
            })())
        },
    )
}
fn wire_get_message_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::get_message_twin_sync(),
                )
            })())
        },
    )
}
fn wire_is_app_embedded_twin_sync_impl(
    app_settings: impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_app_settings = app_settings.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::is_app_embedded_twin_sync(
                        api_app_settings,
                    ),
                )
            })())
        },
    )
}
fn wire_mirror_struct_stream_twin_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_sync", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::mirror_struct_stream_twin_sync(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync>())))
                    })())
                } })
}
fn wire_mirror_tuple_stream_twin_sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mirror_tuple_stream_twin_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::mirror_twin_sync::mirror_tuple_stream_twin_sync(
                            StreamSink::new(context.rust2dart_context().stream_sink::<_, (
                                mirror_ApplicationSettings,
                                mirror_RawStringEnumMirrored,
                            )>(
                            )),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_repeat_number_twin_sync_impl(
    num: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_num = num.cst_decode();
            let api_times = times.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::repeat_number_twin_sync(
                        api_num, api_times,
                    ),
                )
            })())
        },
    )
}
fn wire_repeat_sequence_twin_sync_impl(
    seq: impl CstDecode<i32>,
    times: impl CstDecode<usize>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_seq = seq.cst_decode();
            let api_times = times.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::repeat_sequence_twin_sync(
                        api_seq, api_times,
                    ),
                )
            })())
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_contains_mirrored_sub_struct_twin_sync())
                })()) })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::mirror_twin_sync::test_fallible_of_raw_string_mirrored_twin_sync()
                })()) })
}
fn wire_test_list_of_nested_enums_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_list_of_nested_enums_mirrored_twin_sync())
                })()) })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_list_of_raw_nested_string_mirrored_twin_sync())
                })()) })
}
fn wire_test_nested_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_nested_raw_string_mirrored_twin_sync())
                })()) })
}
fn wire_test_raw_string_enum_mirrored_twin_sync_impl(
    nested: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_nested = nested.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync::test_raw_string_enum_mirrored_twin_sync(api_nested))
                })()) })
}
fn wire_test_raw_string_mirrored_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_mirrored_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync::test_raw_string_mirrored_twin_sync(
                    ),
                )
            })())
        },
    )
}
fn wire_app_settings_stream_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_stream_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::app_settings_stream_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,mirror_ApplicationSettings>())))
                    })())
                } })
}
fn wire_app_settings_vec_stream_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "app_settings_vec_stream_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::app_settings_vec_stream_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,Vec<mirror_ApplicationSettings>>())))
                    })())
                } })
}
fn wire_first_number_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_number_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nums = <crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::first_number_twin_sync_sse(
                        api_nums,
                    ),
                )
            })())
        },
    )
}
fn wire_first_sequence_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "first_sequence_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seqs = <crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>::sse_decode(
                &mut deserializer,
            );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::first_sequence_twin_sync_sse(
                        api_seqs,
                    ),
                )
            })())
        },
    )
}
fn wire_get_app_settings_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_app_settings_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::get_app_settings_twin_sync_sse(
                    ),
                )
            })())
        },
    )
}
fn wire_get_fallible_app_settings_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "get_fallible_app_settings_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::mirror_twin_sync_sse::get_fallible_app_settings_twin_sync_sse()
                })()) })
}
fn wire_get_message_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_message_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::get_message_twin_sync_sse(),
                )
            })())
        },
    )
}
fn wire_is_app_embedded_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_app_embedded_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_app_settings =
                <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::is_app_embedded_twin_sync_sse(
                        api_app_settings,
                    ),
                )
            })())
        },
    )
}
fn wire_mirror_struct_stream_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_struct_stream_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::mirror_struct_stream_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse>())))
                    })())
                } })
}
fn wire_mirror_tuple_stream_twin_sync_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mirror_tuple_stream_twin_sync_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::mirror_tuple_stream_twin_sync_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,(mirror_ApplicationSettings,mirror_RawStringEnumMirrored,)>())))
                    })())
                } })
}
fn wire_repeat_number_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_number_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_num = <i32>::sse_decode(&mut deserializer);
            let api_times = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::repeat_number_twin_sync_sse(
                        api_num, api_times,
                    ),
                )
            })())
        },
    )
}
fn wire_repeat_sequence_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "repeat_sequence_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_seq = <i32>::sse_decode(&mut deserializer);
            let api_times = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::mirror_twin_sync_sse::repeat_sequence_twin_sync_sse(
                        api_seq, api_times,
                    ),
                )
            })())
        },
    )
}
fn wire_test_contains_mirrored_sub_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_contains_mirrored_sub_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_contains_mirrored_sub_struct_twin_sync_sse())
                })()) })
}
fn wire_test_fallible_of_raw_string_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_fallible_of_raw_string_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::mirror_twin_sync_sse::test_fallible_of_raw_string_mirrored_twin_sync_sse()
                })()) })
}
fn wire_test_list_of_nested_enums_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_nested_enums_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_list_of_nested_enums_mirrored_twin_sync_sse())
                })()) })
}
fn wire_test_list_of_raw_nested_string_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_list_of_raw_nested_string_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_list_of_raw_nested_string_mirrored_twin_sync_sse())
                })()) })
}
fn wire_test_nested_raw_string_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_nested_raw_string_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_nested_raw_string_mirrored_twin_sync_sse())
                })()) })
}
fn wire_test_raw_string_enum_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_enum_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_nested = <bool>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_raw_string_enum_mirrored_twin_sync_sse(api_nested))
                })()) })
}
fn wire_test_raw_string_mirrored_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_mirrored_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::mirror_twin_sync_sse::test_raw_string_mirrored_twin_sync_sse())
                })()) })
}
fn wire_handle_big_buffers_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_big_buffers_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_big_buffers_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_handle_complex_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_complex_struct_twin_rust_async(api_s).await)
                    })().await)
                } })
}
fn wire_handle_nested_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_nested_struct_twin_rust_async(api_s).await)
                    })().await)
                } })
}
fn wire_handle_string_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_string_twin_rust_async(api_s).await)
                    })().await)
                } })
}
fn wire_handle_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize>,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_boxed = boxed.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_struct_twin_rust_async(api_arg, api_boxed).await)
                    })().await)
                } })
}
fn wire_handle_vec_u8_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    v: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_u8_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_v = v.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::handle_vec_u8_twin_rust_async(api_v).await)
                    })().await)
                } })
}
fn wire_list_of_primitive_enums_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    weekdays: impl CstDecode<
        Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_weekdays = weekdays.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::list_of_primitive_enums_twin_rust_async(api_weekdays).await)
                    })().await)
                } })
}
fn wire_test_abc_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    abc: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_abc_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_abc = abc.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::test_abc_enum_twin_rust_async(api_abc).await)
                    })().await)
                } })
}
fn wire_test_struct_with_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    se: impl CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_se = se.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async::test_struct_with_enum_twin_rust_async(api_se).await)
                    })().await)
                } })
}
fn wire_handle_big_buffers_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_big_buffers_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_big_buffers_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_handle_complex_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_complex_struct_twin_rust_async_sse(api_s).await)
                    })().await)
                } })
}
fn wire_handle_nested_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_nested_struct_twin_rust_async_sse(api_s).await)
                    })().await)
                } })
}
fn wire_handle_string_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_string_twin_rust_async_sse(api_s).await)
                    })().await)
                } })
}
fn wire_handle_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::auxiliary::sample_types::MySize>::sse_decode(&mut deserializer);
let api_boxed = <Box<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_struct_twin_rust_async_sse(api_arg, api_boxed).await)
                    })().await)
                } })
}
fn wire_handle_vec_u8_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_u8_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_v = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::handle_vec_u8_twin_rust_async_sse(api_v).await)
                    })().await)
                } })
}
fn wire_list_of_primitive_enums_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekdays = <Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::list_of_primitive_enums_twin_rust_async_sse(api_weekdays).await)
                    })().await)
                } })
}
fn wire_test_abc_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_abc_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_abc = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::test_abc_enum_twin_rust_async_sse(api_abc).await)
                    })().await)
                } })
}
fn wire_test_struct_with_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_se = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_rust_async_sse::test_struct_with_enum_twin_rust_async_sse(api_se).await)
                    })().await)
                } })
}
fn wire_handle_big_buffers_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_big_buffers_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sse::handle_big_buffers_twin_sse())
                    })())
                } })
}
fn wire_handle_complex_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sse::handle_complex_struct_twin_sse(api_s))
                    })())
                } })
}
fn wire_handle_nested_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sse::handle_nested_struct_twin_sse(api_s))
                    })())
                } })
}
fn wire_handle_string_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_example_twin_sse::handle_string_twin_sse(
                            api_s,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_struct_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::auxiliary::sample_types::MySize>::sse_decode(&mut deserializer);
            let api_boxed =
                <Box<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_example_twin_sse::handle_struct_twin_sse(
                            api_arg, api_boxed,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_vec_u8_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_u8_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_v = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_example_twin_sse::handle_vec_u8_twin_sse(
                            api_v,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_list_of_primitive_enums_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekdays = <Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sse::list_of_primitive_enums_twin_sse(api_weekdays))
                    })())
                } })
}
fn wire_test_abc_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_abc_enum_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_abc =
                <crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_example_twin_sse::test_abc_enum_twin_sse(
                            api_abc,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_test_struct_with_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_se = <crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sse::test_struct_with_enum_twin_sse(api_se))
                    })())
                } })
}
fn wire_handle_big_buffers_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_big_buffers_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_example_twin_sync::handle_big_buffers_twin_sync(
                    ),
                )
            })())
        },
    )
}
fn wire_handle_complex_struct_twin_sync_impl(
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_s = s.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync::handle_complex_struct_twin_sync(api_s))
                })()) })
}
fn wire_handle_nested_struct_twin_sync_impl(
    s: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_s = s.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync::handle_nested_struct_twin_sync(api_s))
                })()) })
}
fn wire_handle_string_twin_sync_impl(
    s: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_s = s.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_example_twin_sync::handle_string_twin_sync(
                        api_s,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_struct_twin_sync_impl(
    arg: impl CstDecode<crate::auxiliary::sample_types::MySize>,
    boxed: impl CstDecode<Box<crate::auxiliary::sample_types::MySize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_boxed = boxed.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_example_twin_sync::handle_struct_twin_sync(
                        api_arg, api_boxed,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_vec_u8_twin_sync_impl(
    v: impl CstDecode<Vec<u8>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_u8_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_v = v.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_example_twin_sync::handle_vec_u8_twin_sync(
                        api_v,
                    ),
                )
            })())
        },
    )
}
fn wire_list_of_primitive_enums_twin_sync_impl(
    weekdays: impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_weekdays = weekdays.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync::list_of_primitive_enums_twin_sync(api_weekdays))
                })()) })
}
fn wire_test_abc_enum_twin_sync_impl(
    abc: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_abc_enum_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_abc = abc.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_example_twin_sync::test_abc_enum_twin_sync(
                        api_abc,
                    ),
                )
            })())
        },
    )
}
fn wire_test_struct_with_enum_twin_sync_impl(
    se: impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_se = se.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync::test_struct_with_enum_twin_sync(api_se))
                })()) })
}
fn wire_handle_big_buffers_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_big_buffers_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_big_buffers_twin_sync_sse())
                })()) })
}
fn wire_handle_complex_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_complex_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_complex_struct_twin_sync_sse(api_s))
                })()) })
}
fn wire_handle_nested_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_nested_struct_twin_sync_sse(api_s))
                })()) })
}
fn wire_handle_string_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_s = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_string_twin_sync_sse(api_s))
                })()) })
}
fn wire_handle_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::auxiliary::sample_types::MySize>::sse_decode(&mut deserializer);
let api_boxed = <Box<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_struct_twin_sync_sse(api_arg, api_boxed))
                })()) })
}
fn wire_handle_vec_u8_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_u8_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_v = <Vec<u8>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::handle_vec_u8_twin_sync_sse(api_v))
                })()) })
}
fn wire_list_of_primitive_enums_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "list_of_primitive_enums_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_weekdays = <Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::list_of_primitive_enums_twin_sync_sse(api_weekdays))
                })()) })
}
fn wire_test_abc_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_abc_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_abc = <crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::test_abc_enum_twin_sync_sse(api_abc))
                })()) })
}
fn wire_test_struct_with_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_struct_with_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_se = <crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_example_twin_sync_sse::test_struct_with_enum_twin_sync_sse(api_se))
                })()) })
}
fn wire_empty_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    empty: impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "empty_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_empty = empty.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::empty_struct_twin_rust_async(api_empty).await)
                    })().await)
                } })
}
fn wire_func_return_unit_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_unit_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::func_return_unit_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_handle_list_of_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_list_of_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_l = l.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::handle_list_of_struct_twin_rust_async(api_l).await)
                    })().await)
                } })
}
fn wire_handle_string_list_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    names: impl CstDecode<Vec<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_list_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_names = names.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async::handle_string_list_twin_rust_async(api_names).await)
                    })().await)
                } })
}
fn wire_empty_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "empty_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_empty = <crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async_sse::empty_struct_twin_rust_async_sse(api_empty).await)
                    })().await)
                } })
}
fn wire_func_return_unit_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_unit_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async_sse::func_return_unit_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_handle_list_of_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_list_of_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_l = <Vec<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async_sse::handle_list_of_struct_twin_rust_async_sse(api_l).await)
                    })().await)
                } })
}
fn wire_handle_string_list_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_list_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_names = <Vec<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_rust_async_sse::handle_string_list_twin_rust_async_sse(api_names).await)
                    })().await)
                } })
}
fn wire_empty_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_empty =
                <crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_type_twin_sse::empty_struct_twin_sse(
                            api_empty,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_return_unit_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_unit_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_type_twin_sse::func_return_unit_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_handle_list_of_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_list_of_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_l = <Vec<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_sse::handle_list_of_struct_twin_sse(api_l))
                    })())
                } })
}
fn wire_handle_string_list_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_list_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_names = <Vec<String>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::misc_type_twin_sse::handle_string_list_twin_sse(
                            api_names,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_empty_struct_twin_sync_impl(
    empty: impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_empty = empty.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_type_twin_sync::empty_struct_twin_sync(
                        api_empty,
                    ),
                )
            })())
        },
    )
}
fn wire_func_return_unit_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_type_twin_sync::func_return_unit_twin_sync(),
                )
            })())
        },
    )
}
fn wire_handle_list_of_struct_twin_sync_impl(
    l: impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_list_of_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_l = l.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_type_twin_sync::handle_list_of_struct_twin_sync(
                        api_l,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_string_list_twin_sync_impl(
    names: impl CstDecode<Vec<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_string_list_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_names = names.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_type_twin_sync::handle_string_list_twin_sync(
                        api_names,
                    ),
                )
            })())
        },
    )
}
fn wire_empty_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "empty_struct_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_empty =
                <crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::misc_type_twin_sync_sse::empty_struct_twin_sync_sse(
                        api_empty,
                    ),
                )
            })())
        },
    )
}
fn wire_func_return_unit_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_return_unit_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_sync_sse::func_return_unit_twin_sync_sse())
                })()) })
}
fn wire_handle_list_of_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_list_of_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_l = <Vec<crate::auxiliary::sample_types::MySize>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_sync_sse::handle_list_of_struct_twin_sync_sse(api_l))
                })()) })
}
fn wire_handle_string_list_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_string_list_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_names = <Vec<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::misc_type_twin_sync_sse::handle_string_list_twin_sync_sse(api_names))
                })()) })
}
fn wire_handle_newtype_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_newtype_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::newtype_pattern_twin_rust_async::handle_newtype_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_handle_newtype_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_newtype_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::handle_newtype_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_handle_newtype_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_newtype_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::newtype_pattern_twin_sse::handle_newtype_twin_sse(api_arg))
                    })())
                } })
}
fn wire_handle_newtype_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_newtype_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::newtype_pattern_twin_sync::handle_newtype_twin_sync(
                        api_arg,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_newtype_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_newtype_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::handle_newtype_twin_sync_sse(api_arg))
                })()) })
}
fn wire_primitive_optional_types_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<Option<i32>>,
    my_i64: impl CstDecode<Option<i64>>,
    my_f64: impl CstDecode<Option<f64>>,
    my_bool: impl CstDecode<Option<bool>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_rust_async::primitive_optional_types_twin_rust_async(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)
                    })().await)
                } })
}
fn wire_primitive_optional_types_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <Option<i32>>::sse_decode(&mut deserializer);
let api_my_i64 = <Option<i64>>::sse_decode(&mut deserializer);
let api_my_f64 = <Option<f64>>::sse_decode(&mut deserializer);
let api_my_bool = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_rust_async_sse::primitive_optional_types_twin_rust_async_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)
                    })().await)
                } })
}
fn wire_primitive_optional_types_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <Option<i32>>::sse_decode(&mut deserializer);
let api_my_i64 = <Option<i64>>::sse_decode(&mut deserializer);
let api_my_f64 = <Option<f64>>::sse_decode(&mut deserializer);
let api_my_bool = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_sse::primitive_optional_types_twin_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool))
                    })())
                } })
}
fn wire_primitive_optional_types_twin_sync_impl(
    my_i32: impl CstDecode<Option<i32>>,
    my_i64: impl CstDecode<Option<i64>>,
    my_f64: impl CstDecode<Option<f64>>,
    my_bool: impl CstDecode<Option<bool>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_sync::primitive_optional_types_twin_sync(api_my_i32, api_my_i64, api_my_f64, api_my_bool))
                })()) })
}
fn wire_primitive_optional_types_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_optional_types_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <Option<i32>>::sse_decode(&mut deserializer);
let api_my_i64 = <Option<i64>>::sse_decode(&mut deserializer);
let api_my_f64 = <Option<f64>>::sse_decode(&mut deserializer);
let api_my_bool = <Option<bool>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_primitive_misc_twin_sync_sse::primitive_optional_types_twin_sync_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool))
                })()) })
}
fn wire_handle_increment_boxed_optional_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<Option<Box<f64>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_increment_boxed_optional_twin_rust_async(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_option_box_arguments_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    i8box: impl CstDecode<Option<Box<i8>>>,
    u8box: impl CstDecode<Option<Box<u8>>>,
    i32box: impl CstDecode<Option<Box<i32>>>,
    i64box: impl CstDecode<Option<Box<i64>>>,
    f64box: impl CstDecode<Option<Box<f64>>>,
    boolbox: impl CstDecode<Option<Box<bool>>>,
    structbox: impl CstDecode<
        Option<
            Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_i8box = i8box.cst_decode();let api_u8box = u8box.cst_decode();let api_i32box = i32box.cst_decode();let api_i64box = i64box.cst_decode();let api_f64box = f64box.cst_decode();let api_boolbox = boolbox.cst_decode();let api_structbox = structbox.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_option_box_arguments_twin_rust_async(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox).await)
                    })().await)
                } })
}
fn wire_handle_optional_increment_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<
        Option<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_increment_twin_rust_async(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_optional_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    left: impl CstDecode<f64>,
    right: impl CstDecode<f64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_left = left.cst_decode();let api_right = right.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_return_twin_rust_async(api_left, api_right).await)
                    })().await)
                } })
}
fn wire_handle_optional_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    document: impl CstDecode<Option<String>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_document = document.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_optional_struct_twin_rust_async(api_document).await)
                    })().await)
                } })
}
fn wire_handle_vec_of_opts_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opt: impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_opts_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opt = opt.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async::handle_vec_of_opts_twin_rust_async(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_increment_boxed_optional_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<Box<f64>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_increment_boxed_optional_twin_rust_async_sse(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_option_box_arguments_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_i8box = <Option<Box<i8>>>::sse_decode(&mut deserializer);
let api_u8box = <Option<Box<u8>>>::sse_decode(&mut deserializer);
let api_i32box = <Option<Box<i32>>>::sse_decode(&mut deserializer);
let api_i64box = <Option<Box<i64>>>::sse_decode(&mut deserializer);
let api_f64box = <Option<Box<f64>>>::sse_decode(&mut deserializer);
let api_boolbox = <Option<Box<bool>>>::sse_decode(&mut deserializer);
let api_structbox = <Option<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_option_box_arguments_twin_rust_async_sse(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox).await)
                    })().await)
                } })
}
fn wire_handle_optional_increment_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_optional_increment_twin_rust_async_sse(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_optional_return_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_return_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <f64>::sse_decode(&mut deserializer);
let api_right = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_optional_return_twin_rust_async_sse(api_left, api_right).await)
                    })().await)
                } })
}
fn wire_handle_optional_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_document = <Option<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_optional_struct_twin_rust_async_sse(api_document).await)
                    })().await)
                } })
}
fn wire_handle_vec_of_opts_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_opts_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_rust_async_sse::handle_vec_of_opts_twin_rust_async_sse(api_opt).await)
                    })().await)
                } })
}
fn wire_handle_increment_boxed_optional_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<Box<f64>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sse::handle_increment_boxed_optional_twin_sse(api_opt))
                    })())
                } })
}
fn wire_handle_option_box_arguments_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_i8box = <Option<Box<i8>>>::sse_decode(&mut deserializer);
let api_u8box = <Option<Box<u8>>>::sse_decode(&mut deserializer);
let api_i32box = <Option<Box<i32>>>::sse_decode(&mut deserializer);
let api_i64box = <Option<Box<i64>>>::sse_decode(&mut deserializer);
let api_f64box = <Option<Box<f64>>>::sse_decode(&mut deserializer);
let api_boolbox = <Option<Box<bool>>>::sse_decode(&mut deserializer);
let api_structbox = <Option<Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sse::handle_option_box_arguments_twin_sse(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox))
                    })())
                } })
}
fn wire_handle_optional_increment_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sse::handle_optional_increment_twin_sse(api_opt))
                    })())
                } })
}
fn wire_handle_optional_return_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_return_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <f64>::sse_decode(&mut deserializer);
let api_right = <f64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sse::handle_optional_return_twin_sse(api_left, api_right))
                    })())
                } })
}
fn wire_handle_optional_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_document = <Option<String>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sse::handle_optional_struct_twin_sse(api_document))
                    })())
                } })
}
fn wire_handle_vec_of_opts_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_opts_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt =
                <crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::optional_twin_sse::handle_vec_of_opts_twin_sse(
                            api_opt,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_increment_boxed_optional_twin_sync_impl(
    opt: impl CstDecode<Option<Box<f64>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opt = opt.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync::handle_increment_boxed_optional_twin_sync(api_opt))
                })()) })
}
fn wire_handle_option_box_arguments_twin_sync_impl(
    i8box: impl CstDecode<Option<Box<i8>>>,
    u8box: impl CstDecode<Option<Box<u8>>>,
    i32box: impl CstDecode<Option<Box<i32>>>,
    i64box: impl CstDecode<Option<Box<i64>>>,
    f64box: impl CstDecode<Option<Box<f64>>>,
    boolbox: impl CstDecode<Option<Box<bool>>>,
    structbox: impl CstDecode<
        Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_i8box = i8box.cst_decode();let api_u8box = u8box.cst_decode();let api_i32box = i32box.cst_decode();let api_i64box = i64box.cst_decode();let api_f64box = f64box.cst_decode();let api_boolbox = boolbox.cst_decode();let api_structbox = structbox.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync::handle_option_box_arguments_twin_sync(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox))
                })()) })
}
fn wire_handle_optional_increment_twin_sync_impl(
    opt: impl CstDecode<Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opt = opt.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync::handle_optional_increment_twin_sync(api_opt))
                })()) })
}
fn wire_handle_optional_return_twin_sync_impl(
    left: impl CstDecode<f64>,
    right: impl CstDecode<f64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_return_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_left = left.cst_decode();
            let api_right = right.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::optional_twin_sync::handle_optional_return_twin_sync(
                        api_left, api_right,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_optional_struct_twin_sync_impl(
    document: impl CstDecode<Option<String>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_optional_struct_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_document = document.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::optional_twin_sync::handle_optional_struct_twin_sync(
                        api_document,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_vec_of_opts_twin_sync_impl(
    opt: impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_vec_of_opts_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opt = opt.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::optional_twin_sync::handle_vec_of_opts_twin_sync(
                        api_opt,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_increment_boxed_optional_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_increment_boxed_optional_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<Box<f64>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_increment_boxed_optional_twin_sync_sse(api_opt))
                })()) })
}
fn wire_handle_option_box_arguments_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_option_box_arguments_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_i8box = <Option<Box<i8>>>::sse_decode(&mut deserializer);
let api_u8box = <Option<Box<u8>>>::sse_decode(&mut deserializer);
let api_i32box = <Option<Box<i32>>>::sse_decode(&mut deserializer);
let api_i64box = <Option<Box<i64>>>::sse_decode(&mut deserializer);
let api_f64box = <Option<Box<f64>>>::sse_decode(&mut deserializer);
let api_boolbox = <Option<Box<bool>>>::sse_decode(&mut deserializer);
let api_structbox = <Option<Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_option_box_arguments_twin_sync_sse(api_i8box, api_u8box, api_i32box, api_i64box, api_f64box, api_boolbox, api_structbox))
                })()) })
}
fn wire_handle_optional_increment_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_increment_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <Option<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_optional_increment_twin_sync_sse(api_opt))
                })()) })
}
fn wire_handle_optional_return_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_return_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_left = <f64>::sse_decode(&mut deserializer);
let api_right = <f64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_optional_return_twin_sync_sse(api_left, api_right))
                })()) })
}
fn wire_handle_optional_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_optional_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_document = <Option<String>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_optional_struct_twin_sync_sse(api_document))
                })()) })
}
fn wire_handle_vec_of_opts_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_opts_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opt = <crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::optional_twin_sync_sse::handle_vec_of_opts_twin_sync_sse(api_opt))
                })()) })
}
fn wire_handle_vec_of_primitive_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    n: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_n = n.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::handle_vec_of_primitive_twin_rust_async(api_n).await)
                    })().await)
                } })
}
fn wire_handle_vec_of_primitive_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_n = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::handle_vec_of_primitive_twin_rust_async_sse(api_n).await)
                    })().await)
                } })
}
fn wire_handle_vec_of_primitive_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_n = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_sse::handle_vec_of_primitive_twin_sse(api_n))
                    })())
                } })
}
fn wire_handle_vec_of_primitive_twin_sync_impl(
    n: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_n = n.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_sync::handle_vec_of_primitive_twin_sync(api_n))
                })()) })
}
fn wire_handle_vec_of_primitive_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_vec_of_primitive_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_n = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::handle_vec_of_primitive_twin_sync_sse(api_n))
                })()) })
}
fn wire_primitive_types_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_i32: impl CstDecode<i32>,
    my_i64: impl CstDecode<i64>,
    my_f64: impl CstDecode<f64>,
    my_bool: impl CstDecode<bool>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_types_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_i32 = my_i32.cst_decode();let api_my_i64 = my_i64.cst_decode();let api_my_f64 = my_f64.cst_decode();let api_my_bool = my_bool.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async::primitive_types_twin_rust_async(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)
                    })().await)
                } })
}
fn wire_primitive_u32_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    my_u32: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_u32_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_my_u32 = my_u32.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async::primitive_u32_twin_rust_async(api_my_u32).await)
                    })().await)
                } })
}
fn wire_primitive_types_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_types_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <i32>::sse_decode(&mut deserializer);
let api_my_i64 = <i64>::sse_decode(&mut deserializer);
let api_my_f64 = <f64>::sse_decode(&mut deserializer);
let api_my_bool = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async_sse::primitive_types_twin_rust_async_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool).await)
                    })().await)
                } })
}
fn wire_primitive_u32_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_u32_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_u32 = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_rust_async_sse::primitive_u32_twin_rust_async_sse(api_my_u32).await)
                    })().await)
                } })
}
fn wire_primitive_types_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_types_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <i32>::sse_decode(&mut deserializer);
let api_my_i64 = <i64>::sse_decode(&mut deserializer);
let api_my_f64 = <f64>::sse_decode(&mut deserializer);
let api_my_bool = <bool>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_sse::primitive_types_twin_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool))
                    })())
                } })
}
fn wire_primitive_u32_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_u32_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_u32 = <u32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::primitive_misc_twin_sse::primitive_u32_twin_sse(
                            api_my_u32,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_primitive_types_twin_sync_impl(
    my_i32: impl CstDecode<i32>,
    my_i64: impl CstDecode<i64>,
    my_f64: impl CstDecode<f64>,
    my_bool: impl CstDecode<bool>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_types_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_my_i32 = my_i32.cst_decode();
            let api_my_i64 = my_i64.cst_decode();
            let api_my_f64 = my_f64.cst_decode();
            let api_my_bool = my_bool.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive_misc_twin_sync::primitive_types_twin_sync(
                        api_my_i32,
                        api_my_i64,
                        api_my_f64,
                        api_my_bool,
                    ),
                )
            })())
        },
    )
}
fn wire_primitive_u32_twin_sync_impl(
    my_u32: impl CstDecode<u32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "primitive_u32_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_my_u32 = my_u32.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::primitive_misc_twin_sync::primitive_u32_twin_sync(
                        api_my_u32,
                    ),
                )
            })())
        },
    )
}
fn wire_primitive_types_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_types_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_i32 = <i32>::sse_decode(&mut deserializer);
let api_my_i64 = <i64>::sse_decode(&mut deserializer);
let api_my_f64 = <f64>::sse_decode(&mut deserializer);
let api_my_bool = <bool>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_sync_sse::primitive_types_twin_sync_sse(api_my_i32, api_my_i64, api_my_f64, api_my_bool))
                })()) })
}
fn wire_primitive_u32_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "primitive_u32_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_my_u32 = <u32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::primitive_misc_twin_sync_sse::primitive_u32_twin_sync_sse(api_my_u32))
                })()) })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async::test_more_than_just_one_raw_string_struct_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_raw_string_item_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async::test_raw_string_item_struct_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async_sse::test_more_than_just_one_raw_string_struct_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_raw_string_item_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_rust_async_sse::test_raw_string_item_struct_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sse::test_more_than_just_one_raw_string_struct_twin_sse())
                    })())
                } })
}
fn wire_test_raw_string_item_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sse::test_raw_string_item_struct_twin_sse())
                    })())
                } })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync::test_more_than_just_one_raw_string_struct_twin_sync())
                })()) })
}
fn wire_test_raw_string_item_struct_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync::test_raw_string_item_struct_twin_sync())
                })()) })
}
fn wire_test_more_than_just_one_raw_string_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync_sse::test_more_than_just_one_raw_string_struct_twin_sync_sse())
                })()) })
}
fn wire_test_raw_string_item_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_raw_string_item_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::raw_string_twin_sync_sse::test_raw_string_item_struct_twin_sync_sse())
                })()) })
}
fn wire_NonCloneSimpleTwinMoi_instance_method_arg_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_instance_method_arg_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::instance_method_arg_borrow_twin_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_instance_method_arg_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_instance_method_arg_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::instance_method_arg_mut_borrow_twin_moi(&mut api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_instance_method_arg_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<NonCloneSimpleTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_instance_method_arg_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::instance_method_arg_own_twin_moi(api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_instance_method_getter_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_instance_method_getter_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::instance_method_getter_twin_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_instance_method_return_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_instance_method_return_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::instance_method_return_own_twin_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_new_custom_name_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_new_custom_name_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::new_custom_name_twin_moi())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_new_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_new_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::new_twin_moi())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_new_with_result_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_new_with_result_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::new_with_result_twin_moi()
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_static_method_arg_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_static_method_arg_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::static_method_arg_borrow_twin_moi(&api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_static_method_arg_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_static_method_arg_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::static_method_arg_mut_borrow_twin_moi(&mut api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_static_method_arg_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_static_method_arg_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::static_method_arg_own_twin_moi(api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinMoi_static_method_return_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinMoi_static_method_return_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::NonCloneSimpleTwinMoi::static_method_return_own_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_arg_borrow_twin_moi(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_arg_mut_borrow_twin_moi(&mut api_arg, api_expect, api_adder))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_arg_own_and_return_own_twin_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinMoi>,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_arg_own_twin_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_borrow_and_borrow_twin_moi(&api_a, &api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_moi(&api_borrow, &mut api_mut_borrow))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_callable_arg_twin_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_callable_return_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_explicit_arg_twin_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_explicit_return_twin_moi(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_explicit_struct_twin_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinMoi>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_normal_and_opaque_arg_twin_moi(api_a, api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn MyTraitTwinMoi + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_plus_sign_arg_twin_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_plus_sign_return_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_return_opaque_one_and_two_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_return_opaque_two_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_return_own_twin_moi(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinMoi,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_moi(&api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinMoi,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_moi(&mut api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_trait_object_arg_borrow_twin_moi(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi(&mut api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn HelloTraitTwinMoi>>,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_trait_object_arg_own_twin_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_trait_object_return_own_one_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_trait_object_return_own_two_twin_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_two_args_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinMoi>,
    b: impl CstDecode<NonCloneSimpleTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_moi::rust_auto_opaque_two_args_twin_moi(api_a, api_b))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::instance_method_arg_borrow_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::instance_method_arg_mut_borrow_twin_rust_async(&mut api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<NonCloneSimpleTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::instance_method_arg_own_twin_rust_async(api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::instance_method_getter_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::instance_method_return_own_twin_rust_async(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::new_custom_name_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_new_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_new_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::new_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::new_with_result_twin_rust_async().await
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::static_method_arg_borrow_twin_rust_async(&api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::static_method_arg_mut_borrow_twin_rust_async(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::static_method_arg_own_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::NonCloneSimpleTwinRustAsync::static_method_return_own_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_arg_borrow_twin_rust_async(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_arg_mut_borrow_twin_rust_async(&mut api_arg, api_expect, api_adder).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_arg_own_and_return_own_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsync>,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_arg_own_twin_rust_async(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_borrow_and_borrow_twin_rust_async(&api_a, &api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async(&api_borrow, &mut api_mut_borrow).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_callable_arg_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_callable_return_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_explicit_arg_twin_rust_async(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_explicit_return_twin_rust_async(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_explicit_struct_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinRustAsync>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_normal_and_opaque_arg_twin_rust_async(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn MyTraitTwinRustAsync + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_plus_sign_arg_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_plus_sign_return_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_return_opaque_one_and_two_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_return_opaque_two_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_return_own_twin_rust_async(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsync,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async(&api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsync,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_trait_object_arg_borrow_twin_rust_async(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async(&mut api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn HelloTraitTwinRustAsync>>,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_trait_object_arg_own_twin_rust_async(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_trait_object_return_own_one_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_trait_object_return_own_two_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_two_args_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinRustAsync>,
    b: impl CstDecode<NonCloneSimpleTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::rust_auto_opaque_two_args_twin_rust_async(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::instance_method_arg_borrow_twin_rust_async_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::instance_method_arg_mut_borrow_twin_rust_async_moi(&mut api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::instance_method_arg_own_twin_rust_async_moi(api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_getter_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_instance_method_getter_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::instance_method_getter_twin_rust_async_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_instance_method_return_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_instance_method_return_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::instance_method_return_own_twin_rust_async_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_new_custom_name_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_new_custom_name_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::new_custom_name_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_new_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_new_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::new_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_new_with_result_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_new_with_result_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::new_with_result_twin_rust_async_moi().await
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::static_method_arg_borrow_twin_rust_async_moi(&api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::static_method_arg_mut_borrow_twin_rust_async_moi(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_static_method_arg_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::static_method_arg_own_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncMoi_static_method_return_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncMoi_static_method_return_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::NonCloneSimpleTwinRustAsyncMoi::static_method_return_own_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_arg_borrow_twin_rust_async_moi(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi(&mut api_arg, api_expect, api_adder).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_arg_own_twin_rust_async_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi(&api_a, &api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi(&api_borrow, &mut api_mut_borrow).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_callable_arg_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_callable_return_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_explicit_arg_twin_rust_async_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_explicit_return_twin_rust_async_moi(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_explicit_struct_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_plus_sign_arg_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_plus_sign_return_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_return_opaque_two_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_initial = initial.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_return_own_twin_rust_async_moi(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_moi(&api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_moi(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi(&mut api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_two_args_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
    b: impl CstDecode<NonCloneSimpleTwinRustAsyncMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::rust_auto_opaque_two_args_twin_rust_async_moi(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_instance_method_arg_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::instance_method_arg_borrow_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_instance_method_arg_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::instance_method_arg_mut_borrow_twin_rust_async_sse(&mut api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_instance_method_arg_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_instance_method_arg_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::instance_method_arg_own_twin_rust_async_sse(api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_instance_method_getter_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_instance_method_getter_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::instance_method_getter_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_instance_method_return_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_instance_method_return_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::instance_method_return_own_twin_rust_async_sse(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_new_custom_name_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_new_custom_name_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::new_custom_name_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_new_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_new_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::new_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_new_with_result_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_new_with_result_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::new_with_result_twin_rust_async_sse().await
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_static_method_arg_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::static_method_arg_borrow_twin_rust_async_sse(&api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_static_method_arg_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::static_method_arg_mut_borrow_twin_rust_async_sse(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_static_method_arg_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_static_method_arg_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::static_method_arg_own_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSse_static_method_return_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSse_static_method_return_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::NonCloneSimpleTwinRustAsyncSse::static_method_return_own_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_arg_borrow_twin_rust_async_sse(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse(&mut api_arg, api_expect, api_adder).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_arg_own_twin_rust_async_sse(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse(&api_a, &api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse(&api_borrow, &mut api_mut_borrow).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_callable_arg_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_callable_return_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_explicit_arg_twin_rust_async_sse(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_explicit_return_twin_rust_async_sse(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_explicit_struct_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinRustAsyncSse + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_plus_sign_arg_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_plus_sign_return_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_return_opaque_two_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_return_own_twin_rust_async_sse(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse(&api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse(&mut api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinRustAsyncSse >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_two_args_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::rust_auto_opaque_two_args_twin_rust_async_sse(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::instance_method_arg_borrow_twin_rust_async_sse_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::instance_method_arg_mut_borrow_twin_rust_async_sse_moi(&mut api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_instance_method_arg_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::instance_method_arg_own_twin_rust_async_sse_moi(api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_getter_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_instance_method_getter_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::instance_method_getter_twin_rust_async_sse_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_instance_method_return_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_instance_method_return_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::instance_method_return_own_twin_rust_async_sse_moi(&api_that).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_new_custom_name_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_new_custom_name_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::new_custom_name_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_new_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_new_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::new_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_new_with_result_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_new_with_result_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::new_with_result_twin_rust_async_sse_moi().await
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::static_method_arg_borrow_twin_rust_async_sse_moi(&api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::static_method_arg_mut_borrow_twin_rust_async_sse_moi(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_static_method_arg_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::static_method_arg_own_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinRustAsyncSseMoi_static_method_return_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinRustAsyncSseMoi_static_method_return_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::NonCloneSimpleTwinRustAsyncSseMoi::static_method_return_own_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_arg_borrow_twin_rust_async_sse_moi(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_arg_mut_borrow_twin_rust_async_sse_moi(&mut api_arg, api_expect, api_adder).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_arg_own_and_return_own_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_arg_own_twin_rust_async_sse_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_borrow_and_borrow_twin_rust_async_sse_moi(&api_a, &api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_sse_moi(&api_borrow, &mut api_mut_borrow).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_callable_arg_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_callable_return_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_explicit_arg_twin_rust_async_sse_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_explicit_return_twin_rust_async_sse_moi(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_explicit_struct_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_sse_moi(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinRustAsyncSseMoi + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_plus_sign_arg_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_plus_sign_return_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_return_opaque_two_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_return_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_return_own_twin_rust_async_sse_moi(api_initial).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_sse_moi(&api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_sse_moi(&mut api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_sse_moi(api_arg).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_sse_moi(&api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinRustAsyncSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_sse_moi(&mut api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinRustAsyncSseMoi >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_trait_object_arg_own_twin_rust_async_sse_moi(api_arg, api_expect).await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_trait_object_return_own_one_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_trait_object_return_own_two_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_rust_auto_opaque_two_args_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::rust_auto_opaque_two_args_twin_rust_async_sse_moi(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_instance_method_arg_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::instance_method_arg_borrow_twin_sse(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_instance_method_arg_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::instance_method_arg_mut_borrow_twin_sse(&mut api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_instance_method_arg_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::instance_method_arg_own_twin_sse(api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_instance_method_getter_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_instance_method_getter_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::instance_method_getter_twin_sse(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_instance_method_return_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_instance_method_return_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::instance_method_return_own_twin_sse(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_new_custom_name_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_new_custom_name_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::new_custom_name_twin_sse())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_new_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_new_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::new_twin_sse())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_new_with_result_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_new_with_result_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::new_with_result_twin_sse()
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_static_method_arg_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::static_method_arg_borrow_twin_sse(&api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_static_method_arg_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::static_method_arg_mut_borrow_twin_sse(&mut api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_static_method_arg_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_static_method_arg_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::static_method_arg_own_twin_sse(api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSse_static_method_return_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSse_static_method_return_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::NonCloneSimpleTwinSse::static_method_return_own_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_arg_borrow_twin_sse(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_arg_mut_borrow_twin_sse(&mut api_arg, api_expect, api_adder))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_arg_own_and_return_own_twin_sse(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_arg_own_twin_sse(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_borrow_and_borrow_twin_sse(&api_a, &api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_borrow_and_mut_borrow_twin_sse(&api_borrow, &mut api_mut_borrow))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_callable_arg_twin_sse(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_callable_return_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_explicit_arg_twin_sse(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_explicit_return_twin_sse(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_explicit_struct_twin_sse(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_normal_and_opaque_arg_twin_sse(api_a, api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinSse + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_plus_sign_arg_twin_sse(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_plus_sign_return_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_return_opaque_one_and_two_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_return_opaque_two_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_return_own_twin_sse(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse(&api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse(&mut api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_trait_object_arg_borrow_twin_sse(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse(&mut api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinSse >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_trait_object_arg_own_twin_sse(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_trait_object_return_own_one_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_trait_object_return_own_two_twin_sse())
                    })())
                } })
}
fn wire_rust_auto_opaque_two_args_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse::rust_auto_opaque_two_args_twin_sse(api_a, api_b))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_instance_method_arg_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_instance_method_arg_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::instance_method_arg_borrow_twin_sse_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_instance_method_arg_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_instance_method_arg_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::instance_method_arg_mut_borrow_twin_sse_moi(&mut api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_instance_method_arg_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_instance_method_arg_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::instance_method_arg_own_twin_sse_moi(api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_instance_method_getter_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_instance_method_getter_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::instance_method_getter_twin_sse_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_instance_method_return_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_instance_method_return_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::instance_method_return_own_twin_sse_moi(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_new_custom_name_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_new_custom_name_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::new_custom_name_twin_sse_moi())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_new_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_new_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::new_twin_sse_moi())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_new_with_result_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_new_with_result_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::new_with_result_twin_sse_moi()
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_static_method_arg_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_static_method_arg_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::static_method_arg_borrow_twin_sse_moi(&api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_static_method_arg_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_static_method_arg_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::static_method_arg_mut_borrow_twin_sse_moi(&mut api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_static_method_arg_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_static_method_arg_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::static_method_arg_own_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSseMoi_static_method_return_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSseMoi_static_method_return_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::NonCloneSimpleTwinSseMoi::static_method_return_own_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_arg_borrow_twin_sse_moi(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_arg_mut_borrow_twin_sse_moi(&mut api_arg, api_expect, api_adder))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_arg_own_and_return_own_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_arg_own_twin_sse_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_borrow_and_borrow_twin_sse_moi(&api_a, &api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_sse_moi(&api_borrow, &mut api_mut_borrow))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_callable_arg_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_return_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_callable_return_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_explicit_arg_twin_sse_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_return_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_explicit_return_twin_sse_moi(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_explicit_struct_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_normal_and_opaque_arg_twin_sse_moi(api_a, api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinSseMoi + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_plus_sign_arg_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_plus_sign_return_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_return_opaque_one_and_two_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_return_opaque_two_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_return_own_twin_sse_moi(api_initial))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sse_moi(&api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sse_moi(&mut api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sse_moi(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_trait_object_arg_borrow_twin_sse_moi(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sse_moi(&mut api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinSseMoi >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_trait_object_arg_own_twin_sse_moi(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_trait_object_return_own_one_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_trait_object_return_own_two_twin_sse_moi())
                    })())
                } })
}
fn wire_rust_auto_opaque_two_args_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::rust_auto_opaque_two_args_twin_sse_moi(api_a, api_b))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_borrow_twin_sync(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_mut_borrow_twin_sync(&mut api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync_impl(
    that: impl CstDecode<NonCloneSimpleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_arg_own_twin_sync(api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_getter_twin_sync_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_getter_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_getter_twin_sync(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_instance_method_return_own_twin_sync_impl(
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::instance_method_return_own_twin_sync(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_new_custom_name_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_new_custom_name_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::new_custom_name_twin_sync())
                })()) })
}
fn wire_NonCloneSimpleTwinSync_new_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_new_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::new_twin_sync())
                })()) })
}
fn wire_NonCloneSimpleTwinSync_new_with_result_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_new_with_result_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::new_with_result_twin_sync()
                })()) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_borrow_twin_sync(&api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_mut_borrow_twin_sync(&mut api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_static_method_arg_own_twin_sync_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_arg_own_twin_sync(api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSync_static_method_return_own_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSync_static_method_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::NonCloneSimpleTwinSync::static_method_return_own_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_borrow_twin_sync(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_mut_borrow_twin_sync(&mut api_arg, api_expect, api_adder))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_own_and_return_own_twin_sync(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_twin_sync_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSync>,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_arg_own_twin_sync(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sync_impl(
    a: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                    let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_borrow_and_borrow_twin_sync(&api_a, &api_b))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_impl(
    borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode();
                transform_result_dco((move || {
                    let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_borrow_and_mut_borrow_twin_sync(&api_borrow, &mut api_mut_borrow))
                })()) })
}
fn wire_rust_auto_opaque_callable_arg_twin_sync_impl(
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_callable_arg_twin_sync(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_callable_return_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_callable_return_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    >,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_explicit_arg_twin_sync(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_explicit_return_twin_sync_impl(
    initial: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_initial = initial.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_explicit_return_twin_sync(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_explicit_struct_twin_sync(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_impl(
    a: impl CstDecode<NonCloneSimpleTwinSync>,
    b: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_normal_and_opaque_arg_twin_sync(api_a, api_b))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_impl(
    arg: impl CstDecode<Box<dyn MyTraitTwinSync + Send + Sync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_plus_sign_arg_twin_sync(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_plus_sign_return_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_return_opaque_one_and_two_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_return_opaque_two_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_return_own_twin_sync_impl(
    initial: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_initial = initial.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_return_own_twin_sync(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSync,
            >,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync(&api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSync,
            >,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync(&mut api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_impl(
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >,
    >,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_borrow_twin_sync(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_impl(
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >,
    >,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync(&mut api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_impl(
    arg: impl CstDecode<Box<dyn HelloTraitTwinSync>>,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_arg_own_twin_sync(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_return_own_one_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_trait_object_return_own_two_twin_sync())
                })()) })
}
fn wire_rust_auto_opaque_two_args_twin_sync_impl(
    a: impl CstDecode<NonCloneSimpleTwinSync>,
    b: impl CstDecode<NonCloneSimpleTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync::rust_auto_opaque_two_args_twin_sync(api_a, api_b))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_borrow_twin_sync_moi_impl(
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_instance_method_arg_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::instance_method_arg_borrow_twin_sync_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_mut_borrow_twin_sync_moi_impl(
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_instance_method_arg_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::instance_method_arg_mut_borrow_twin_sync_moi(&mut api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_instance_method_arg_own_twin_sync_moi_impl(
    that: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_instance_method_arg_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::instance_method_arg_own_twin_sync_moi(api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_instance_method_getter_twin_sync_moi_impl(
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_instance_method_getter_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::instance_method_getter_twin_sync_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_instance_method_return_own_twin_sync_moi_impl(
    that: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_instance_method_return_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_that = that.cst_decode();
                transform_result_dco((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::instance_method_return_own_twin_sync_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_new_custom_name_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_new_custom_name_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::new_custom_name_twin_sync_moi())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_new_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_new_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::new_twin_sync_moi())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_new_with_result_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_new_with_result_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::new_with_result_twin_sync_moi()
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_static_method_arg_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_static_method_arg_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::static_method_arg_borrow_twin_sync_moi(&api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_static_method_arg_mut_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_static_method_arg_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::static_method_arg_mut_borrow_twin_sync_moi(&mut api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_static_method_arg_own_twin_sync_moi_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_static_method_arg_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::static_method_arg_own_twin_sync_moi(api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncMoi_static_method_return_own_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncMoi_static_method_return_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::NonCloneSimpleTwinSyncMoi::static_method_return_own_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_arg_borrow_twin_sync_moi(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();let api_adder = adder.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_arg_mut_borrow_twin_sync_moi(&mut api_arg, api_expect, api_adder))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_moi_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_arg_own_and_return_own_twin_sync_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_twin_sync_moi_impl(
    arg: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_arg_own_twin_sync_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sync_moi_impl(
    a: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                    let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_borrow_and_borrow_twin_sync_moi(&api_a, &api_b))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi_impl(
    borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode();
                transform_result_dco((move || {
                    let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi(&api_borrow, &mut api_mut_borrow))
                })()) })
}
fn wire_rust_auto_opaque_callable_arg_twin_sync_moi_impl(
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_callable_arg_twin_sync_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_callable_return_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_callable_return_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    >,
    expect: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_explicit_arg_twin_sync_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_explicit_return_twin_sync_moi_impl(
    initial: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_initial = initial.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_explicit_return_twin_sync_moi(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sync_moi_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_explicit_struct_twin_sync_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi_impl(
    a: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
    b: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi(api_a, api_b))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_moi_impl(
    arg: impl CstDecode<Box<dyn MyTraitTwinSyncMoi + Send + Sync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_plus_sign_arg_twin_sync_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_plus_sign_return_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_return_opaque_two_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_own_twin_sync_moi_impl(
    initial: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_initial = initial.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_return_own_twin_sync_moi(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncMoi,
            >,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_moi(&api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncMoi,
            >,
        >,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_moi(&mut api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi_impl(
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >,
    >,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi_impl(
    arg: impl CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >,
    >,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi(&mut api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_moi_impl(
    arg: impl CstDecode<Box<dyn HelloTraitTwinSyncMoi>>,
    expect: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_trait_object_arg_own_twin_sync_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_trait_object_return_own_one_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_trait_object_return_own_two_twin_sync_moi())
                })()) })
}
fn wire_rust_auto_opaque_two_args_twin_sync_moi_impl(
    a: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
    b: impl CstDecode<NonCloneSimpleTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::rust_auto_opaque_two_args_twin_sync_moi(api_a, api_b))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_instance_method_arg_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::instance_method_arg_borrow_twin_sync_sse(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_instance_method_arg_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::instance_method_arg_mut_borrow_twin_sync_sse(&mut api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_instance_method_arg_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::instance_method_arg_own_twin_sync_sse(api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_instance_method_getter_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_instance_method_getter_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::instance_method_getter_twin_sync_sse(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_instance_method_return_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::instance_method_return_own_twin_sync_sse(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_new_custom_name_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::new_custom_name_twin_sync_sse())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_new_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_new_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::new_twin_sync_sse())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_new_with_result_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_new_with_result_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::new_with_result_twin_sync_sse()
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_static_method_arg_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::static_method_arg_borrow_twin_sync_sse(&api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_static_method_arg_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::static_method_arg_mut_borrow_twin_sync_sse(&mut api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_static_method_arg_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::static_method_arg_own_twin_sync_sse(api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSse_static_method_return_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::NonCloneSimpleTwinSyncSse::static_method_return_own_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_arg_borrow_twin_sync_sse(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_arg_mut_borrow_twin_sync_sse(&mut api_arg, api_expect, api_adder))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_arg_own_and_return_own_twin_sync_sse(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_arg_own_twin_sync_sse(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_borrow_and_borrow_twin_sync_sse(&api_a, &api_b))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse(&api_borrow, &mut api_mut_borrow))
                })()) })
}
fn wire_rust_auto_opaque_callable_arg_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_callable_arg_twin_sync_sse(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_callable_return_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_callable_return_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_explicit_arg_twin_sync_sse(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_explicit_return_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_explicit_return_twin_sync_sse(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_explicit_struct_twin_sync_sse(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse(api_a, api_b))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinSyncSse + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_plus_sign_arg_twin_sync_sse(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_plus_sign_return_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_return_opaque_two_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_return_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_return_own_twin_sync_sse(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse(&api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse(&mut api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncSse >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse(&mut api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinSyncSse >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_trait_object_arg_own_twin_sync_sse(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_trait_object_return_own_one_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_trait_object_return_own_two_twin_sync_sse())
                })()) })
}
fn wire_rust_auto_opaque_two_args_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::rust_auto_opaque_two_args_twin_sync_sse(api_a, api_b))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_instance_method_arg_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::instance_method_arg_borrow_twin_sync_sse_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_instance_method_arg_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::instance_method_arg_mut_borrow_twin_sync_sse_moi(&mut api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_instance_method_arg_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_instance_method_arg_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::instance_method_arg_own_twin_sync_sse_moi(api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_instance_method_getter_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_instance_method_getter_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::instance_method_getter_twin_sync_sse_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_instance_method_return_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_instance_method_return_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::instance_method_return_own_twin_sync_sse_moi(&api_that))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_new_custom_name_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_new_custom_name_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::new_custom_name_twin_sync_sse_moi())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_new_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_new_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::new_twin_sync_sse_moi())
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_new_with_result_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_new_with_result_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::new_with_result_twin_sync_sse_moi()
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_static_method_arg_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::static_method_arg_borrow_twin_sync_sse_moi(&api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_static_method_arg_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::static_method_arg_mut_borrow_twin_sync_sse_moi(&mut api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_static_method_arg_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_static_method_arg_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::static_method_arg_own_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_NonCloneSimpleTwinSyncSseMoi_static_method_return_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinSyncSseMoi_static_method_return_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::NonCloneSimpleTwinSyncSseMoi::static_method_return_own_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_arg_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_arg_borrow_twin_sync_sse_moi(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);
let api_adder = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_arg_mut_borrow_twin_sync_sse_moi(&mut api_arg, api_expect, api_adder))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_arg_own_and_return_own_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_arg_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_arg_own_twin_sync_sse_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);
let api_b = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_borrow_and_borrow_twin_sync_sse_moi(&api_a, &api_b))
                })()) })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);
let api_mut_borrow = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_borrow_and_mut_borrow_twin_sync_sse_moi(&api_borrow, &mut api_mut_borrow))
                })()) })
}
fn wire_rust_auto_opaque_callable_arg_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_arg_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn Fn (String) -> String + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_callable_arg_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_callable_return_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_callable_return_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_callable_return_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_explicit_arg_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_arg_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(&mut deserializer);
let api_expect = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_explicit_arg_twin_sync_sse_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_explicit_return_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_return_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_explicit_return_twin_sync_sse_moi(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_explicit_struct_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_explicit_struct_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_explicit_struct_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);
let api_b = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_normal_and_opaque_arg_twin_sync_sse_moi(api_a, api_b))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_arg_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn MyTraitTwinSyncSseMoi + Send + Sync >>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_plus_sign_arg_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_plus_sign_return_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_plus_sign_return_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_plus_sign_return_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_return_opaque_one_and_two_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_return_opaque_two_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_return_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_initial = <i32>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_return_own_twin_sync_sse_moi(api_initial))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_sse_moi(&api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_sse_moi(&mut api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <StructWithGoodAndOpaqueFieldTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_sse_moi(api_arg))
                })()) })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_trait_object_arg_borrow_twin_sync_sse_moi(&api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Box < dyn HelloTraitTwinSyncSseMoi >>>>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_sse_moi(&mut api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <Box < dyn HelloTraitTwinSyncSseMoi >>::sse_decode(&mut deserializer);
let api_expect = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_trait_object_arg_own_twin_sync_sse_moi(api_arg, api_expect))
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_trait_object_return_own_one_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_trait_object_return_own_two_twin_sync_sse_moi())
                })()) })
}
fn wire_rust_auto_opaque_two_args_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_two_args_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);
let api_b = <NonCloneSimpleTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::rust_auto_opaque_two_args_twin_sync_sse_moi(api_a, api_b))
                })()) })
}
fn wire_frb_sync_generator_test_twin_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_sync_generator_test_twin_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_moi::frb_sync_generator_test_twin_moi())
                })()) })
}
fn wire_sync_create_non_clone_twin_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_non_clone_twin_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_moi::sync_create_non_clone_twin_moi())
                })()) })
}
fn wire_sync_create_opaque_twin_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_opaque_twin_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_moi::sync_create_opaque_twin_moi())
                })()) })
}
fn wire_sync_option_rust_opaque_twin_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_option_rust_opaque_twin_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     crate::api::pseudo_manual::rust_opaque_sync_twin_moi::sync_option_rust_opaque_twin_moi()
                })()) })
}
fn wire_frb_sync_generator_test_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_sync_generator_test_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse::frb_sync_generator_test_twin_sse())
                })()) })
}
fn wire_sync_create_non_clone_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_non_clone_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse::sync_create_non_clone_twin_sse())
                })()) })
}
fn wire_sync_create_opaque_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_opaque_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse::sync_create_opaque_twin_sse())
                })()) })
}
fn wire_sync_option_rust_opaque_twin_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_option_rust_opaque_twin_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_opaque_sync_twin_sse::sync_option_rust_opaque_twin_sse()
                })()) })
}
fn wire_frb_sync_generator_test_twin_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_sync_generator_test_twin_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::frb_sync_generator_test_twin_sse_moi())
                })()) })
}
fn wire_sync_create_non_clone_twin_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_non_clone_twin_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::sync_create_non_clone_twin_sse_moi())
                })()) })
}
fn wire_sync_create_opaque_twin_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_create_opaque_twin_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::sync_create_opaque_twin_sse_moi())
                })()) })
}
fn wire_sync_option_rust_opaque_twin_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "sync_option_rust_opaque_twin_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::sync_option_rust_opaque_twin_sse_moi()
                })()) })
}
fn wire_create_array_opaque_enum_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_moi::create_array_opaque_enum_twin_moi())
                    })())
                } })
}
fn wire_create_nested_opaque_twin_moi_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_moi::create_nested_opaque_twin_moi())
                    })())
                } })
}
fn wire_create_opaque_twin_moi_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::create_opaque_twin_moi(),
                    )
                })())
            }
        },
    )
}
fn wire_create_option_opaque_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<RustOpaqueMoi<HideDataTwinMoi>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_moi::create_option_opaque_twin_moi(api_opaque))
                    })())
                } })
}
fn wire_frb_generator_test_twin_moi_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_moi::frb_generator_test_twin_moi())
                    })())
                } })
}
fn wire_opaque_array_run_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[RustOpaqueMoi<HideDataTwinMoi>; 2]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::opaque_array_run_twin_moi(
                            api_data,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_array_twin_moi_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::opaque_array_twin_moi(),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_vec_run_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinMoi>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::opaque_vec_run_twin_moi(
                            api_data,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_vec_twin_moi_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::opaque_vec_twin_moi(),
                    )
                })())
            }
        },
    )
}
fn wire_run_enum_opaque_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::run_enum_opaque_twin_moi(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_nested_opaque_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::run_nested_opaque_twin_moi(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_non_clone_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<RustOpaqueMoi<NonCloneDataTwinMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_clone = clone.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::run_non_clone_twin_moi(
                            api_clone,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_opaque_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_moi::run_opaque_twin_moi(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_opaque_with_delay_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_moi::run_opaque_with_delay_twin_moi(api_opaque))
                    })())
                } })
}
fn wire_unwrap_rust_opaque_twin_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_moi",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::pseudo_manual::rust_opaque_twin_moi::unwrap_rust_opaque_twin_moi(
                        api_opaque,
                    )
                })())
            }
        },
    )
}
fn wire_create_array_opaque_enum_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_array_opaque_enum_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_create_nested_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_nested_opaque_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_create_opaque_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_opaque_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_create_option_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<RustOpaqueNom<HideDataTwinRustAsync>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::create_option_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_frb_generator_test_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::frb_generator_test_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_opaque_array_run_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[RustOpaqueNom<HideDataTwinRustAsync>; 2]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_array_run_twin_rust_async(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_array_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_array_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_opaque_vec_run_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<RustOpaqueNom<HideDataTwinRustAsync>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_vec_run_twin_rust_async(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_vec_twin_rust_async_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::opaque_vec_twin_rust_async().await)
                    })().await)
                } })
}
fn wire_run_enum_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_enum_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_nested_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_nested_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_non_clone_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<RustOpaqueNom<NonCloneDataTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_clone = clone.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_non_clone_twin_rust_async(api_clone).await)
                    })().await)
                } })
}
fn wire_run_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_opaque_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_opaque_with_delay_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async::run_opaque_with_delay_twin_rust_async(api_opaque).await)
                    })().await)
                } })
}
fn wire_unwrap_rust_opaque_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinRustAsync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::rust_opaque_twin_rust_async::unwrap_rust_opaque_twin_rust_async(api_opaque).await
                    })().await)
                } })
}
fn wire_create_array_opaque_enum_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::create_array_opaque_enum_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_create_nested_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::create_nested_opaque_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_create_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::create_opaque_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_create_option_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::create_option_opaque_twin_rust_async_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_frb_generator_test_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::frb_generator_test_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_opaque_array_run_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[RustOpaqueMoi<HideDataTwinRustAsyncMoi>; 2]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::opaque_array_run_twin_rust_async_moi(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_array_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::opaque_array_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_opaque_vec_run_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_data = data.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::opaque_vec_run_twin_rust_async_moi(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_vec_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::opaque_vec_twin_rust_async_moi().await)
                    })().await)
                } })
}
fn wire_run_enum_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::run_enum_opaque_twin_rust_async_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_nested_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::run_nested_opaque_twin_rust_async_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_non_clone_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<RustOpaqueMoi<NonCloneDataTwinRustAsyncMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_clone = clone.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::run_non_clone_twin_rust_async_moi(api_clone).await)
                    })().await)
                } })
}
fn wire_run_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::run_opaque_twin_rust_async_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_opaque_with_delay_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::run_opaque_with_delay_twin_rust_async_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_unwrap_rust_opaque_twin_rust_async_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_rust_async_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_opaque = opaque.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::unwrap_rust_opaque_twin_rust_async_moi(api_opaque).await
                    })().await)
                } })
}
fn wire_create_array_opaque_enum_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::create_array_opaque_enum_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_create_nested_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::create_nested_opaque_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_create_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::create_opaque_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_create_option_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueNom<HideDataTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::create_option_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_frb_generator_test_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::frb_generator_test_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_opaque_array_run_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueNom<HideDataTwinRustAsyncSse>; 2]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::opaque_array_run_twin_rust_async_sse(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_array_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::opaque_array_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_opaque_vec_run_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueNom<HideDataTwinRustAsyncSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::opaque_vec_run_twin_rust_async_sse(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_vec_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::opaque_vec_twin_rust_async_sse().await)
                    })().await)
                } })
}
fn wire_run_enum_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::run_enum_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_nested_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::run_nested_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_non_clone_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueNom<NonCloneDataTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::run_non_clone_twin_rust_async_sse(api_clone).await)
                    })().await)
                } })
}
fn wire_run_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::run_opaque_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_opaque_with_delay_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::run_opaque_with_delay_twin_rust_async_sse(api_opaque).await)
                    })().await)
                } })
}
fn wire_unwrap_rust_opaque_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::unwrap_rust_opaque_twin_rust_async_sse(api_opaque).await
                    })().await)
                } })
}
fn wire_create_array_opaque_enum_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::create_array_opaque_enum_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_create_nested_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::create_nested_opaque_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_create_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::create_opaque_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_create_option_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::create_option_opaque_twin_rust_async_sse_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_frb_generator_test_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::frb_generator_test_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_opaque_array_run_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>; 2]>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::opaque_array_run_twin_rust_async_sse_moi(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_array_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::opaque_array_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_opaque_vec_run_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::opaque_vec_run_twin_rust_async_sse_moi(api_data).await)
                    })().await)
                } })
}
fn wire_opaque_vec_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::opaque_vec_twin_rust_async_sse_moi().await)
                    })().await)
                } })
}
fn wire_run_enum_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::run_enum_opaque_twin_rust_async_sse_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_nested_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::run_nested_opaque_twin_rust_async_sse_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_non_clone_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueMoi<NonCloneDataTwinRustAsyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::run_non_clone_twin_rust_async_sse_moi(api_clone).await)
                    })().await)
                } })
}
fn wire_run_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::run_opaque_twin_rust_async_sse_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_run_opaque_with_delay_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::run_opaque_with_delay_twin_rust_async_sse_moi(api_opaque).await)
                    })().await)
                } })
}
fn wire_unwrap_rust_opaque_twin_rust_async_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_rust_async_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::unwrap_rust_opaque_twin_rust_async_sse_moi(api_opaque).await
                    })().await)
                } })
}
fn wire_create_array_opaque_enum_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse::create_array_opaque_enum_twin_sse())
                    })())
                } })
}
fn wire_create_nested_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse::create_nested_opaque_twin_sse())
                    })())
                } })
}
fn wire_create_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::create_opaque_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_create_option_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueNom<HideDataTwinSse>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse::create_option_opaque_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_frb_generator_test_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse::frb_generator_test_twin_sse())
                    })())
                } })
}
fn wire_opaque_array_run_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueNom<HideDataTwinSse>; 2]>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::opaque_array_run_twin_sse(
                            api_data,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_array_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::opaque_array_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_vec_run_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueNom<HideDataTwinSse>>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::opaque_vec_run_twin_sse(
                            api_data,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_opaque_vec_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::opaque_vec_twin_sse(),
                    )
                })())
            }
        },
    )
}
fn wire_run_enum_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque =
                <crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::run_enum_opaque_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_nested_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque =
                <crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse>::sse_decode(
                    &mut deserializer,
                );
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::run_nested_opaque_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_non_clone_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueNom<NonCloneDataTwinSse>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::run_non_clone_twin_sse(
                            api_clone,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::rust_opaque_twin_sse::run_opaque_twin_sse(
                            api_opaque,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_run_opaque_with_delay_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse::run_opaque_with_delay_twin_sse(api_opaque))
                    })())
                } })
}
fn wire_unwrap_rust_opaque_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::rust_opaque_twin_sse::unwrap_rust_opaque_twin_sse(
                        api_opaque,
                    )
                })())
            }
        },
    )
}
fn wire_create_array_opaque_enum_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::create_array_opaque_enum_twin_sse_moi())
                    })())
                } })
}
fn wire_create_nested_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::create_nested_opaque_twin_sse_moi())
                    })())
                } })
}
fn wire_create_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::create_opaque_twin_sse_moi())
                    })())
                } })
}
fn wire_create_option_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueMoi<HideDataTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::create_option_opaque_twin_sse_moi(api_opaque))
                    })())
                } })
}
fn wire_frb_generator_test_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::frb_generator_test_twin_sse_moi())
                    })())
                } })
}
fn wire_opaque_array_run_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueMoi<HideDataTwinSseMoi>; 2]>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::opaque_array_run_twin_sse_moi(api_data))
                    })())
                } })
}
fn wire_opaque_array_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::opaque_array_twin_sse_moi())
                    })())
                } })
}
fn wire_opaque_vec_run_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueMoi<HideDataTwinSseMoi>>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::opaque_vec_run_twin_sse_moi(api_data))
                    })())
                } })
}
fn wire_opaque_vec_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::opaque_vec_twin_sse_moi())
                    })())
                } })
}
fn wire_run_enum_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::run_enum_opaque_twin_sse_moi(api_opaque))
                    })())
                } })
}
fn wire_run_nested_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::run_nested_opaque_twin_sse_moi(api_opaque))
                    })())
                } })
}
fn wire_run_non_clone_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueMoi<NonCloneDataTwinSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::run_non_clone_twin_sse_moi(api_clone))
                    })())
                } })
}
fn wire_run_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::run_opaque_twin_sse_moi(api_opaque))
                    })())
                } })
}
fn wire_run_opaque_with_delay_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sse_moi::run_opaque_with_delay_twin_sse_moi(api_opaque))
                    })())
                } })
}
fn wire_unwrap_rust_opaque_twin_sse_moi_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_sse_moi", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         crate::api::pseudo_manual::rust_opaque_twin_sse_moi::unwrap_rust_opaque_twin_sse_moi(api_opaque)
                    })())
                } })
}
fn wire_create_array_opaque_enum_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync::create_array_opaque_enum_twin_sync())
                })()) })
}
fn wire_create_nested_opaque_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync::create_nested_opaque_twin_sync())
                })()) })
}
fn wire_create_opaque_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::create_opaque_twin_sync(),
                )
            })())
        },
    )
}
fn wire_create_option_opaque_twin_sync_impl(
    opaque: impl CstDecode<Option<RustOpaqueNom<HideDataTwinSync>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync::create_option_opaque_twin_sync(api_opaque))
                })()) })
}
fn wire_frb_generator_test_twin_sync_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_generator_test_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::frb_generator_test_twin_sync(
                    ),
                )
            })())
        },
    )
}
fn wire_opaque_array_run_twin_sync_impl(
    data: impl CstDecode<[RustOpaqueNom<HideDataTwinSync>; 2]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_data = data.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_array_run_twin_sync(
                        api_data,
                    ),
                )
            })())
        },
    )
}
fn wire_opaque_array_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_array_twin_sync(),
                )
            })())
        },
    )
}
fn wire_opaque_vec_run_twin_sync_impl(
    data: impl CstDecode<Vec<RustOpaqueNom<HideDataTwinSync>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_data = data.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_vec_run_twin_sync(
                        api_data,
                    ),
                )
            })())
        },
    )
}
fn wire_opaque_vec_twin_sync_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::opaque_vec_twin_sync(),
                )
            })())
        },
    )
}
fn wire_run_enum_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::run_enum_opaque_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_run_nested_opaque_twin_sync_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::run_nested_opaque_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_run_non_clone_twin_sync_impl(
    clone: impl CstDecode<RustOpaqueNom<NonCloneDataTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_clone = clone.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::run_non_clone_twin_sync(
                        api_clone,
                    ),
                )
            })())
        },
    )
}
fn wire_run_opaque_twin_sync_impl(
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync::run_opaque_twin_sync(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_run_opaque_with_delay_twin_sync_impl(
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync::run_opaque_with_delay_twin_sync(api_opaque))
                })()) })
}
fn wire_unwrap_rust_opaque_twin_sync_impl(
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinSync>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                crate::api::pseudo_manual::rust_opaque_twin_sync::unwrap_rust_opaque_twin_sync(
                    api_opaque,
                )
            })())
        },
    )
}
fn wire_create_array_opaque_enum_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::create_array_opaque_enum_twin_sync_moi())
                })()) })
}
fn wire_create_nested_opaque_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::create_nested_opaque_twin_sync_moi())
                })()) })
}
fn wire_create_opaque_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::create_opaque_twin_sync_moi())
                })()) })
}
fn wire_create_option_opaque_twin_sync_moi_impl(
    opaque: impl CstDecode<Option<RustOpaqueMoi<HideDataTwinSyncMoi>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::create_option_opaque_twin_sync_moi(api_opaque))
                })()) })
}
fn wire_frb_generator_test_twin_sync_moi_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::frb_generator_test_twin_sync_moi())
                })()) })
}
fn wire_opaque_array_run_twin_sync_moi_impl(
    data: impl CstDecode<[RustOpaqueMoi<HideDataTwinSyncMoi>; 2]>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_data = data.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::opaque_array_run_twin_sync_moi(api_data))
                })()) })
}
fn wire_opaque_array_twin_sync_moi_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::opaque_array_twin_sync_moi())
                })()) })
}
fn wire_opaque_vec_run_twin_sync_moi_impl(
    data: impl CstDecode<Vec<RustOpaqueMoi<HideDataTwinSyncMoi>>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_data = data.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::opaque_vec_run_twin_sync_moi(api_data))
                })()) })
}
fn wire_opaque_vec_twin_sync_moi_impl() -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_sync_moi",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync_moi::opaque_vec_twin_sync_moi(
                    ),
                )
            })())
        },
    )
}
fn wire_run_enum_opaque_twin_sync_moi_impl(
    opaque: impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::run_enum_opaque_twin_sync_moi(api_opaque))
                })()) })
}
fn wire_run_nested_opaque_twin_sync_moi_impl(
    opaque: impl CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::run_nested_opaque_twin_sync_moi(api_opaque))
                })()) })
}
fn wire_run_non_clone_twin_sync_moi_impl(
    clone: impl CstDecode<RustOpaqueMoi<NonCloneDataTwinSyncMoi>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_clone = clone.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::run_non_clone_twin_sync_moi(api_clone))
                })()) })
}
fn wire_run_opaque_twin_sync_moi_impl(
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinSyncMoi>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_sync_moi",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync_moi::run_opaque_twin_sync_moi(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_run_opaque_with_delay_twin_sync_moi_impl(
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinSyncMoi>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_moi::run_opaque_with_delay_twin_sync_moi(api_opaque))
                })()) })
}
fn wire_unwrap_rust_opaque_twin_sync_moi_impl(
    opaque: impl CstDecode<RustOpaqueMoi<HideDataTwinSyncMoi>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_sync_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_opaque = opaque.cst_decode();
                transform_result_dco((move || {
                     crate::api::pseudo_manual::rust_opaque_twin_sync_moi::unwrap_rust_opaque_twin_sync_moi(api_opaque)
                })()) })
}
fn wire_create_array_opaque_enum_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::create_array_opaque_enum_twin_sync_sse())
                })()) })
}
fn wire_create_nested_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::create_nested_opaque_twin_sync_sse())
                })()) })
}
fn wire_create_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::create_opaque_twin_sync_sse())
                })()) })
}
fn wire_create_option_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueNom<HideDataTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::create_option_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_frb_generator_test_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::frb_generator_test_twin_sync_sse())
                })()) })
}
fn wire_opaque_array_run_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueNom<HideDataTwinSyncSse>; 2]>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::opaque_array_run_twin_sync_sse(api_data))
                })()) })
}
fn wire_opaque_array_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::opaque_array_twin_sync_sse())
                })()) })
}
fn wire_opaque_vec_run_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueNom<HideDataTwinSyncSse>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::opaque_vec_run_twin_sync_sse(api_data))
                })()) })
}
fn wire_opaque_vec_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync_sse::opaque_vec_twin_sync_sse(
                    ),
                )
            })())
        },
    )
}
fn wire_run_enum_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::run_enum_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_run_nested_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::run_nested_opaque_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_run_non_clone_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueNom<NonCloneDataTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::run_non_clone_twin_sync_sse(api_clone))
                })()) })
}
fn wire_run_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::rust_opaque_twin_sync_sse::run_opaque_twin_sync_sse(
                        api_opaque,
                    ),
                )
            })())
        },
    )
}
fn wire_run_opaque_with_delay_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse::run_opaque_with_delay_twin_sync_sse(api_opaque))
                })()) })
}
fn wire_unwrap_rust_opaque_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_opaque_twin_sync_sse::unwrap_rust_opaque_twin_sync_sse(api_opaque)
                })()) })
}
fn wire_create_array_opaque_enum_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_array_opaque_enum_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::create_array_opaque_enum_twin_sync_sse_moi())
                })()) })
}
fn wire_create_nested_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_nested_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::create_nested_opaque_twin_sync_sse_moi())
                })()) })
}
fn wire_create_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::create_opaque_twin_sync_sse_moi())
                })()) })
}
fn wire_create_option_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "create_option_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <Option<RustOpaqueMoi<HideDataTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::create_option_opaque_twin_sync_sse_moi(api_opaque))
                })()) })
}
fn wire_frb_generator_test_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "frb_generator_test_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::frb_generator_test_twin_sync_sse_moi())
                })()) })
}
fn wire_opaque_array_run_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_run_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <[RustOpaqueMoi<HideDataTwinSyncSseMoi>; 2]>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::opaque_array_run_twin_sync_sse_moi(api_data))
                })()) })
}
fn wire_opaque_array_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_array_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::opaque_array_twin_sync_sse_moi())
                })()) })
}
fn wire_opaque_vec_run_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_run_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<RustOpaqueMoi<HideDataTwinSyncSseMoi>>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::opaque_vec_run_twin_sync_sse_moi(api_data))
                })()) })
}
fn wire_opaque_vec_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "opaque_vec_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::opaque_vec_twin_sync_sse_moi())
                })()) })
}
fn wire_run_enum_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_enum_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::run_enum_opaque_twin_sync_sse_moi(api_opaque))
                })()) })
}
fn wire_run_nested_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_nested_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::run_nested_opaque_twin_sync_sse_moi(api_opaque))
                })()) })
}
fn wire_run_non_clone_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_non_clone_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_clone = <RustOpaqueMoi<NonCloneDataTwinSyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::run_non_clone_twin_sync_sse_moi(api_clone))
                })()) })
}
fn wire_run_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::run_opaque_twin_sync_sse_moi(api_opaque))
                })()) })
}
fn wire_run_opaque_with_delay_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "run_opaque_with_delay_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::run_opaque_with_delay_twin_sync_sse_moi(api_opaque))
                })()) })
}
fn wire_unwrap_rust_opaque_twin_sync_sse_moi_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "unwrap_rust_opaque_twin_sync_sse_moi", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_opaque = <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::unwrap_rust_opaque_twin_sync_sse_moi(api_opaque)
                })()) })
}
fn wire_simple_adder_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32>,
    b: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "simple_adder_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::simple_twin_rust_async::simple_adder_twin_rust_async(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_simple_adder_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "simple_adder_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <i32>::sse_decode(&mut deserializer);
let api_b = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::simple_twin_rust_async_sse::simple_adder_twin_rust_async_sse(api_a, api_b).await)
                    })().await)
                } })
}
fn wire_simple_adder_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <i32>::sse_decode(&mut deserializer);
            let api_b = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::simple_twin_sse::simple_adder_twin_sse(
                            api_a, api_b,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl CstDecode<i32>,
    b: impl CstDecode<i32>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::simple_twin_sync::simple_adder_twin_sync(
                        api_a, api_b,
                    ),
                )
            })())
        },
    )
}
fn wire_simple_adder_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <i32>::sse_decode(&mut deserializer);
            let api_b = <i32>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::simple_twin_sync_sse::simple_adder_twin_sync_sse(
                        api_a, api_b,
                    ),
                )
            })())
        },
    )
}
fn wire_func_stream_realistic_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_realistic_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <String>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_misc_twin_sse::func_stream_realistic_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>()), api_arg))
                    })())
                } })
}
fn wire_func_stream_return_error_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_error_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::stream_twin_rust_async::func_stream_return_error_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_func_stream_return_panic_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_panic_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::stream_twin_rust_async::func_stream_return_panic_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_func_stream_sink_arg_position_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32>,
    b: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_sink_arg_position_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::func_stream_sink_arg_position_twin_rust_async(api_a, api_b, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_of_struct_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_of_struct_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || {  move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_of_struct_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_1_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_1_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_1_twin_rust_async(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_2_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_2_twin_rust_async(api_key, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>()), api_max).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_3_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_3_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { let api_key = key.cst_decode();let api_max = max.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async::handle_stream_sink_at_3_twin_rust_async(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>()), api_key, api_max).await)
                    })().await)
                } })
}
fn wire_func_stream_return_error_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_error_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::stream_twin_rust_async_sse::func_stream_return_error_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_func_stream_return_panic_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_return_panic_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         crate::api::pseudo_manual::stream_twin_rust_async_sse::func_stream_return_panic_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,String>())).await
                    })().await)
                } })
}
fn wire_func_stream_sink_arg_position_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_sink_arg_position_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <u32>::sse_decode(&mut deserializer);
let api_b = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async_sse::func_stream_sink_arg_position_twin_rust_async_sse(api_a, api_b, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_of_struct_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_of_struct_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async_sse::handle_stream_of_struct_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_1_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_1_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async_sse::handle_stream_sink_at_1_twin_rust_async_sse(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse>())).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_2_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_2_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async_sse::handle_stream_sink_at_2_twin_rust_async_sse(api_key, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse>()), api_max).await)
                    })().await)
                } })
}
fn wire_handle_stream_sink_at_3_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_3_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_rust_async_sse::handle_stream_sink_at_3_twin_rust_async_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse>()), api_key, api_max).await)
                    })().await)
                } })
}
fn wire_func_stream_return_error_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_error_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::stream_twin_sse::func_stream_return_error_twin_sse(
                        StreamSink::new(context.rust2dart_context().stream_sink::<_, String>()),
                    )
                })())
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_panic_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    crate::api::pseudo_manual::stream_twin_sse::func_stream_return_panic_twin_sse(
                        StreamSink::new(context.rust2dart_context().stream_sink::<_, String>()),
                    )
                })())
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_stream_sink_arg_position_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_a = <u32>::sse_decode(&mut deserializer);
let api_b = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_sse::func_stream_sink_arg_position_twin_sse(api_a, api_b, StreamSink::new(context.rust2dart_context().stream_sink::<_,u32>())))
                    })())
                } })
}
fn wire_handle_stream_of_struct_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_of_struct_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_sse::handle_stream_of_struct_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse>())))
                    })())
                } })
}
fn wire_handle_stream_sink_at_1_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_1_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_sse::handle_stream_sink_at_1_twin_sse(api_key, api_max, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_sse::LogTwinSse>())))
                    })())
                } })
}
fn wire_handle_stream_sink_at_2_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_2_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_sse::handle_stream_sink_at_2_twin_sse(api_key, StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_sse::LogTwinSse>()), api_max))
                    })())
                } })
}
fn wire_handle_stream_sink_at_3_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_stream_sink_at_3_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_key = <u32>::sse_decode(&mut deserializer);
let api_max = <u32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::stream_twin_sse::handle_stream_sink_at_3_twin_sse(StreamSink::new(context.rust2dart_context().stream_sink::<_,crate::api::pseudo_manual::stream_twin_sse::LogTwinSse>()), api_key, api_max))
                    })())
                } })
}
fn wire_func_struct_with_one_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_one_field_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_two_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_two_field_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_zero_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_struct_with_zero_field_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_tuple_struct_with_one_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_tuple_struct_with_one_field_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_tuple_struct_with_two_field_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async::func_tuple_struct_with_two_field_twin_rust_async(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_one_field_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async_sse::func_struct_with_one_field_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_two_field_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async_sse::func_struct_with_two_field_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_zero_field_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async_sse::func_struct_with_zero_field_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_tuple_struct_with_one_field_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async_sse::func_tuple_struct_with_one_field_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_tuple_struct_with_two_field_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_rust_async_sse::func_tuple_struct_with_two_field_twin_rust_async_sse(api_arg).await)
                    })().await)
                } })
}
fn wire_func_struct_with_one_field_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sse::func_struct_with_one_field_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_struct_with_two_field_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sse::func_struct_with_two_field_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_struct_with_zero_field_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sse::func_struct_with_zero_field_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_tuple_struct_with_one_field_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sse::func_tuple_struct_with_one_field_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_tuple_struct_with_two_field_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sse::func_tuple_struct_with_two_field_twin_sse(api_arg))
                    })())
                } })
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_one_field_twin_sync(api_arg))
                })()) })
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_two_field_twin_sync(api_arg))
                })()) })
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_struct_with_zero_field_twin_sync(api_arg))
                })()) })
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_one_field_twin_sync(api_arg))
                })()) })
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_arg = arg.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync::func_tuple_struct_with_two_field_twin_sync(api_arg))
                })()) })
}
fn wire_func_struct_with_one_field_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_one_field_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync_sse::func_struct_with_one_field_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_struct_with_two_field_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_two_field_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync_sse::func_struct_with_two_field_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_struct_with_zero_field_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_struct_with_zero_field_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync_sse::func_struct_with_zero_field_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_tuple_struct_with_one_field_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_one_field_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync_sse::func_tuple_struct_with_one_field_twin_sync_sse(api_arg))
                })()) })
}
fn wire_func_tuple_struct_with_two_field_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "func_tuple_struct_with_two_field_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_arg = <crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::structure_twin_sync_sse::func_tuple_struct_with_two_field_twin_sync_sse(api_arg))
                })()) })
}
fn wire_test_tuple_2_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Vec<(String, i32)>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_tuple_2_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_value = value.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::tuple_twin_rust_async::test_tuple_2_twin_rust_async(api_value).await)
                    })().await)
                } })
}
fn wire_test_tuple_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Option<(String, i32)>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_tuple_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_value = value.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::tuple_twin_rust_async::test_tuple_twin_rust_async(api_value).await)
                    })().await)
                } })
}
fn wire_test_tuple_2_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_tuple_2_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Vec<(String,i32,)>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::tuple_twin_rust_async_sse::test_tuple_2_twin_rust_async_sse(api_value).await)
                    })().await)
                } })
}
fn wire_test_tuple_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_tuple_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Option<(String,i32,)>>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::tuple_twin_rust_async_sse::test_tuple_twin_rust_async_sse(api_value).await)
                    })().await)
                } })
}
fn wire_test_tuple_2_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Vec<(String, i32)>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::tuple_twin_sse::test_tuple_2_twin_sse(api_value),
                    )
                })())
            }
        },
    )
}
fn wire_test_tuple_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_sse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Option<(String, i32)>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse((move || {
                    Result::<_, ()>::Ok(
                        crate::api::pseudo_manual::tuple_twin_sse::test_tuple_twin_sse(api_value),
                    )
                })())
            }
        },
    )
}
fn wire_test_tuple_2_twin_sync_impl(
    value: impl CstDecode<Vec<(String, i32)>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_sync::test_tuple_2_twin_sync(api_value),
                )
            })())
        },
    )
}
fn wire_test_tuple_twin_sync_impl(
    value: impl CstDecode<Option<(String, i32)>>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_value = value.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_sync::test_tuple_twin_sync(api_value),
                )
            })())
        },
    )
}
fn wire_test_tuple_2_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Vec<(String, i32)>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_sync_sse::test_tuple_2_twin_sync_sse(
                        api_value,
                    ),
                )
            })())
        },
    )
}
fn wire_test_tuple_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_sync_sse",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_value = <Option<(String, i32)>>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::tuple_twin_sync_sse::test_tuple_twin_sync_sse(
                        api_value,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_type_alias_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_alias_id_twin_rust_async(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_alias_model_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_alias_model_twin_rust_async(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_nest_alias_id_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_input = input.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async::handle_type_nest_alias_id_twin_rust_async(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_alias_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async_sse::handle_type_alias_id_twin_rust_async_sse(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_alias_model_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async_sse::handle_type_alias_model_twin_rust_async_sse(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_nest_alias_id_twin_rust_async_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_rust_async_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context| async move {
                    transform_result_sse((move || async move {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_rust_async_sse::handle_type_nest_alias_id_twin_rust_async_sse(api_input).await)
                    })().await)
                } })
}
fn wire_handle_type_alias_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_id_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sse::handle_type_alias_id_twin_sse(api_input))
                    })())
                } })
}
fn wire_handle_type_alias_model_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sse::handle_type_alias_model_twin_sse(api_input))
                    })())
                } })
}
fn wire_handle_type_nest_alias_id_twin_sse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_sse", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse((move ||  {
                         Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sse::handle_type_nest_alias_id_twin_sse(api_input))
                    })())
                } })
}
fn wire_handle_type_alias_id_twin_sync_impl(
    input: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_id_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::pseudo_manual::type_alias_twin_sync::handle_type_alias_id_twin_sync(
                        api_input,
                    ),
                )
            })())
        },
    )
}
fn wire_handle_type_alias_model_twin_sync_impl(
    input: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_input = input.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync::handle_type_alias_model_twin_sync(api_input))
                })()) })
}
fn wire_handle_type_nest_alias_id_twin_sync_impl(
    input: impl CstDecode<u64>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_sync", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { let api_input = input.cst_decode();
                transform_result_dco((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync::handle_type_nest_alias_id_twin_sync(api_input))
                })()) })
}
fn wire_handle_type_alias_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_id_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync_sse::handle_type_alias_id_twin_sync_sse(api_input))
                })()) })
}
fn wire_handle_type_alias_model_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_alias_model_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync_sse::handle_type_alias_model_twin_sync_sse(api_input))
                })()) })
}
fn wire_handle_type_nest_alias_id_twin_sync_sse_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_type_nest_alias_id_twin_sync_sse", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_input = <u64>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse((move || {
                     Result::<_,()>::Ok(crate::api::pseudo_manual::type_alias_twin_sync_sse::handle_type_nest_alias_id_twin_sync_sse(api_input))
                })()) })
}
fn wire_handle_nested_uuids_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ids: impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_nested_uuids_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_ids = ids.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::uuid_type_twin_rust_async::handle_nested_uuids_twin_rust_async(api_ids).await
                    })().await)
                } })
}
fn wire_handle_uuid_twin_rust_async_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<uuid::Uuid>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec,_,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "handle_uuid_twin_rust_async", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_id = id.cst_decode(); move |context| async move {
                    transform_result_dco((move || async move {
                         crate::api::pseudo_manual::uuid_type_twin_rust_async::handle_uuid_twin_rust_async(api_id).await
                    })().await)
                } })
}
fn wire_handle_nested_uuids_twin_sync_impl(
    ids: impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_uuids_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_ids = ids.cst_decode();
            transform_result_dco((move || {
                crate::api::pseudo_manual::uuid_type_twin_sync::handle_nested_uuids_twin_sync(
                    api_ids,
                )
            })())
        },
    )
}
fn wire_handle_uuid_twin_sync_impl(
    id: impl CstDecode<uuid::Uuid>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_uuid_twin_sync",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_id = id.cst_decode();
            transform_result_dco((move || {
                crate::api::pseudo_manual::uuid_type_twin_sync::handle_uuid_twin_sync(api_id)
            })())
        },
    )
}
fn wire_test_more_than_just_one_raw_string_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "test_more_than_just_one_raw_string_struct_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::raw_string::test_more_than_just_one_raw_string_struct_twin_normal())
                    })())
                } })
}
fn wire_test_raw_string_item_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_raw_string_item_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::raw_string::test_raw_string_item_struct_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_borrow_twin_normal(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_that = api_that.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_mut_borrow_twin_normal(&mut api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<NonCloneSimpleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_arg_own_twin_normal(api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_getter_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_getter_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_getter_twin_normal(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_that = that.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_that = api_that.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::instance_method_return_own_twin_normal(&api_that))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_new_custom_name_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::new_custom_name_twin_normal())
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_new_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "NonCloneSimpleTwinNormal_new_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::new_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_NonCloneSimpleTwinNormal_new_with_result_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_new_with_result_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::new_with_result_twin_normal()
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_borrow_twin_normal(&api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_mut_borrow_twin_normal(&mut api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_arg_own_twin_normal(api_arg))
                    })())
                } })
}
fn wire_NonCloneSimpleTwinNormal_static_method_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::NonCloneSimpleTwinNormal::static_method_return_own_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_borrow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let api_arg = api_arg.rust_auto_opaque_decode_ref();
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_arg_borrow_twin_normal(
                            &api_arg, api_expect,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
    expect: impl CstDecode<i32>,
    adder: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_mut_borrow_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            let api_adder = adder.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_arg_mut_borrow_twin_normal(
                            &mut api_arg,
                            api_expect,
                            api_adder,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_arg_own_and_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_arg_own_and_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_arg_own_and_return_own_twin_normal(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<NonCloneSimpleTwinNormal>,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_arg_own_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_arg_own_twin_normal(
                            api_arg, api_expect,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_borrow_and_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
    b: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_a = api_a.rust_auto_opaque_decode_ref();
let api_b = api_b.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_borrow_and_borrow_twin_normal(&api_a, &api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_borrow_and_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
    mut_borrow: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_borrow_and_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_borrow = borrow.cst_decode();let api_mut_borrow = mut_borrow.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_borrow = api_borrow.rust_auto_opaque_decode_ref();
let mut api_mut_borrow = api_mut_borrow.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_borrow_and_mut_borrow_twin_normal(&api_borrow, &mut api_mut_borrow))
                    })())
                } })
}
fn wire_rust_auto_opaque_callable_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn Fn(String) -> String + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_callable_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_callable_arg_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_callable_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_callable_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_callable_return_twin_normal(
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_explicit_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    >,
    expect: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_explicit_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            let api_expect = expect.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_explicit_arg_twin_normal(
                            api_arg, api_expect,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_explicit_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_explicit_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_initial = initial.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_explicit_return_twin_normal(
                            api_initial,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_explicit_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_explicit_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_explicit_struct_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_normal_and_opaque_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinNormal>,
    b: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_normal_and_opaque_arg_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_a = a.cst_decode();let api_b = b.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_normal_and_opaque_arg_twin_normal(api_a, api_b))
                    })())
                } })
}
fn wire_rust_auto_opaque_plus_sign_arg_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn MyTraitTwinNormal + Send + Sync>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_plus_sign_arg_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_plus_sign_arg_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_plus_sign_return_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_plus_sign_return_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_plus_sign_return_twin_normal(
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_return_opaque_one_and_two_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_one_and_two_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_return_opaque_one_and_two_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_opaque_two_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_return_opaque_two_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_return_opaque_two_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    initial: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_return_own_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_initial = initial.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_return_own_twin_normal(
                            api_initial,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinNormal,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal(&api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinNormal,
            >,
        >,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal(&mut api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<StructWithGoodAndOpaqueFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal(api_arg))
                    })())
                } })
}
fn wire_rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let api_arg = api_arg.rust_auto_opaque_decode_ref();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_borrow_twin_normal(&api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >,
    >,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                        let mut api_arg = api_arg.rust_auto_opaque_decode_ref_mut();
 Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal(&mut api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_arg_own_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<Box<dyn HelloTraitTwinNormal>>,
    expect: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_arg_own_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_arg = arg.cst_decode();let api_expect = expect.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_arg_own_twin_normal(api_arg, api_expect))
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_one_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_one_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_return_own_one_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_trait_object_return_own_two_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "rust_auto_opaque_trait_object_return_own_two_twin_normal", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         Result::<_,()>::Ok(crate::api::rust_auto_opaque::rust_auto_opaque_trait_object_return_own_two_twin_normal())
                    })())
                } })
}
fn wire_rust_auto_opaque_two_args_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<NonCloneSimpleTwinNormal>,
    b: impl CstDecode<NonCloneSimpleTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_auto_opaque_two_args_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_auto_opaque::rust_auto_opaque_two_args_twin_normal(
                            api_a, api_b,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_create_array_opaque_enum_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_array_opaque_enum_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::rust_opaque::create_array_opaque_enum_twin_normal(),
                    )
                })())
            }
        },
    )
}
fn wire_create_nested_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_nested_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::create_nested_opaque_twin_normal())
                })())
            }
        },
    )
}
fn wire_create_opaque_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::create_opaque_twin_normal())
                })())
            }
        },
    )
}
fn wire_create_option_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<Option<RustOpaqueNom<HideDataTwinNormal>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_option_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::create_option_opaque_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_frb_generator_test_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_generator_test_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::frb_generator_test_twin_normal())
                })())
            }
        },
    )
}
fn wire_opaque_array_run_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<[RustOpaqueNom<HideDataTwinNormal>; 2]>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_run_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_array_run_twin_normal(
                        api_data,
                    ))
                })())
            }
        },
    )
}
fn wire_opaque_array_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_array_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_array_twin_normal())
                })())
            }
        },
    )
}
fn wire_opaque_vec_run_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    data: impl CstDecode<Vec<RustOpaqueNom<HideDataTwinNormal>>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_run_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_vec_run_twin_normal(
                        api_data,
                    ))
                })())
            }
        },
    )
}
fn wire_opaque_vec_twin_normal_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "opaque_vec_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::opaque_vec_twin_normal())
                })())
            }
        },
    )
}
fn wire_run_enum_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_enum_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::run_enum_opaque_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_run_nested_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_nested_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::run_nested_opaque_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_run_non_clone_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    clone: impl CstDecode<RustOpaqueNom<NonCloneDataTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_non_clone_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_clone = clone.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::run_non_clone_twin_normal(
                        api_clone,
                    ))
                })())
            }
        },
    )
}
fn wire_run_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::run_opaque_twin_normal(api_opaque))
                })())
            }
        },
    )
}
fn wire_run_opaque_with_delay_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "run_opaque_with_delay_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::rust_opaque::run_opaque_with_delay_twin_normal(
                        api_opaque,
                    ))
                })())
            }
        },
    )
}
fn wire_unwrap_rust_opaque_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    opaque: impl CstDecode<RustOpaqueNom<HideDataTwinNormal>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unwrap_rust_opaque_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::rust_opaque::unwrap_rust_opaque_twin_normal(api_opaque)
                })())
            }
        },
    )
}
fn wire_frb_sync_generator_test_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "frb_sync_generator_test_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::rust_opaque_sync::frb_sync_generator_test_twin_normal(),
                )
            })())
        },
    )
}
fn wire_sync_create_non_clone_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_create_non_clone_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(
                    crate::api::rust_opaque_sync::sync_create_non_clone_twin_normal(),
                )
            })())
        },
    )
}
fn wire_sync_create_opaque_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_create_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::api::rust_opaque_sync::sync_create_opaque_twin_normal())
            })())
        },
    )
}
fn wire_sync_option_rust_opaque_twin_normal_impl(
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync_option_rust_opaque_twin_normal",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            transform_result_dco((move || {
                crate::api::rust_opaque_sync::sync_option_rust_opaque_twin_normal()
            })())
        },
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<i32>,
    b: impl CstDecode<i32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::simple_adder_twin_normal(api_a, api_b))
                })())
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::stream::func_stream_return_error_twin_normal(StreamSink::new(
                        context.rust2dart_context().stream_sink::<_, String>(),
                    ))
                })())
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::stream::func_stream_return_panic_twin_normal(StreamSink::new(
                        context.rust2dart_context().stream_sink::<_, String>(),
                    ))
                })())
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    a: impl CstDecode<u32>,
    b: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_a = a.cst_decode();
            let api_b = b.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::stream::func_stream_sink_arg_position_twin_normal(
                            api_a,
                            api_b,
                            StreamSink::new(context.rust2dart_context().stream_sink::<_, u32>()),
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_handle_stream_of_struct_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_of_struct_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::stream::handle_stream_of_struct_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::stream::MyStreamEntryTwinNormal>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_handle_stream_sink_at_1_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_1_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::stream::handle_stream_sink_at_1_twin_normal(
                        api_key,
                        api_max,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                        ),
                    ))
                })())
            }
        },
    )
}
fn wire_handle_stream_sink_at_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::stream::handle_stream_sink_at_2_twin_normal(
                        api_key,
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                        ),
                        api_max,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_stream_sink_at_3_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    key: impl CstDecode<u32>,
    max: impl CstDecode<u32>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_stream_sink_at_3_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_key = key.cst_decode();
            let api_max = max.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::stream::handle_stream_sink_at_3_twin_normal(
                        StreamSink::new(
                            context
                                .rust2dart_context()
                                .stream_sink::<_, crate::api::stream::LogTwinNormal>(),
                        ),
                        api_key,
                        api_max,
                    ))
                })())
            }
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::stream_misc::func_stream_realistic_twin_normal(
                        StreamSink::new(context.rust2dart_context().stream_sink::<_, String>()),
                        api_arg,
                    ))
                })())
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_one_field_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_two_field_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_struct_with_zero_field_twin_normal(api_arg),
                    )
                })())
            }
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_tuple_struct_with_one_field_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    arg: impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::structure::func_tuple_struct_with_two_field_twin_normal(
                            api_arg,
                        ),
                    )
                })())
            }
        },
    )
}
fn wire_test_tuple_2_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Vec<(String, i32)>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_2_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::tuple::test_tuple_2_twin_normal(api_value))
                })())
            }
        },
    )
}
fn wire_test_tuple_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    value: impl CstDecode<Option<(String, i32)>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "test_tuple_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_value = value.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::tuple::test_tuple_twin_normal(api_value))
                })())
            }
        },
    )
}
fn wire_handle_type_alias_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::type_alias::handle_type_alias_id_twin_normal(
                        api_input,
                    ))
                })())
            }
        },
    )
}
fn wire_handle_type_alias_model_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_alias_model_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::type_alias::handle_type_alias_model_twin_normal(api_input),
                    )
                })())
            }
        },
    )
}
fn wire_handle_type_nest_alias_id_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<u64>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_type_nest_alias_id_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(
                        crate::api::type_alias::handle_type_nest_alias_id_twin_normal(api_input),
                    )
                })())
            }
        },
    )
}
fn wire_handle_nested_uuids_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ids: impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_nested_uuids_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::uuid_type::handle_nested_uuids_twin_normal(api_ids)
                })())
            }
        },
    )
}
fn wire_handle_uuid_twin_normal_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<uuid::Uuid>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "handle_uuid_twin_normal",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::uuid_type::handle_uuid_twin_normal(api_id)
                })())
            }
        },
    )
}

// Section: wrapper_structs

#[derive(Clone)]
pub struct mirror_ApplicationEnv(crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv);

#[derive(Clone)]
pub struct mirror_ApplicationEnvVar(
    crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar,
);

#[derive(Clone)]
pub struct mirror_ApplicationMessage(
    crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage,
);

#[derive(Clone)]
pub struct mirror_ApplicationMode(crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode);

#[derive(Clone)]
pub struct mirror_ApplicationSettings(
    crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
);

#[derive(Clone)]
pub struct mirror_ListOfNestedRawStringMirrored(
    crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored,
);

#[derive(Clone)]
pub struct mirror_NestedRawStringMirrored(
    crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored,
);

#[derive(Clone)]
pub struct mirror_Numbers(crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers);

#[derive(Clone)]
pub struct mirror_RawStringEnumMirrored(
    crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
);

#[derive(Clone)]
pub struct mirror_RawStringMirrored(
    crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored,
);

#[derive(Clone)]
pub struct mirror_Sequences(crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences);

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let ApplicationEnv =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>.unwrap();
        let _: Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> =
            ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage>.unwrap() {
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
            field0,
        ) => {
            let _: String = field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
            x,
            y,
        } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit => {}
    }
    {
        let ApplicationSettings =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode =
            ApplicationSettings.mode;
        let _: Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> =
            ApplicationSettings.env;
        let _: Option<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> =
            ApplicationSettings.env_optional;
    }
    {
        let ListOfNestedRawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
                .unwrap();
        let _: Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> =
            ListOfNestedRawStringMirrored.raw;
    }
    {
        let NestedRawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
                .unwrap();
        let _: crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored =
            NestedRawStringMirrored.raw;
    }
    {
        let Numbers_ = None::<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>.unwrap();
        let _: Vec<i32> = Numbers_.0;
    }
    match None::<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>.unwrap() {
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(field0) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored = field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(field0) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored =
                field0;
        }
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(
            field0,
        ) => {
            let _: crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored =
                field0;
        }
    }
    {
        let RawStringMirrored =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>.unwrap();
        let _: String = RawStringMirrored.value;
    }
    {
        let Sequences_ =
            None::<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>.unwrap();
        let _: Vec<i32> = Sequences_.0;
    }
};

// Section: related_funcs

fn decode_DartFn_Inputs_DartOpaque_Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(flutter_rust_bridge::DartOpaque) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: flutter_rust_bridge::DartOpaque,
    ) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: flutter_rust_bridge::DartOpaque| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: String) -> () {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: String| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    String,
    crate::api::dart_fn::DemoStructForRustCallDartTwinNormal,
) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: crate::api::dart_fn::DemoStructForRustCallDartTwinNormal,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: String, arg1: crate::api::dart_fn::DemoStructForRustCallDartTwinNormal| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
fn decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    String,
    crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: String, arg1: crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync| {
                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
                            dart_opaque.clone(), arg0, arg1
                        ))
                    }
}fn decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_sse_Output_unit(
                    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(String, crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse) -> flutter_rust_bridge::DartFnFuture<()>{
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: String, arg1: crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse| {
                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
                            dart_opaque.clone(), arg0, arg1
                        ))
                    }
}
fn decode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_sse_Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    String,
    crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
) -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: String,
        arg1: crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
    ) -> () {
        let args = vec![
            arg0.into_into_dart().into_dart(),
            arg1.into_into_dart().into_dart(),
        ];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move |arg0: String,
          arg1: crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
            arg1,
        ))
    }
}
fn decode_DartFn_Inputs__Output_DartOpaque(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<flutter_rust_bridge::DartOpaque> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> flutter_rust_bridge::DartOpaque {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <flutter_rust_bridge::DartOpaque>::sse_decode_single(message)
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}
fn decode_DartFn_Inputs__Output_String(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<String> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> String {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <String>::sse_decode_single(message)
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}
fn decode_DartFn_Inputs__Output_unit(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn() -> flutter_rust_bridge::DartFnFuture<()> {
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque) -> () {
        let args = vec![];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <()>::sse_decode_single(message)
    }

    move || {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(dart_opaque.clone()))
    }
}
fn decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    crate::api::dart_fn::DemoStructForRustCallDartTwinNormal,
) -> flutter_rust_bridge::DartFnFuture<
    crate::api::dart_fn::DemoStructForRustCallDartTwinNormal,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::dart_fn::DemoStructForRustCallDartTwinNormal,
    ) -> crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <crate::api::dart_fn::DemoStructForRustCallDartTwinNormal>::sse_decode_single(message)
    }

    move |arg0: crate::api::dart_fn::DemoStructForRustCallDartTwinNormal| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
fn decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
) -> flutter_rust_bridge::DartFnFuture<
    crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
    ) -> crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
    {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync>::sse_decode_single(message)
    }

    move |arg0: crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync| {
                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
                            dart_opaque.clone(), arg0
                        ))
                    }
}fn decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_sse_Output_demo_struct_for_rust_call_dart_twin_rust_async_sse(
                    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse) -> flutter_rust_bridge::DartFnFuture<crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse>{
    use flutter_rust_bridge::IntoDart;

    async fn body(dart_opaque: flutter_rust_bridge::DartOpaque, arg0: crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse) -> crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse{
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse>::sse_decode_single(message)
    }

    move |arg0: crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse| {
                        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
                            dart_opaque.clone(), arg0
                        ))
                    }
}
fn decode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_sse_Output_demo_struct_for_rust_call_dart_twin_sse(
    dart_opaque: flutter_rust_bridge::DartOpaque,
) -> impl Fn(
    crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
) -> flutter_rust_bridge::DartFnFuture<
    crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
> {
    use flutter_rust_bridge::IntoDart;

    async fn body(
        dart_opaque: flutter_rust_bridge::DartOpaque,
        arg0: crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
    ) -> crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
        let args = vec![arg0.into_into_dart().into_dart()];
        let message = FLUTTER_RUST_BRIDGE_HANDLER
            .dart_fn_invoke(dart_opaque, args)
            .await;
        <crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse>::sse_decode_single(message)
    }

    move |arg0: crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse| {
        flutter_rust_bridge::for_generated::convert_into_dart_fn_future(body(
            dart_opaque.clone(),
            arg0,
        ))
    }
}
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinRustAsyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinRustAsyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinSyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Box<dyn DartDebugTwinSyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinRustAsyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinRustAsyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinSyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueReturnTwinSyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueSyncReturnTwinMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(FrbOpaqueSyncReturnTwinSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataAnotherTwinMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataAnotherTwinSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinRustAsyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinRustAsyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinSyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(HideDataTwinSyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinRustAsyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinRustAsyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinSyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(Mutex<HideDataTwinSyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinRustAsyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinRustAsyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinSyncMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(NonCloneDataTwinSyncSseMoi);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinRustAsyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinRustAsyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinSyncMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(RwLock<HideDataTwinSyncSseMoi>);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn Fn(String) -> String + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncSseMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn MyTraitTwinMoi + Send + Sync>>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn MyTraitTwinSseMoi + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSseMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSyncMoi>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::rust_async::RwLock<
        StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
    >
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(i16);

// Section: dart2rust

impl CstDecode<chrono::DateTime<chrono::Local>> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::DateTime<chrono::Local> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(
            chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
                chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                    .expect("invalid or out-of-range datetime"),
                chrono::Utc,
            ),
        )
    }
}
impl CstDecode<chrono::NaiveDateTime> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::NaiveDateTime {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        let flutter_rust_bridge::for_generated::Timestamp { s, ns } =
            flutter_rust_bridge::for_generated::decode_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode {
        match self {
            0 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Standalone,
            1 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
        match self {
            0 => crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Apple,
            1 => crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinNormal: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
    for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync {
        match self {
            0 => crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Apple,
1 => crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
        match self {
            0 => crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Apple,
            1 => crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinSync: {}", self),
        }
    }
}
impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::api::enumeration::EnumSimpleTwinNormal> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        match self {
            0 => crate::api::enumeration::EnumSimpleTwinNormal::A,
            1 => crate::api::enumeration::EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>
    for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithDiscriminantTwinNormal> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::enumeration::EnumWithDiscriminantTwinNormal {
        match self {
            0 => crate::api::enumeration::EnumWithDiscriminantTwinNormal::OneHundred,
            1 => crate::api::enumeration::EnumWithDiscriminantTwinNormal::Fifty,
            _ => unreachable!(
                "Invalid variant for EnumWithDiscriminantTwinNormal: {}",
                self
            ),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync,
    > for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
    {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync>
    for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync {
        match self {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinSync: {}", self),
        }
    }
}
impl CstDecode<f32> for f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<f64> for f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<i16> for i16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i16 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<i8> for i8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i8 {
        self
    }
}
impl CstDecode<isize> for isize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> isize {
        self
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyEnum> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyEnum {
        match self {
            0 => crate::auxiliary::sample_types::MyEnum::False,
            1 => crate::auxiliary::sample_types::MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        match self {
            0 => crate::api::misc_example::WeekdaysTwinNormal::Monday,
            1 => crate::api::misc_example::WeekdaysTwinNormal::Tuesday,
            2 => crate::api::misc_example::WeekdaysTwinNormal::Wednesday,
            3 => crate::api::misc_example::WeekdaysTwinNormal::Thursday,
            4 => crate::api::misc_example::WeekdaysTwinNormal::Friday,
            5 => crate::api::misc_example::WeekdaysTwinNormal::Saturday,
            6 => crate::api::misc_example::WeekdaysTwinNormal::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinNormal: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for i32
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        match self {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinRustAsync: {}", self),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        match self {
            0 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Monday,
            1 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Tuesday,
            2 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Wednesday,
            3 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Thursday,
            4 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Friday,
            5 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Saturday,
            6 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSync: {}", self),
        }
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(AnyhowException) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for Box<dyn Fn(String) -> String + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSse>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSseMoi>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn HelloTraitTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinSyncSseMoi>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinNormal + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinRustAsync + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinRustAsyncSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSseMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSse + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSyncMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSync + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSyncSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for Box<dyn MyTraitTwinSyncSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSse + Send + Sync>,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleTwinRustAsyncSseMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for NonCloneSimpleTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueOneTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for OpaqueTwoTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructInMiscNoTwinExampleA {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinNormal,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsync,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSse,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSseMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSync,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSse,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for StructWithGoodAndOpaqueFieldTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
            >,
        >>::sse_decode(deserializer);
        return inner.rust_auto_opaque_decode_owned();
    }
}

impl SseDecode for backtrace::Backtrace {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Backtrace) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Time(Duration)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for chrono::DateTime<chrono::Local> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Time(Local)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Time(Naive)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Time(Utc)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { flutter_rust_bridge::for_generated::sse_decode_dart_opaque(inner) };
    }
}

impl SseDecode for [flutter_rust_bridge::DartOpaque; 1] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<flutter_rust_bridge::DartOpaque>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)>>::sse_decode(
            deserializer,
        );
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)>>::sse_decode(
            deserializer,
        );
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(String, Vec<u8>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<String, crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(String, crate::auxiliary::sample_types::MySize)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, String)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>>::sse_decode(
                deserializer,
            );
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
        )>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, bool)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, f32)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, f64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, i16)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, i32)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, i64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, i8)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, isize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, isize)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, Vec<u8>)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, u16)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, u32)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, u64)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, u8)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashMap<i32, usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<(i32, usize)>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Box<dyn DartDebugTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Box<dyn DartDebugTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueReturnTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueReturnTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueSyncReturnTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueSyncReturnTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<FrbOpaqueSyncReturnTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<FrbOpaqueSyncReturnTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<HideDataAnotherTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataAnotherTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<HideDataAnotherTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataAnotherTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinNormal>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinNormal>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinRustAsyncMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinRustAsyncSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinRustAsyncSse>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinRustAsync>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinRustAsync>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinSseMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinSse>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinSyncMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinSyncMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueNom<HideDataTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<HideDataTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for [RustOpaqueMoi<HideDataTwinSyncSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueMoi<HideDataTwinSyncSseMoi>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinSyncSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinSyncSse>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [RustOpaqueNom<HideDataTwinSync>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<RustOpaqueNom<HideDataTwinSync>>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<Mutex<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<Mutex<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<NonCloneDataTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<NonCloneDataTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<RwLock<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<RwLock<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn HelloTraitTwinRustAsyncSseMoi>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinNormal + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsync + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSync + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinNormal,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsync,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSync,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for RustOpaqueMoi<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for RustOpaqueNom<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode for std::collections::HashSet<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<String>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for std::collections::HashSet<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<i32>>::sse_decode(deserializer);
        return inner.into_iter().collect();
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Delegate(Uuid) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for crate::api::misc_example::ATwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::misc_example::ATwinNormal { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse { a: var_a };
    }
}

impl SseDecode for crate::api::misc_example::AbcTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::api::misc_example::ATwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::A(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::api::misc_example::BTwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::B(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::api::misc_example::CTwinNormal>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::C(var_field0);
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::misc_example::AbcTwinNormal::JustInt(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(var_field0);
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::A(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::B(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::C(var_field0);
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::JustInt(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::A(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::B(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::C(var_field0);
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::JustInt(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(
                    var_field0,
                );
            }
            2 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(
                    var_field0,
                );
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::A(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::B(
                    var_field0,
                );
            }
            2 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::C(
                    var_field0,
                );
            }
            3 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::JustInt(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::inside_macro::AnotherMacroStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <i32>::sse_decode(deserializer);
        let mut var_nonFinalData = <i32>::sse_decode(deserializer);
        return crate::api::inside_macro::AnotherMacroStructTwinNormal {
            data: var_data,
            non_final_data: var_nonFinalData,
        };
    }
}

impl SseDecode for crate::api::mirror::AnotherTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::mirror::AnotherTwinNormal { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_vars =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv { vars: var_vars };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar(
            var_field0, var_field1,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(var_field0);
            }
            1 => {
                let mut var_x = <i32>::sse_decode(deserializer);
                let mut var_y = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel{x: var_x, y: var_y};
            }
            2 => {
                return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Standalone,
            1 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_mode =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>::sse_decode(
                deserializer,
            );
        let mut var_env =
            <Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>::sse_decode(
                deserializer,
            );
        let mut var_envOptional = <Option<
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
            name: var_name,
            version: var_version,
            mode: var_mode,
            env: var_env,
            env_optional: var_envOptional,
        };
    }
}

impl SseDecode for crate::api::optional::AttributeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::optional::AttributeTwinNormal {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse{key: var_key, value: var_value};
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <String>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::misc_example::BTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::misc_example::BTwinNormal { b: var_b };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
            b: var_b,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
            b: var_b,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse { b: var_b };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync { b: var_b };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse { b: var_b };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Apple {
                    field: var_field,
                };
            }
            1 => {
                return crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Apple{field: var_field};
            }
            1 => {
                return crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Apple{field: var_field};
            }
            1 => {
                return crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Apple {
                    field: var_field,
                };
            }
            1 => {
                return crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Apple{field: var_field};
            }
            1 => {
                return crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Apple{field: var_field};
            }
            1 => {
                return crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Orange;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Apple,
            1 => crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Orange,
            _ => unreachable!(
                "Invalid variant for BasicPrimitiveEnumTwinNormal: {}",
                inner
            ),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Apple,
1 => crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinRustAsync: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse::Apple,
1 => crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinRustAsyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse::Apple,
            1 => crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Apple,
            1 => crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinSync: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse::Apple,
1 => crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse::Orange,
            _ => unreachable!("Invalid variant for BasicPrimitiveEnumTwinSyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic::BasicStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic::BasicStructTwinNormal {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_apple = <Option<String>>::sse_decode(deserializer);
        let mut var_orange = <Option<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
            apple: var_apple,
            orange: var_orange,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_left = <Option<
            Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>,
        >>::sse_decode(deserializer);
        let mut var_right = <Option<
            Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
            name: var_name,
            left: var_left,
            right: var_right,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_left = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>>::sse_decode(deserializer);
        let mut var_right = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync{name: var_name, left: var_left, right: var_right};
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_name = <String>::sse_decode(deserializer);
let mut var_left = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>>::sse_decode(deserializer);
let mut var_right = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>>::sse_decode(deserializer);
return crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse{name: var_name, left: var_left, right: var_right};}
                }

impl SseDecode for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_left = <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>,
        >>::sse_decode(deserializer);
        let mut var_right = <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
            name: var_name,
            left: var_left,
            right: var_right,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_left = <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>,
        >>::sse_decode(deserializer);
        let mut var_right = <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
            name: var_name,
            left: var_left,
            right: var_right,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_left = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>>::sse_decode(deserializer);
        let mut var_right = <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse{name: var_name, left: var_left, right: var_right};
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
            first: var_first,
            second: var_second,
            third: var_third,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync{first: var_first, second: var_second, third: var_third};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse{first: var_first, second: var_second, third: var_third};
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
            first: var_first,
            second: var_second,
            third: var_third,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
            first: var_first,
            second: var_second,
            third: var_third,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <Vec<u8>>::sse_decode(deserializer);
        let mut var_second = <Vec<u8>>::sse_decode(deserializer);
        let mut var_third = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse {
            first: var_first,
            second: var_second,
            third: var_third,
        };
    }
}

impl SseDecode for crate::api::misc_example::BigBuffersTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::misc_example::BigBuffersTwinNormal {
            int64: var_int64,
            uint64: var_uint64,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
            int64: var_int64,
            uint64: var_uint64,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse{int64: var_int64, uint64: var_uint64};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
            int64: var_int64,
            uint64: var_uint64,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
            int64: var_int64,
            uint64: var_uint64,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int64 = <Vec<i64>>::sse_decode(deserializer);
        let mut var_uint64 = <Vec<u64>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
            int64: var_int64,
            uint64: var_uint64,
        };
    }
}

impl SseDecode for crate::api::array::BlobTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::array::BlobTwinNormal(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sse::BlobTwinSse(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync::BlobTwinSync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 1600]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse(var_field0);
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode
    for Box<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return Box::new(<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>::sse_decode(deserializer));}
                }

impl SseDecode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::array::BlobTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::array::BlobTwinNormal>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>::sse_decode(deserializer),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::sse_decode(deserializer),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<bool>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::enumeration::DistanceTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::enumeration::DistanceTwinNormal>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::optional::ExoticOptionalsTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::optional::ExoticOptionalsTwinNormal>::sse_decode(deserializer),
        );
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<f64>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::array::FeedIdTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::array::FeedIdTwinNormal>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>::sse_decode(deserializer),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::sse_decode(deserializer),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<i32>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<i64>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<i8>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::enumeration::KitchenSinkTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::enumeration::KitchenSinkTwinNormal>::sse_decode(deserializer),
        );
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::auxiliary::sample_types::MySize>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<crate::api::enumeration::SpeedTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::enumeration::SpeedTwinNormal>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<u8>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<[u8; 1600]> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<[u8; 1600]>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<[u8; 8]> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<[u8; 8]>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(
            deserializer,
        ));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer));
    }
}

impl SseDecode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                deserializer,
            ),
        );
    }
}

impl SseDecode for Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(deserializer));
    }
}

impl SseDecode for crate::api::misc_example::CTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::misc_example::CTwinNormal { c: var_c };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
            c: var_c,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
            c: var_c,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse { c: var_c };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync { c: var_c };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_c = <bool>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse { c: var_c };
    }
}

impl SseDecode for crate::api::method::ConcatenateWithTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::method::ConcatenateWithTwinNormal { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
            a: var_a,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse{a: var_a};
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync { a: var_a };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::mirror::ContainsMirroredSubStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_test =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        let mut var_test2 = <crate::api::mirror::AnotherTwinNormal>::sse_decode(deserializer);
        return crate::api::mirror::ContainsMirroredSubStructTwinNormal {
            test: var_test,
            test2: var_test2,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_test =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        let mut var_test2 =
            <crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync{test: var_test, test2: var_test2};
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_test = <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(deserializer);
let mut var_test2 = <crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse>::sse_decode(deserializer);
return crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse{test: var_test, test2: var_test2};}
                }

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_test =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        let mut var_test2 =
            <crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
            test: var_test,
            test2: var_test2,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_test =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        let mut var_test2 =
            <crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
            test: var_test,
            test2: var_test2,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_test =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        let mut var_test2 =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse{test: var_test, test2: var_test2};
    }
}

impl SseDecode for crate::api::exception::CustomEnumErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::exception::CustomEnumErrorTwinNormal::One {
                    message: var_message,
                    backtrace: var_backtrace,
                };
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::exception::CustomEnumErrorTwinNormal::Two {
                    message: var_message,
                    backtrace: var_backtrace,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message: var_message, backtrace: var_backtrace};
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message: var_message, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::One{message: var_message, backtrace: var_backtrace};
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::Two{message: var_message, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::One{message: var_message, backtrace: var_backtrace};
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::Two{message: var_message, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One{message: var_message, backtrace: var_backtrace};
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two{message: var_message, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_message = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::One{message: var_message, backtrace: var_backtrace};
            }
            1 => {
                let mut var_message = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::Two{message: var_message, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::exception::CustomErrorTwinNormal::Error0 {
                    e: var_e,
                    backtrace: var_backtrace,
                };
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::exception::CustomErrorTwinNormal::Error1 {
                    e: var_e,
                    backtrace: var_backtrace,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e: var_e, backtrace: var_backtrace};
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e: var_e, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error0{e: var_e, backtrace: var_backtrace};
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error1{e: var_e, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error0 {
                    e: var_e,
                    backtrace: var_backtrace,
                };
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error1 {
                    e: var_e,
                    backtrace: var_backtrace,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0{e: var_e, backtrace: var_backtrace};
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1{e: var_e, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_e = <String>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error0{e: var_e, backtrace: var_backtrace};
            }
            1 => {
                let mut var_e = <u32>::sse_decode(deserializer);
                let mut var_backtrace = <backtrace::Backtrace>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error1{e: var_e, backtrace: var_backtrace};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomNestedError1TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 =
                    <crate::api::exception::CustomNestedError2TwinNormal>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::CustomNested1(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::ErrorNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::CustomNested1(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::ErrorNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::CustomNested1(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::ErrorNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomNestedError2TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2Number(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2Number(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2Number(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Three(var_field0); }
1 => { let mut var_field0 = <u32>::sse_decode(deserializer);
return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Four(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Three(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Four(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Three(var_field0);
            }
            1 => {
                let mut var_field0 = <u32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Four(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::exception::CustomNestedErrorOuterTwinNormal::One(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <crate::api::exception::CustomNestedErrorInnerTwinNormal>::sse_decode(
                        deserializer,
                    );
                return crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::One(var_field0); }
1 => { let mut var_field0 = <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse>::sse_decode(deserializer);
return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::Two(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::One(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::Two(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::One(var_field0);
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::Two(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::exception::CustomStructErrorAnotherTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::exception::CustomStructErrorAnotherTwinNormal {
            message: var_message,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync{message: var_message};
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_message = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse{message: var_message};}
                }

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
            message: var_message,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
            message: var_message,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse{message: var_message};
    }
}

impl SseDecode for crate::api::exception::CustomStructErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::exception::CustomStructErrorTwinNormal { a: var_a };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync{a: var_a};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse{a: var_a};
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
            a: var_a,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::exception::CustomStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::exception::CustomStructTwinNormal {
            message: var_message,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
            message: var_message,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse{message: var_message};
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
            message: var_message,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
            message: var_message,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
            message: var_message,
        };
    }
}

impl SseDecode for crate::api::attribute::CustomizedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::attribute::CustomizedTwinNormal {
            final_field: var_finalField,
            non_final_field: var_nonFinalField,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
            final_field: var_finalField,
            non_final_field: var_nonFinalField,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse{final_field: var_finalField, non_final_field: var_nonFinalField};
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
            final_field: var_finalField,
            non_final_field: var_nonFinalField,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
            final_field: var_finalField,
            non_final_field: var_nonFinalField,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_finalField = <String>::sse_decode(deserializer);
        let mut var_nonFinalField = <Option<String>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
            final_field: var_finalField,
            non_final_field: var_nonFinalField,
        };
    }
}

impl SseDecode for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync{first: var_first, second: var_second};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse{first: var_first, second: var_second};
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        let mut var_second = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for flutter_rust_bridge::for_generated::DartAbi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unimplemented!("The type Dynamic(IrTypeDynamic) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseDecode for crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::api::dart_fn::DemoStructForRustCallDartTwinNormal { name: var_name };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync{name: var_name};
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_name = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse{name: var_name};}
                }

impl SseDecode for crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
            name: var_name,
        };
    }
}

impl SseDecode for crate::api::enumeration::DistanceTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::DistanceTwinNormal::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::enumeration::DistanceTwinNormal::Map(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Map(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Map(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Map(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::optional::ElementTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes =
            <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer);
        let mut var_children =
            <Option<Vec<crate::api::optional::ElementTwinNormal>>>::sse_decode(deserializer);
        return crate::api::optional::ElementTwinNormal {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut var_children = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        let mut var_children = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>,
        >>::sse_decode(deserializer);
        let mut var_children = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
        >>::sse_decode(deserializer);
        let mut var_children = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_tag = <Option<String>>::sse_decode(deserializer);
        let mut var_text = <Option<String>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>,
        >>::sse_decode(deserializer);
        let mut var_children = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
            tag: var_tag,
            text: var_text,
            attributes: var_attributes,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::misc_type::EmptyTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::misc_type::EmptyTwinNormal {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {};
    }
}

impl SseDecode for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Primitive(var_field0);
            }
            1 => {
                let mut var_field0 = <flutter_rust_bridge::DartOpaque>::sse_decode(deserializer);
                return crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Opaque(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueMoi<HideDataTwinMoi>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Struct(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Box<dyn DartDebugTwinMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Mutex<HideDataTwinMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Mutex(
                    var_field0,
                );
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueMoi<RwLock<HideDataTwinMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::RwLock(
                    var_field0,
                );
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for [crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueNom<HideDataTwinNormal>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinNormal>>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinNormal>>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinNormal>>>::sse_decode(deserializer);
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(var_field0);
            }
            5 => {
                return crate::api::rust_opaque::EnumOpaqueTwinNormal::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustOpaqueNom<HideDataTwinRustAsync>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinRustAsync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinRustAsync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinRustAsyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinRustAsyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinRustAsyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Struct(var_field0); }
1 => { let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Primitive(var_field0); }
2 => { let mut var_field0 = <RustOpaqueMoi<Box < dyn DartDebugTwinRustAsyncSseMoi >>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::TraitObj(var_field0); }
3 => { let mut var_field0 = <RustOpaqueMoi<Mutex < HideDataTwinRustAsyncSseMoi >>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Mutex(var_field0); }
4 => { let mut var_field0 = <RustOpaqueMoi<RwLock < HideDataTwinRustAsyncSseMoi >>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::RwLock(var_field0); }
5 => { return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Nothing; }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi;
        5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Struct(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Mutex(
                    var_field0,
                );
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::RwLock(
                    var_field0,
                );
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for [crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Box<dyn DartDebugTwinSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Mutex<HideDataTwinSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueMoi<RwLock<HideDataTwinSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for [crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueNom<HideDataTwinSync>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinSync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinSync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                    var_field0,
                );
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinSync>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueNom<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueNom<Box<dyn DartDebugTwinSyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueNom<Mutex<HideDataTwinSyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueNom<RwLock<HideDataTwinSyncSse>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Struct(var_field0);
            }
            1 => {
                let mut var_field0 = <RustOpaqueMoi<i16>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Primitive(var_field0);
            }
            2 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Box<dyn DartDebugTwinSyncSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::TraitObj(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <RustOpaqueMoi<Mutex<HideDataTwinSyncSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Mutex(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <RustOpaqueMoi<RwLock<HideDataTwinSyncSseMoi>>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::RwLock(var_field0);
            }
            5 => {
                return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Nothing;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::enumeration::EnumSimpleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::enumeration::EnumSimpleTwinNormal::A,
            1 => crate::api::enumeration::EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinRustAsync: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse::A,
1 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinRustAsyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::enumeration::EnumWithDiscriminantTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::enumeration::EnumWithDiscriminantTwinNormal::OneHundred,
            1 => crate::api::enumeration::EnumWithDiscriminantTwinNormal::Fifty,
            _ => unreachable!(
                "Invalid variant for EnumWithDiscriminantTwinNormal: {}",
                inner
            ),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinRustAsync: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinRustAsyncSse: {}", inner),
        };}
                }

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinSync: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse::OneHundred,
1 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse::Fifty,
            _ => unreachable!("Invalid variant for EnumWithDiscriminantTwinSyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::A;
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::B(var_field0);
            }
            2 => {
                let mut var_cField = <String>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemMixedTwinNormal::C {
                    c_field: var_cField,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A;
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(var_field0);
            }
            2 => {
                let mut var_cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field: var_cField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::A; }
1 => { let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::B(var_field0); }
2 => { let mut var_cField = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::C{c_field: var_cField}; }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::A;
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::B(var_field0);
            }
            2 => {
                let mut var_cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::C{c_field: var_cField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A;
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(var_field0);
            }
            2 => {
                let mut var_cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C{c_field: var_cField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::A;
            }
            1 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::B(var_field0);
            }
            2 => {
                let mut var_cField = <String>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::C{c_field: var_cField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                    a_field: var_aField,
                };
            }
            1 => {
                let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                    b_field: var_bField,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field: var_aField};
            }
            1 => {
                let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field: var_bField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::A{a_field: var_aField}; }
1 => { let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::B{b_field: var_bField}; }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::A{a_field: var_aField};
            }
            1 => {
                let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::B{b_field: var_bField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A{a_field: var_aField};
            }
            1 => {
                let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B{b_field: var_bField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_aField = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::A{a_field: var_aField};
            }
            1 => {
                let mut var_bField = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::B{b_field: var_bField};
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemTupleTwinNormal::A(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::EnumWithItemTupleTwinNormal::B(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::A(var_field0); }
1 => { let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::B(var_field0); }
 _ => { unimplemented!(""); }}}
                }

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::A(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::B(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::A(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::B(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::event_listener::EventTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_payload = <String>::sse_decode(deserializer);
        return crate::api::event_listener::EventTwinNormal {
            address: var_address,
            payload: var_payload,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_payload = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
            address: var_address,
            payload: var_payload,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_payload = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse{address: var_address, payload: var_payload};
    }
}

impl SseDecode for crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_payload = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
            address: var_address,
            payload: var_payload,
        };
    }
}

impl SseDecode for crate::api::optional::ExoticOptionalsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes =
            <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer);
        let mut var_attributesNullable =
            <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<
            Vec<Option<crate::api::optional::AttributeTwinNormal>>,
        >>::sse_decode(deserializer);
        let mut var_newtypeint =
            <Option<crate::api::newtype_pattern::NewTypeIntTwinNormal>>::sse_decode(deserializer);
        return crate::api::optional::ExoticOptionalsTwinNormal {
            int32: var_int32,
            int64: var_int64,
            float64: var_float64,
            boolean: var_boolean,
            zerocopy: var_zerocopy,
            int8list: var_int8List,
            uint8list: var_uint8List,
            int32list: var_int32List,
            float32list: var_float32List,
            float64list: var_float64List,
            attributes: var_attributes,
            attributes_nullable: var_attributesNullable,
            nullable_attributes: var_nullableAttributes,
            newtypeint: var_newtypeint,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut var_attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<
            Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >,
        >>::sse_decode(deserializer);
        let mut var_newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
            int32: var_int32,
            int64: var_int64,
            float64: var_float64,
            boolean: var_boolean,
            zerocopy: var_zerocopy,
            int8list: var_int8List,
            uint8list: var_uint8List,
            int32list: var_int32List,
            float32list: var_float32List,
            float64list: var_float64List,
            attributes: var_attributes,
            attributes_nullable: var_attributesNullable,
            nullable_attributes: var_nullableAttributes,
            newtypeint: var_newtypeint,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
        >>::sse_decode(deserializer);
        let mut var_attributesNullable = <Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>>>>::sse_decode(deserializer);
        let mut var_newtypeint = <Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse{int32: var_int32, int64: var_int64, float64: var_float64, boolean: var_boolean, zerocopy: var_zerocopy, int8list: var_int8List, uint8list: var_uint8List, int32list: var_int32List, float32list: var_float32List, float64list: var_float64List, attributes: var_attributes, attributes_nullable: var_attributesNullable, nullable_attributes: var_nullableAttributes, newtypeint: var_newtypeint};
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>,
        >>::sse_decode(deserializer);
        let mut var_attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>,
        >>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<
            Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>,
        >>::sse_decode(deserializer);
        let mut var_newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
            int32: var_int32,
            int64: var_int64,
            float64: var_float64,
            boolean: var_boolean,
            zerocopy: var_zerocopy,
            int8list: var_int8List,
            uint8list: var_uint8List,
            int32list: var_int32List,
            float32list: var_float32List,
            float64list: var_float64List,
            attributes: var_attributes,
            attributes_nullable: var_attributesNullable,
            nullable_attributes: var_nullableAttributes,
            newtypeint: var_newtypeint,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
        >>::sse_decode(deserializer);
        let mut var_attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
        >>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<
            Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>,
        >>::sse_decode(deserializer);
        let mut var_newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
            int32: var_int32,
            int64: var_int64,
            float64: var_float64,
            boolean: var_boolean,
            zerocopy: var_zerocopy,
            int8list: var_int8List,
            uint8list: var_uint8List,
            int32list: var_int32List,
            float32list: var_float32List,
            float64list: var_float64List,
            attributes: var_attributes,
            attributes_nullable: var_attributesNullable,
            nullable_attributes: var_nullableAttributes,
            newtypeint: var_newtypeint,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int32 = <Option<i32>>::sse_decode(deserializer);
        let mut var_int64 = <Option<i64>>::sse_decode(deserializer);
        let mut var_float64 = <Option<f64>>::sse_decode(deserializer);
        let mut var_boolean = <Option<bool>>::sse_decode(deserializer);
        let mut var_zerocopy = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int8List = <Option<Vec<i8>>>::sse_decode(deserializer);
        let mut var_uint8List = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_int32List = <Option<Vec<i32>>>::sse_decode(deserializer);
        let mut var_float32List = <Option<Vec<f32>>>::sse_decode(deserializer);
        let mut var_float64List = <Option<Vec<f64>>>::sse_decode(deserializer);
        let mut var_attributes = <Option<
            Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>,
        >>::sse_decode(deserializer);
        let mut var_attributesNullable = <Vec<
            Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>,
        >>::sse_decode(deserializer);
        let mut var_nullableAttributes = <Option<
            Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>,
        >>::sse_decode(deserializer);
        let mut var_newtypeint = <Option<
            crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
            int32: var_int32,
            int64: var_int64,
            float64: var_float64,
            boolean: var_boolean,
            zerocopy: var_zerocopy,
            int8list: var_int8List,
            uint8list: var_uint8List,
            int32list: var_int32List,
            float32list: var_float32List,
            float64list: var_float64List,
            attributes: var_attributes,
            attributes_nullable: var_attributesNullable,
            nullable_attributes: var_nullableAttributes,
            newtypeint: var_newtypeint,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [f64; 16] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<f64>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::chrono_type::FeatureChronoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut var_duration = <chrono::Duration>::sse_decode(deserializer);
        let mut var_naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return crate::api::chrono_type::FeatureChronoTwinNormal {
            utc: var_utc,
            local: var_local,
            duration: var_duration,
            naive: var_naive,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut var_duration = <chrono::Duration>::sse_decode(deserializer);
        let mut var_naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync{utc: var_utc, local: var_local, duration: var_duration, naive: var_naive};
    }
}

impl SseDecode for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_utc = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_local = <chrono::DateTime<chrono::Local>>::sse_decode(deserializer);
        let mut var_duration = <chrono::Duration>::sse_decode(deserializer);
        let mut var_naive = <chrono::NaiveDateTime>::sse_decode(deserializer);
        return crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
            utc: var_utc,
            local: var_local,
            duration: var_duration,
            naive: var_naive,
        };
    }
}

impl SseDecode for crate::api::uuid_type::FeatureUuidTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_one = <uuid::Uuid>::sse_decode(deserializer);
        return crate::api::uuid_type::FeatureUuidTwinNormal { one: var_one };
    }
}

impl SseDecode for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_one = <uuid::Uuid>::sse_decode(deserializer);
        return crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
            one: var_one,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_one = <uuid::Uuid>::sse_decode(deserializer);
        return crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
            one: var_one,
        };
    }
}

impl SseDecode for crate::api::array::FeedIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::array::FeedIdTwinNormal(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 8]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse(var_field0);
    }
}

impl SseDecode for i16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for [i32; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<i32>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i8().unwrap()
    }
}

impl SseDecode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::enumeration::KitchenSinkTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::KitchenSinkTwinNormal::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                    int32: var_int32,
                    float64: var_float64,
                    boolean: var_boolean,
                };
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 =
                    <Box<crate::api::enumeration::KitchenSinkTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Nested(
                    var_field0, var_field1,
                );
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Optional(
                    var_field0, var_field1,
                );
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Buffer(var_field0);
            }
            5 => {
                let mut var_field0 =
                    <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
                return crate::api::enumeration::KitchenSinkTwinNormal::Enums(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32: var_int32, float64: var_float64, boolean: var_boolean};
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 = <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(var_field0, var_field1);
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(var_field0);
            }
            5 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Primitives{int32: var_int32, float64: var_float64, boolean: var_boolean};
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 = <Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Nested(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Optional(var_field0, var_field1);
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Buffer(var_field0);
            }
            5 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Enums(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Primitives{int32: var_int32, float64: var_float64, boolean: var_boolean};
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Nested(
                    var_field0, var_field1,
                );
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Optional(var_field0, var_field1);
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Buffer(
                    var_field0,
                );
            }
            5 => {
                let mut var_field0 =
                    <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(
                        deserializer,
                    );
                return crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Enums(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives{int32: var_int32, float64: var_float64, boolean: var_boolean};
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(var_field0, var_field1);
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(var_field0);
            }
            5 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Empty;
            }
            1 => {
                let mut var_int32 = <i32>::sse_decode(deserializer);
                let mut var_float64 = <f64>::sse_decode(deserializer);
                let mut var_boolean = <bool>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Primitives{int32: var_int32, float64: var_float64, boolean: var_boolean};
            }
            2 => {
                let mut var_field0 = <i32>::sse_decode(deserializer);
                let mut var_field1 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Nested(var_field0, var_field1);
            }
            3 => {
                let mut var_field0 = <Option<i32>>::sse_decode(deserializer);
                let mut var_field1 = <Option<i32>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Optional(var_field0, var_field1);
            }
            4 => {
                let mut var_field0 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Buffer(var_field0);
            }
            5 => {
                let mut var_field0 = <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Enums(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::Duration>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<chrono::DateTime<chrono::Local>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::DateTime<chrono::Local>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<chrono::NaiveDateTime>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<flutter_rust_bridge::DartOpaque> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<flutter_rust_bridge::DartOpaque>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinMoi>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinNormal>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinRustAsync>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinSse>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinSync>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueNom<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<RustOpaqueMoi<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::optional::AttributeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::optional::AttributeTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<bool>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::optional::ElementTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::optional::ElementTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::rust_opaque::EnumOpaqueTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>::sse_decode(deserializer)); }
        return ans_;}
                }

impl SseDecode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::auxiliary::sample_types::MyEnum> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::auxiliary::sample_types::MyEnum>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::auxiliary::sample_types::MySize>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::misc_example::MyTreeNodeTwinNormal>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_raw = <Vec<
            crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
            raw: var_raw,
        };
    }
}

impl SseDecode for Vec<Option<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<String>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::optional::AttributeTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <Option<crate::api::optional::AttributeTwinNormal>>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<
        Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<i32>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <Option<crate::api::misc_example::WeekdaysTwinNormal>>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<
        Option<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<
                crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse,
            >>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<Option<Vec<i32>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Option<Vec<i32>>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::array::PointTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::array::PointTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sse::PointTwinSse>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sync::PointTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<f64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i16>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<i8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u16>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u32>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u64>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic::BasicStructTwinNormal,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, bool)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, bool)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, f32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, f32)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, f64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, f64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, i16)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, i16)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, i32)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, i64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, i64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, i8)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, i8)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, isize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, isize)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, Vec<u8>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, u16)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, u16)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, u32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, u32)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, u64)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, u8)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, u8)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(i32, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(i32, usize)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <(String, crate::api::enumeration::EnumSimpleTwinNormal)>::sse_decode(deserializer),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String,crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, i32)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <(String, crate::api::enumeration::KitchenSinkTwinNormal)>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String,crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
            )>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, Vec<u8>)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, crate::auxiliary::sample_types::MySize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, crate::auxiliary::sample_types::MySize)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<(String, String)>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::method::SumWithTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::method::SumWithTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::array::TestIdTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::array::TestIdTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(
                <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::method::Log2TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::method::Log2TwinNormal {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::stream::LogTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::stream::LogTwinNormal {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_key = <u32>::sse_decode(deserializer);
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
            key: var_key,
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::inside_macro::MacroStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <i32>::sse_decode(deserializer);
        return crate::api::inside_macro::MacroStruct { data: var_data };
    }
}

impl SseDecode for crate::api::enumeration::MeasureTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <Box<crate::api::enumeration::SpeedTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::MeasureTwinNormal::Speed(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <Box<crate::api::enumeration::DistanceTwinNormal>>::sse_decode(deserializer);
                return crate::api::enumeration::MeasureTwinNormal::Distance(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(var_field0);
            }
            1 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Speed(var_field0);
            }
            1 => {
                let mut var_field0 = <Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Distance(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Speed(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Distance(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Speed(var_field0);
            }
            1 => {
                let mut var_field0 = <Box<
                    crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse,
                >>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Distance(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::array::MessageIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::array::MessageIdTwinNormal(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[u8; 32]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse(var_field0);
    }
}

impl SseDecode for crate::api::mirror::MirrorStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::mirror::MirrorStructTwinNormal {
            a: var_a,
            b: var_b,
            c: var_c,
            d: var_d,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
            a: var_a,
            b: var_b,
            c: var_c,
            d: var_d,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse{a: var_a, b: var_b, c: var_c, d: var_d};
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
            a: var_a,
            b: var_b,
            c: var_c,
            d: var_d,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
            a: var_a,
            b: var_b,
            c: var_c,
            d: var_d,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_b = <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        let mut var_c = <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_decode(deserializer);
        let mut var_d =
            <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
            a: var_a,
            b: var_b,
            c: var_c,
            d: var_d,
        };
    }
}

impl SseDecode for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_regular = <String>::sse_decode(deserializer);
        let mut var_type = <String>::sse_decode(deserializer);
        let mut var_async = <bool>::sse_decode(deserializer);
        let mut var_another = <String>::sse_decode(deserializer);
        return crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
            regular: var_regular,
            r#type: var_type,
            r#async: var_async,
            another: var_another,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_regular = <String>::sse_decode(deserializer);
let mut var_type = <String>::sse_decode(deserializer);
let mut var_async = <bool>::sse_decode(deserializer);
let mut var_another = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync{regular: var_regular, r#type: var_type, r#async: var_async, another: var_another};}
                }

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_regular = <String>::sse_decode(deserializer);
let mut var_type = <String>::sse_decode(deserializer);
let mut var_async = <bool>::sse_decode(deserializer);
let mut var_another = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse{regular: var_regular, r#type: var_type, r#async: var_async, another: var_another};}
                }

impl SseDecode
    for crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_regular = <String>::sse_decode(deserializer);
        let mut var_type = <String>::sse_decode(deserializer);
        let mut var_async = <bool>::sse_decode(deserializer);
        let mut var_another = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse{regular: var_regular, r#type: var_type, r#async: var_async, another: var_another};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_regular = <String>::sse_decode(deserializer);
        let mut var_type = <String>::sse_decode(deserializer);
        let mut var_async = <bool>::sse_decode(deserializer);
        let mut var_another = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync{regular: var_regular, r#type: var_type, r#async: var_async, another: var_another};
    }
}

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_regular = <String>::sse_decode(deserializer);
let mut var_type = <String>::sse_decode(deserializer);
let mut var_async = <bool>::sse_decode(deserializer);
let mut var_another = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse{regular: var_regular, r#type: var_type, r#async: var_async, another: var_another};}
                }

impl SseDecode for crate::auxiliary::sample_types::MyEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::auxiliary::sample_types::MyEnum::False,
            1 => crate::auxiliary::sample_types::MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", inner),
        };
    }
}

impl SseDecode for crate::api::misc_example::MyNestedStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode =
            <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_decode(deserializer);
        let mut var_weekday =
            <crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(deserializer);
        return crate::api::misc_example::MyNestedStructTwinNormal {
            tree_node: var_treeNode,
            weekday: var_weekday,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode = <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_decode(deserializer);
        let mut var_weekday = <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync{tree_node: var_treeNode, weekday: var_weekday};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>::sse_decode(deserializer);
        let mut var_weekday = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse{tree_node: var_treeNode, weekday: var_weekday};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode =
            <crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::sse_decode(
                deserializer,
            );
        let mut var_weekday =
            <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
            tree_node: var_treeNode,
            weekday: var_weekday,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode =
            <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_decode(
                deserializer,
            );
        let mut var_weekday =
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
            tree_node: var_treeNode,
            weekday: var_weekday,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_treeNode = <crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::sse_decode(deserializer);
        let mut var_weekday = <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
            tree_node: var_treeNode,
            weekday: var_weekday,
        };
    }
}

impl SseDecode for crate::auxiliary::sample_types::MySize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_width = <i32>::sse_decode(deserializer);
        let mut var_height = <i32>::sse_decode(deserializer);
        return crate::auxiliary::sample_types::MySize {
            width: var_width,
            height: var_height,
        };
    }
}

impl SseDecode for crate::api::stream::MyStreamEntryTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hello = <String>::sse_decode(deserializer);
        return crate::api::stream::MyStreamEntryTwinNormal { hello: var_hello };
    }
}

impl SseDecode for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hello = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
            hello: var_hello,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hello = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse{hello: var_hello};
    }
}

impl SseDecode for crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hello = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
            hello: var_hello,
        };
    }
}

impl SseDecode for crate::auxiliary::sample_types::MyStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_content = <bool>::sse_decode(deserializer);
        return crate::auxiliary::sample_types::MyStruct {
            content: var_content,
        };
    }
}

impl SseDecode for crate::api::misc_example::MyTreeNodeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children =
            <Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>::sse_decode(deserializer);
        return crate::api::misc_example::MyTreeNodeTwinNormal {
            value_i32: var_valueI32,
            value_vec_u8: var_valueVecU8,
            value_boolean: var_valueBoolean,
            children: var_children,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
            value_i32: var_valueI32,
            value_vec_u8: var_valueVecU8,
            value_boolean: var_valueBoolean,
            children: var_children,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse{value_i32: var_valueI32, value_vec_u8: var_valueVecU8, value_boolean: var_valueBoolean, children: var_children};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
            value_i32: var_valueI32,
            value_vec_u8: var_valueVecU8,
            value_boolean: var_valueBoolean,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
            value_i32: var_valueI32,
            value_vec_u8: var_valueVecU8,
            value_boolean: var_valueBoolean,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_valueI32 = <i32>::sse_decode(deserializer);
        let mut var_valueVecU8 = <Vec<u8>>::sse_decode(deserializer);
        let mut var_valueBoolean = <bool>::sse_decode(deserializer);
        let mut var_children = <Vec<
            crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse,
        >>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
            value_i32: var_valueI32,
            value_vec_u8: var_valueVecU8,
            value_boolean: var_valueBoolean,
            children: var_children,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_raw =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
            raw: var_raw,
        };
    }
}

impl SseDecode for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field = <i32>::sse_decode(deserializer);
        return crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
            field: var_field,
        };
    }
}

impl SseDecode for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::newtype_pattern::NewTypeIntTwinNormal(var_field0);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync(
            var_field0,
        );
    }
}

impl SseDecode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i64>::sse_decode(deserializer);
        return crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::enumeration::NoteTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day =
            <Box<crate::api::misc_example::WeekdaysTwinNormal>>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::enumeration::NoteTwinNormal {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day = <Box<
            crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
        >>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day = <Box<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day =
            <Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>::sse_decode(
                deserializer,
            );
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day =
            <Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_decode(
                deserializer,
            );
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_day = <Box<
            crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse,
        >>::sse_decode(deserializer);
        let mut var_body = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
            day: var_day,
            body: var_body,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers(var_field0);
    }
}

impl SseDecode for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field = <i32>::sse_decode(deserializer);
        return crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
            field: var_field,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueMoi<HideDataTwinMoi>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueMoi<HideDataTwinMoi>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinNormal>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinNormal>>::sse_decode(deserializer);
        return crate::api::rust_opaque::OpaqueNestedTwinNormal {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinRustAsync>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinRustAsync>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi{first: var_first, second: var_second};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse{first: var_first, second: var_second};
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_first = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(deserializer);
let mut var_second = <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi{first: var_first, second: var_second};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinSse>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinSync>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinSync>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
            first: var_first,
            second: var_second,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_first = <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(deserializer);
        let mut var_second = <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi{first: var_first, second: var_second};
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::Duration>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::NaiveDateTime>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<chrono::DateTime<chrono::Utc>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<flutter_rust_bridge::DartOpaque> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<flutter_rust_bridge::DartOpaque>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataAnotherTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataAnotherTwinMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataAnotherTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataAnotherTwinNormal>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataAnotherTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataAnotherTwinSse>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataAnotherTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataAnotherTwinSseMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinMoi>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinNormal>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinRustAsync>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinSse>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinSseMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinSync>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueNom<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueNom<HideDataTwinSyncSse>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<RustOpaqueMoi<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::optional::AttributeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::optional::AttributeTwinNormal>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::optional::ElementTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::optional::ElementTwinNormal>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::optional::ExoticOptionalsTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::optional::ExoticOptionalsTwinNormal>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<f64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i16>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<isize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<isize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::enumeration::MeasureTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::enumeration::MeasureTwinNormal>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::newtype_pattern::NewTypeIntTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::newtype_pattern::NewTypeIntTwinNormal>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<(String, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<(String, i32)>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u16>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u8>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<usize>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::misc_example::WeekdaysTwinNormal>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_decode(
                    deserializer,
                ),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }

impl SseDecode for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<bool>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<bool>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Box<crate::api::optional::ExoticOptionalsTwinNormal>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<
                crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<f64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<i32>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<i64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<i8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<i8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Box<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Box<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::optional::AttributeTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Vec<crate::api::optional::AttributeTwinNormal>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::optional::ElementTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::api::optional::ElementTwinNormal>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<
        Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<
                Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>,
            >>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<f32>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<f64>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<i32>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<i8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<i8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::api::optional::OptVecsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums =
            <Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::optional::OptVecsTwinNormal {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>,
        >>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums = <Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>,
        >>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>,
        >>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_i32 = <Vec<Option<i32>>>::sse_decode(deserializer);
        let mut var_enums = <Vec<
            Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>,
        >>::sse_decode(deserializer);
        let mut var_strings = <Vec<Option<String>>>::sse_decode(deserializer);
        let mut var_buffers = <Vec<Option<Vec<i32>>>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
            i32: var_i32,
            enums: var_enums,
            strings: var_strings,
            buffers: var_buffers,
        };
    }
}

impl SseDecode for crate::api::array::PointTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::array::PointTwinNormal { x: var_x, y: var_y };
    }
}

impl SseDecode for [crate::api::array::PointTwinNormal; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::array::PointTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
            x: var_x,
            y: var_y,
        };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
            x: var_x,
            y: var_y,
        };
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sse::PointTwinSse { x: var_x, y: var_y };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>>::sse_decode(
            deserializer,
        );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync::PointTwinSync { x: var_x, y: var_y };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <f32>::sse_decode(deserializer);
        let mut var_y = <f32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
            x: var_x,
            y: var_y,
        };
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_decode(deserializer);
                return crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(
                    var_field0,
                );
            }
            1 => {
                let mut var_field0 = <crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::sse_decode(deserializer);
                return crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(var_field0);
            }
            2 => {
                let mut var_field0 = <crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>::sse_decode(deserializer);
                return crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::raw_string::RawStringItemStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::raw_string::RawStringItemStructTwinNormal { r#type: var_type };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync{r#type: var_type};
    }
}

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_type = <String>::sse_decode(deserializer);
return crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse{r#type: var_type};}
                }

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
            r#type: var_type,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
            r#type: var_type,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_type = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse{r#type: var_type};
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <String>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
            value: var_value,
        };
    }
}

impl SseDecode
    for (
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_decode(
                deserializer,
            );
        let mut var_field1 =
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinMoi, OpaqueTwoTwinMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinNormal, OpaqueTwoTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinNormal>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinNormal>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinRustAsync>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinRustAsyncMoi, OpaqueTwoTwinRustAsyncMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinRustAsyncMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinRustAsyncMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinRustAsyncSse, OpaqueTwoTwinRustAsyncSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinRustAsyncSse>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinRustAsyncSseMoi, OpaqueTwoTwinRustAsyncSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinRustAsyncSseMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinRustAsyncSseMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSse, OpaqueTwoTwinSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSse>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSseMoi, OpaqueTwoTwinSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSseMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSseMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSync, OpaqueTwoTwinSync) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSync>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSyncMoi, OpaqueTwoTwinSyncMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSyncMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSyncMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSyncSse, OpaqueTwoTwinSyncSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSyncSse>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (OpaqueOneTwinSyncSseMoi, OpaqueTwoTwinSyncSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <OpaqueOneTwinSyncSseMoi>::sse_decode(deserializer);
        let mut var_field1 = <OpaqueTwoTwinSyncSseMoi>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, bool) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <bool>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, f32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <f32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, f64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <f64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, i16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i16>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, i32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, i64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, i8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i8>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, isize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <isize>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, u16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <u16>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <u32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <u64>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, u8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <u8>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (i32, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <usize>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::enumeration::EnumSimpleTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::enumeration::EnumSimpleTwinNormal>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, i32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::api::enumeration::KitchenSinkTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::enumeration::KitchenSinkTwinNormal>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 =
            <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_decode(
                deserializer,
            );
        return (var_field0, var_field1);
    }
}

impl SseDecode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, crate::auxiliary::sample_types::MySize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <crate::auxiliary::sample_types::MySize>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        return (var_field0, var_field1);
    }
}

impl SseDecode for crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <Vec<i32>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences(var_field0);
    }
}

impl SseDecode for crate::api::exception::SomeStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::exception::SomeStructTwinNormal { value: var_value };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
            value: var_value,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse{value: var_value};
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::enumeration::SpeedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::enumeration::SpeedTwinNormal::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::enumeration::SpeedTwinNormal::GPS(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::GPS(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::GPS(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::Unknown;
            }
            1 => {
                let mut var_field0 = <f64>::sse_decode(deserializer);
                return crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::GPS(
                    var_field0,
                );
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::deliberate_name_conflict::StructInLowerLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_inner =
            <crate::deliberate_name_conflict::StructInUpperLevel>::sse_decode(deserializer);
        return crate::api::deliberate_name_conflict::StructInLowerLevel { inner: var_inner };
    }
}

impl SseDecode for crate::deliberate_name_conflict::StructInUpperLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_upper = <usize>::sse_decode(deserializer);
        return crate::deliberate_name_conflict::StructInUpperLevel { upper: var_upper };
    }
}

impl SseDecode for crate::api::comment::StructWithCommentsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::comment::StructWithCommentsTwinNormal {
            field_with_comments: var_fieldWithComments,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync{field_with_comments: var_fieldWithComments};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse{field_with_comments: var_fieldWithComments};
    }
}

impl SseDecode for crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
            field_with_comments: var_fieldWithComments,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
            field_with_comments: var_fieldWithComments,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldWithComments = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
            field_with_comments: var_fieldWithComments,
        };
    }
}

impl SseDecode for crate::api::misc_example::StructWithEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 = <crate::api::misc_example::AbcTwinNormal>::sse_decode(deserializer);
        let mut var_abc2 = <crate::api::misc_example::AbcTwinNormal>::sse_decode(deserializer);
        return crate::api::misc_example::StructWithEnumTwinNormal {
            abc1: var_abc1,
            abc2: var_abc2,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 =
            <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_decode(
                deserializer,
            );
        let mut var_abc2 =
            <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync{abc1: var_abc1, abc2: var_abc2};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::sse_decode(deserializer);
        let mut var_abc2 = <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::sse_decode(deserializer);
        return crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse{abc1: var_abc1, abc2: var_abc2};
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 =
            <crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::sse_decode(
                deserializer,
            );
        let mut var_abc2 =
            <crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
            abc1: var_abc1,
            abc2: var_abc2,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 =
            <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_decode(
                deserializer,
            );
        let mut var_abc2 =
            <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
            abc1: var_abc1,
            abc2: var_abc2,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_abc1 =
            <crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::sse_decode(
                deserializer,
            );
        let mut var_abc2 =
            <crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::sse_decode(
                deserializer,
            );
        return crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
            abc1: var_abc1,
            abc2: var_abc2,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_autoOpaque = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >>::sse_decode(deserializer);
        let mut var_normal = <i32>::sse_decode(deserializer);
        return crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
            auto_opaque: var_autoOpaque,
            normal: var_normal,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_autoOpaque = <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_decode(deserializer);
let mut var_normal = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi{auto_opaque: var_autoOpaque, normal: var_normal};}
                }

impl SseDecode for crate::api::structure::StructWithOneFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::structure::StructWithOneFieldTwinNormal { a: var_a };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync{a: var_a};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse{a: var_a};
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
            a: var_a,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
            a: var_a,
        };
    }
}

impl SseDecode for crate::api::structure::StructWithTwoFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::structure::StructWithTwoFieldTwinNormal { a: var_a, b: var_b };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync{a: var_a, b: var_b};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse{a: var_a, b: var_b};
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
            a: var_a,
            b: var_b,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
            a: var_a,
            b: var_b,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_a = <i32>::sse_decode(deserializer);
        let mut var_b = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
            a: var_a,
            b: var_b,
        };
    }
}

impl SseDecode for crate::api::structure::StructWithZeroFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::structure::StructWithZeroFieldTwinNormal {};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync{};
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse{};}
                }

impl SseDecode for crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {};
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse{};
    }
}

impl SseDecode for crate::api::method::SumWithTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::method::SumWithTwinNormal { x: var_x };
    }
}

impl SseDecode for [crate::api::method::SumWithTwinNormal; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::method::SumWithTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
            x: var_x,
        };
    }
}

impl SseDecode for [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
            x: var_x,
        };
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse { x: var_x };
    }
}

impl SseDecode for [crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync { x: var_x };
    }
}

impl SseDecode for [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_x = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse { x: var_x };
    }
}

impl SseDecode for [crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::chrono_type::TestChronoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dt = <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_dt2 = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_du = <Option<chrono::Duration>>::sse_decode(deserializer);
        return crate::api::chrono_type::TestChronoTwinNormal {
            dt: var_dt,
            dt2: var_dt2,
            du: var_du,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dt = <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_dt2 = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_du = <Option<chrono::Duration>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
            dt: var_dt,
            dt2: var_dt2,
            du: var_du,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_dt = <Option<chrono::DateTime<chrono::Utc>>>::sse_decode(deserializer);
        let mut var_dt2 = <Option<chrono::NaiveDateTime>>::sse_decode(deserializer);
        let mut var_du = <Option<chrono::Duration>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
            dt: var_dt,
            dt2: var_dt2,
            du: var_du,
        };
    }
}

impl SseDecode for crate::api::array::TestIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::array::TestIdTwinNormal(var_field0);
    }
}

impl SseDecode for [crate::api::array::TestIdTwinNormal; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::array::TestIdTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [crate::api::array::TestIdTwinNormal; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::array::TestIdTwinNormal>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync(var_field0);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse(
            var_field0,
        );
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<
            crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse(var_field0);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>::sse_decode(
            deserializer,
        );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>::sse_decode(
            deserializer,
        );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync(var_field0);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <[i32; 2]>::sse_decode(deserializer);
        return crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse(var_field0);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner =
            <Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>::sse_decode(
                deserializer,
            );
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for crate::api::type_alias::TestModelTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::type_alias::TestModelTwinNormal {
            id: var_id,
            name: var_name,
            alias_enum: var_aliasEnum,
            alias_struct: var_aliasStruct,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
            id: var_id,
            name: var_name,
            alias_enum: var_aliasEnum,
            alias_struct: var_aliasStruct,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse{id: var_id, name: var_name, alias_enum: var_aliasEnum, alias_struct: var_aliasStruct};
    }
}

impl SseDecode for crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
            id: var_id,
            name: var_name,
            alias_enum: var_aliasEnum,
            alias_struct: var_aliasStruct,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
            id: var_id,
            name: var_name,
            alias_enum: var_aliasEnum,
            alias_struct: var_aliasStruct,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <u64>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_aliasEnum = <crate::auxiliary::sample_types::MyEnum>::sse_decode(deserializer);
        let mut var_aliasStruct =
            <crate::auxiliary::sample_types::MyStruct>::sse_decode(deserializer);
        return crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
            id: var_id,
            name: var_name,
            alias_enum: var_aliasEnum,
            alias_struct: var_aliasStruct,
        };
    }
}

impl SseDecode for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        return crate::api::structure::TupleStructWithOneFieldTwinNormal(var_field0);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync(var_field0);
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_field0 = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse(var_field0);}
                }

impl SseDecode for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse(
            var_field0,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync(
            var_field0,
        );
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse(var_field0);
    }
}

impl SseDecode for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return crate::api::structure::TupleStructWithTwoFieldTwinNormal(var_field0, var_field1);
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync(var_field0, var_field1);
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_field0 = <i32>::sse_decode(deserializer);
let mut var_field1 = <i32>::sse_decode(deserializer);
return crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse(var_field0, var_field1);}
                }

impl SseDecode for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse(
            var_field0, var_field1,
        );
    }
}

impl SseDecode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync(
            var_field0, var_field1,
        );
    }
}

impl SseDecode
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <i32>::sse_decode(deserializer);
        let mut var_field1 = <i32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse(var_field0, var_field1);
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 1600] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for [u8; 8] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::api::attribute::UserIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::attribute::UserIdTwinNormal { value: var_value };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
            value: var_value,
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
            value: var_value,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse { value: var_value };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync { value: var_value };
    }
}

impl SseDecode for crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_value = <u32>::sse_decode(deserializer);
        return crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
            value: var_value,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
        let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
        let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
        let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
        let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
        let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
        let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
        let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
        let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
        let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
        let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
        return crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
            int8list: var_int8List,
            uint8list: var_uint8List,
            int16list: var_int16List,
            uint16list: var_uint16List,
            uint32list: var_uint32List,
            int32list: var_int32List,
            uint64list: var_uint64List,
            int64list: var_int64List,
            float32list: var_float32List,
            float64list: var_float64List,
            bool_list: var_boolList,
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
return crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync{int8list: var_int8List, uint8list: var_uint8List, int16list: var_int16List, uint16list: var_uint16List, uint32list: var_uint32List, int32list: var_int32List, uint64list: var_uint64List, int64list: var_int64List, float32list: var_float32List, float64list: var_float64List, bool_list: var_boolList};}
                }

impl SseDecode for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
return crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse{int8list: var_int8List, uint8list: var_uint8List, int16list: var_int16List, uint16list: var_uint16List, uint32list: var_uint32List, int32list: var_int32List, uint64list: var_uint64List, int64list: var_int64List, float32list: var_float32List, float64list: var_float64List, bool_list: var_boolList};}
                }

impl SseDecode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
        let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
        let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
        let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
        let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
        let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
        let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
        let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
        let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
        let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
        let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse{int8list: var_int8List, uint8list: var_uint8List, int16list: var_int16List, uint16list: var_uint16List, uint32list: var_uint32List, int32list: var_int32List, uint64list: var_uint64List, int64list: var_int64List, float32list: var_float32List, float64list: var_float64List, bool_list: var_boolList};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
        let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
        let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
        let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
        let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
        let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
        let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
        let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
        let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
        let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
        let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync{int8list: var_int8List, uint8list: var_uint8List, int16list: var_int16List, uint16list: var_uint16List, uint32list: var_uint32List, int32list: var_int32List, uint64list: var_uint64List, int64list: var_int64List, float32list: var_float32List, float64list: var_float64List, bool_list: var_boolList};
    }
}

impl SseDecode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_int8List = <Vec<i8>>::sse_decode(deserializer);
        let mut var_uint8List = <Vec<u8>>::sse_decode(deserializer);
        let mut var_int16List = <Vec<i16>>::sse_decode(deserializer);
        let mut var_uint16List = <Vec<u16>>::sse_decode(deserializer);
        let mut var_uint32List = <Vec<u32>>::sse_decode(deserializer);
        let mut var_int32List = <Vec<i32>>::sse_decode(deserializer);
        let mut var_uint64List = <Vec<u64>>::sse_decode(deserializer);
        let mut var_int64List = <Vec<i64>>::sse_decode(deserializer);
        let mut var_float32List = <Vec<f32>>::sse_decode(deserializer);
        let mut var_float64List = <Vec<f64>>::sse_decode(deserializer);
        let mut var_boolList = <Vec<bool>>::sse_decode(deserializer);
        return crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse{int8list: var_int8List, uint8list: var_uint8List, int16list: var_int16List, uint16list: var_uint16List, uint32list: var_uint32List, int32list: var_int32List, uint64list: var_uint64List, int64list: var_int64List, float32list: var_float32List, float64list: var_float64List, bool_list: var_boolList};
    }
}

impl SseDecode for crate::api::misc_example::WeekdaysTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::misc_example::WeekdaysTwinNormal::Monday,
            1 => crate::api::misc_example::WeekdaysTwinNormal::Tuesday,
            2 => crate::api::misc_example::WeekdaysTwinNormal::Wednesday,
            3 => crate::api::misc_example::WeekdaysTwinNormal::Thursday,
            4 => crate::api::misc_example::WeekdaysTwinNormal::Friday,
            5 => crate::api::misc_example::WeekdaysTwinNormal::Saturday,
            6 => crate::api::misc_example::WeekdaysTwinNormal::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinNormal: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinRustAsync: {}", inner),
        };
    }
}

impl SseDecode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinRustAsyncSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Monday,
            1 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Tuesday,
            2 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Wednesday,
            3 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Thursday,
            4 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Friday,
            5 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Saturday,
            6 => crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSse: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Monday,
            1 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Tuesday,
            2 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Wednesday,
            3 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Thursday,
            4 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Friday,
            5 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Saturday,
            6 => crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSync: {}", inner),
        };
    }
}

impl SseDecode for crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Monday,
1 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Tuesday,
2 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Wednesday,
3 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Thursday,
4 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Friday,
5 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Saturday,
6 => crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Sunday,
            _ => unreachable!("Invalid variant for WeekdaysTwinSyncSse: {}", inner),
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn Fn(String) -> String + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn Fn(String) -> String + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn Fn(String) -> String + Send + Sync>>
    for Box<dyn Fn(String) -> String + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn Fn(String) -> String + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Box<dyn HelloTraitTwinMoi> {}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinMoi>> for Box<dyn HelloTraitTwinMoi> {
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinNormal> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Box<dyn HelloTraitTwinNormal> {}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinNormal>>
    for Box<dyn HelloTraitTwinNormal>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinNormal> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinRustAsync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinRustAsync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinRustAsync>>
    for Box<dyn HelloTraitTwinRustAsync>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinRustAsync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinRustAsyncMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinRustAsyncMoi>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinRustAsyncMoi>>
    for Box<dyn HelloTraitTwinRustAsyncMoi>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinRustAsyncMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinRustAsyncSse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinRustAsyncSse>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinRustAsyncSse>>
    for Box<dyn HelloTraitTwinRustAsyncSse>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinRustAsyncSse> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinRustAsyncSseMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinRustAsyncSseMoi>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinRustAsyncSseMoi>>
    for Box<dyn HelloTraitTwinRustAsyncSseMoi>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinRustAsyncSseMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Box<dyn HelloTraitTwinSse> {}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSse>> for Box<dyn HelloTraitTwinSse> {
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSse> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSseMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Box<dyn HelloTraitTwinSseMoi> {}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSseMoi>>
    for Box<dyn HelloTraitTwinSseMoi>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSseMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for Box<dyn HelloTraitTwinSync> {}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSync>>
    for Box<dyn HelloTraitTwinSync>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSyncMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinSyncMoi>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSyncMoi>>
    for Box<dyn HelloTraitTwinSyncMoi>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSyncMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSyncSse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinSyncSse>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSyncSse>>
    for Box<dyn HelloTraitTwinSyncSse>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSyncSse> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn HelloTraitTwinSyncSseMoi> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn HelloTraitTwinSyncSseMoi>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn HelloTraitTwinSyncSseMoi>>
    for Box<dyn HelloTraitTwinSyncSseMoi>
{
    fn into_into_dart(self) -> Box<dyn HelloTraitTwinSyncSseMoi> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinMoi + Send + Sync>>
    for Box<dyn MyTraitTwinMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinNormal + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinNormal + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinNormal + Send + Sync>>
    for Box<dyn MyTraitTwinNormal + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinNormal + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>>
    for Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinRustAsync + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinRustAsync + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinRustAsync + Send + Sync>>
    for Box<dyn MyTraitTwinRustAsync + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinRustAsync + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>>
    for Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinRustAsyncSse + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>>
    for Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinRustAsyncSse + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSseMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSseMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSseMoi + Send + Sync>>
    for Box<dyn MyTraitTwinSseMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSseMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSse + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSse + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSse + Send + Sync>>
    for Box<dyn MyTraitTwinSse + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSse + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSyncMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSyncMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSyncMoi + Send + Sync>>
    for Box<dyn MyTraitTwinSyncMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSyncMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSync + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSync + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSync + Send + Sync>>
    for Box<dyn MyTraitTwinSync + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSync + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSyncSseMoi + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>>
    for Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSyncSseMoi + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for Box<dyn MyTraitTwinSyncSse + Send + Sync> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for Box<dyn MyTraitTwinSyncSse + Send + Sync>
{
}
impl flutter_rust_bridge::IntoIntoDart<Box<dyn MyTraitTwinSyncSse + Send + Sync>>
    for Box<dyn MyTraitTwinSyncSse + Send + Sync>
{
    fn into_into_dart(self) -> Box<dyn MyTraitTwinSyncSse + Send + Sync> {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinMoi {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinMoi> for NonCloneSimpleTwinMoi {
    fn into_into_dart(self) -> NonCloneSimpleTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinNormal {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinNormal> for NonCloneSimpleTwinNormal {
    fn into_into_dart(self) -> NonCloneSimpleTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinRustAsync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinRustAsync>
    for NonCloneSimpleTwinRustAsync
{
    fn into_into_dart(self) -> NonCloneSimpleTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinRustAsyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for NonCloneSimpleTwinRustAsyncMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinRustAsyncMoi>
    for NonCloneSimpleTwinRustAsyncMoi
{
    fn into_into_dart(self) -> NonCloneSimpleTwinRustAsyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinRustAsyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for NonCloneSimpleTwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinRustAsyncSse>
    for NonCloneSimpleTwinRustAsyncSse
{
    fn into_into_dart(self) -> NonCloneSimpleTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinRustAsyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for NonCloneSimpleTwinRustAsyncSseMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinRustAsyncSseMoi>
    for NonCloneSimpleTwinRustAsyncSseMoi
{
    fn into_into_dart(self) -> NonCloneSimpleTwinRustAsyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSse {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSse> for NonCloneSimpleTwinSse {
    fn into_into_dart(self) -> NonCloneSimpleTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSseMoi> for NonCloneSimpleTwinSseMoi {
    fn into_into_dart(self) -> NonCloneSimpleTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSync {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSync> for NonCloneSimpleTwinSync {
    fn into_into_dart(self) -> NonCloneSimpleTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSyncMoi> for NonCloneSimpleTwinSyncMoi {
    fn into_into_dart(self) -> NonCloneSimpleTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSyncSse {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSyncSse> for NonCloneSimpleTwinSyncSse {
    fn into_into_dart(self) -> NonCloneSimpleTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for NonCloneSimpleTwinSyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for NonCloneSimpleTwinSyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<NonCloneSimpleTwinSyncSseMoi>
    for NonCloneSimpleTwinSyncSseMoi
{
    fn into_into_dart(self) -> NonCloneSimpleTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinMoi> for OpaqueOneTwinMoi {
    fn into_into_dart(self) -> OpaqueOneTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinNormal {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinNormal> for OpaqueOneTwinNormal {
    fn into_into_dart(self) -> OpaqueOneTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinRustAsync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinRustAsync> for OpaqueOneTwinRustAsync {
    fn into_into_dart(self) -> OpaqueOneTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinRustAsyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinRustAsyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinRustAsyncMoi> for OpaqueOneTwinRustAsyncMoi {
    fn into_into_dart(self) -> OpaqueOneTwinRustAsyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinRustAsyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinRustAsyncSse> for OpaqueOneTwinRustAsyncSse {
    fn into_into_dart(self) -> OpaqueOneTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinRustAsyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinRustAsyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinRustAsyncSseMoi>
    for OpaqueOneTwinRustAsyncSseMoi
{
    fn into_into_dart(self) -> OpaqueOneTwinRustAsyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSse> for OpaqueOneTwinSse {
    fn into_into_dart(self) -> OpaqueOneTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSseMoi> for OpaqueOneTwinSseMoi {
    fn into_into_dart(self) -> OpaqueOneTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSync {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSync> for OpaqueOneTwinSync {
    fn into_into_dart(self) -> OpaqueOneTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSyncMoi> for OpaqueOneTwinSyncMoi {
    fn into_into_dart(self) -> OpaqueOneTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSyncSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSyncSse> for OpaqueOneTwinSyncSse {
    fn into_into_dart(self) -> OpaqueOneTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueOneTwinSyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueOneTwinSyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueOneTwinSyncSseMoi> for OpaqueOneTwinSyncSseMoi {
    fn into_into_dart(self) -> OpaqueOneTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinMoi> for OpaqueTwoTwinMoi {
    fn into_into_dart(self) -> OpaqueTwoTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinNormal {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinNormal> for OpaqueTwoTwinNormal {
    fn into_into_dart(self) -> OpaqueTwoTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinRustAsync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinRustAsync> for OpaqueTwoTwinRustAsync {
    fn into_into_dart(self) -> OpaqueTwoTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinRustAsyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinRustAsyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinRustAsyncMoi> for OpaqueTwoTwinRustAsyncMoi {
    fn into_into_dart(self) -> OpaqueTwoTwinRustAsyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinRustAsyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinRustAsyncSse> for OpaqueTwoTwinRustAsyncSse {
    fn into_into_dart(self) -> OpaqueTwoTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinRustAsyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinRustAsyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinRustAsyncSseMoi>
    for OpaqueTwoTwinRustAsyncSseMoi
{
    fn into_into_dart(self) -> OpaqueTwoTwinRustAsyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSse> for OpaqueTwoTwinSse {
    fn into_into_dart(self) -> OpaqueTwoTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSseMoi> for OpaqueTwoTwinSseMoi {
    fn into_into_dart(self) -> OpaqueTwoTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSync {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSync> for OpaqueTwoTwinSync {
    fn into_into_dart(self) -> OpaqueTwoTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSyncMoi> for OpaqueTwoTwinSyncMoi {
    fn into_into_dart(self) -> OpaqueTwoTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSyncSse {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSyncSse> for OpaqueTwoTwinSyncSse {
    fn into_into_dart(self) -> OpaqueTwoTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for OpaqueTwoTwinSyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for OpaqueTwoTwinSyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<OpaqueTwoTwinSyncSseMoi> for OpaqueTwoTwinSyncSseMoi {
    fn into_into_dart(self) -> OpaqueTwoTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructInMiscNoTwinExampleA {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for StructInMiscNoTwinExampleA {}
impl flutter_rust_bridge::IntoIntoDart<StructInMiscNoTwinExampleA> for StructInMiscNoTwinExampleA {
    fn into_into_dart(self) -> StructInMiscNoTwinExampleA {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinMoi>
    for StructWithGoodAndOpaqueFieldTwinMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinNormal>
    for StructWithGoodAndOpaqueFieldTwinNormal
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinRustAsync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinRustAsync
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinRustAsync>
    for StructWithGoodAndOpaqueFieldTwinRustAsync
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinRustAsyncMoi>
    for StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinRustAsyncSse>
    for StructWithGoodAndOpaqueFieldTwinRustAsyncSse
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi>
    for StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSse>
    for StructWithGoodAndOpaqueFieldTwinSse
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSseMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSseMoi>
    for StructWithGoodAndOpaqueFieldTwinSseMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSync>
    for StructWithGoodAndOpaqueFieldTwinSync
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSyncMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSyncMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSyncMoi>
    for StructWithGoodAndOpaqueFieldTwinSyncMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSyncSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSyncSse>
    for StructWithGoodAndOpaqueFieldTwinSyncSse
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for StructWithGoodAndOpaqueFieldTwinSyncSseMoi {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for StructWithGoodAndOpaqueFieldTwinSyncSseMoi
{
}
impl flutter_rust_bridge::IntoIntoDart<StructWithGoodAndOpaqueFieldTwinSyncSseMoi>
    for StructWithGoodAndOpaqueFieldTwinSyncSseMoi
{
    fn into_into_dart(self) -> StructWithGoodAndOpaqueFieldTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::ATwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::ATwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::ATwinNormal>
    for crate::api::misc_example::ATwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::ATwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>
    for crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::AbcTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::misc_example::AbcTwinNormal::A(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::misc_example::AbcTwinNormal::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::misc_example::AbcTwinNormal::C(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::misc_example::AbcTwinNormal::JustInt(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::AbcTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::AbcTwinNormal>
    for crate::api::misc_example::AbcTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::AbcTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                field0,
            ) => [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                field0,
            ) => [3.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::A(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::C(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::JustInt(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::A(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::C(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::JustInt(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>
    for crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::A(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::C(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::JustInt(
                field0,
            ) => [3.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::inside_macro::AnotherMacroStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.non_final_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::inside_macro::AnotherMacroStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::inside_macro::AnotherMacroStructTwinNormal>
    for crate::api::inside_macro::AnotherMacroStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::inside_macro::AnotherMacroStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mirror::AnotherTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::AnotherTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::AnotherTwinNormal>
    for crate::api::mirror::AnotherTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::AnotherTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync,
    > for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse,
    > for crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse>
    for crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>
    for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse,
    > for crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.vars.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationEnv {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationEnv>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv
{
    fn into_into_dart(self) -> mirror_ApplicationEnv {
        mirror_ApplicationEnv(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0 .0.into_into_dart().into_dart(),
            self.0 .1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationEnvVar>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar
{
    fn into_into_dart(self) -> mirror_ApplicationEnvVar {
        mirror_ApplicationEnvVar(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
                x,
                y,
            } => [
                1.into_dart(),
                x.into_into_dart().into_dart(),
                y.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit => {
                [2.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationMessage>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage
{
    fn into_into_dart(self) -> mirror_ApplicationMessage {
        mirror_ApplicationMessage(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Standalone => {
                0.into_dart()
            }
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Embedded => {
                1.into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationMode {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationMode>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode
{
    fn into_into_dart(self) -> mirror_ApplicationMode {
        mirror_ApplicationMode(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.name.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.env.into_into_dart().into_dart(),
            self.0.env_optional.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_ApplicationSettings {}
impl flutter_rust_bridge::IntoIntoDart<mirror_ApplicationSettings>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings
{
    fn into_into_dart(self) -> mirror_ApplicationSettings {
        mirror_ApplicationSettings(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::optional::AttributeTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::AttributeTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::AttributeTwinNormal>
    for crate::api::optional::AttributeTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::AttributeTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
    > for crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse,
    > for crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse,
    > for crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::BTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::BTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::BTwinNormal>
    for crate::api::misc_example::BTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::BTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>
    for crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Apple { field } => {
                [0.into_dart(), field.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Orange => {
                [1.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    for crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Apple{field} => { [0.into_dart(),
field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Orange => { [1.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    > for crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Apple{field} => { [0.into_dart(),
field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Orange => { [1.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    > for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Apple { field } => {
                [0.into_dart(), field.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Orange => {
                [1.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    > for crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Apple {
                field,
            } => [0.into_dart(), field.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Orange => {
                [1.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    > for crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Apple{field} => { [0.into_dart(),
field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Orange => { [1.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    > for crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    > for crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    > for crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    > for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    > for crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    > for crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Apple => 0.into_dart(),
            Self::Orange => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    > for crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::basic::BasicStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic::BasicStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    for crate::api::pseudo_manual::basic::BasicStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic::BasicStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    > for crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    > for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>
    for crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    > for crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.apple.into_into_dart().into_dart(),
            self.orange.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    > for crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.left.into_into_dart().into_dart(),
            self.right.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal,
    > for crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.left.into_into_dart().into_dart(),
            self.right.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    >
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.name.into_into_dart().into_dart(),
self.left.into_into_dart().into_dart(),
self.right.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse> for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.left.into_into_dart().into_dart(),
            self.right.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse,
    > for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.left.into_into_dart().into_dart(),
            self.right.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync,
    > for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.left.into_into_dart().into_dart(),
            self.right.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse,
    > for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal,
    > for crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync,
    > for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse,
    > for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync,
    > for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
            self.third.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse,
    > for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::BigBuffersTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::BigBuffersTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::BigBuffersTwinNormal>
    for crate::api::misc_example::BigBuffersTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::BigBuffersTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse,
    > for crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::array::BlobTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::BlobTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::BlobTwinNormal>
    for crate::api::array::BlobTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::BlobTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse,
    > for crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sse::BlobTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>
    for crate::api::pseudo_manual::array_twin_sse::BlobTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse,
    > for crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::CTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::CTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::CTwinNormal>
    for crate::api::misc_example::CTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::CTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>
    for crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::method::ConcatenateWithTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::ConcatenateWithTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::ConcatenateWithTwinNormal>
    for crate::api::method::ConcatenateWithTwinNormal
{
    fn into_into_dart(self) -> crate::api::method::ConcatenateWithTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse,
    > for crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse,
    > for crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync,
    > for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse,
    > for crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mirror::ContainsMirroredSubStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::ContainsMirroredSubStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::ContainsMirroredSubStructTwinNormal>
    for crate::api::mirror::ContainsMirroredSubStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::ContainsMirroredSubStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync,
    >
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.test.into_into_dart().into_dart(),
self.test2.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse> for crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse,
    > for crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync,
    > for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.test.into_into_dart().into_dart(),
            self.test2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse,
    > for crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomEnumErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomEnumErrorTwinNormal::One { message, backtrace } => [
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::exception::CustomEnumErrorTwinNormal::Two { message, backtrace } => [
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomEnumErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomEnumErrorTwinNormal>
    for crate::api::exception::CustomEnumErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message,backtrace} => { [0.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message,backtrace} => { [1.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::One{message,backtrace} => { [0.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::Two{message,backtrace} => { [1.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::One {
                message,
                backtrace,
            } => [
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::Two {
                message,
                backtrace,
            } => [
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                message,
                backtrace,
            } => [
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                message,
                backtrace,
            } => [
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::One{message,backtrace} => { [0.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::Two{message,backtrace} => { [1.into_dart(),
message.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomErrorTwinNormal::Error0 { e, backtrace } => [
                0.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::exception::CustomErrorTwinNormal::Error1 { e, backtrace } => [
                1.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomErrorTwinNormal>
    for crate::api::exception::CustomErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomErrorTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e,backtrace} => { [0.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e,backtrace} => { [1.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error0{e,backtrace} => { [0.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error1{e,backtrace} => { [1.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse,
    > for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error0 {
                e,
                backtrace,
            } => [
                0.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error1 {
                e,
                backtrace,
            } => [
                1.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                e,
                backtrace,
            } => [
                0.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                e,
                backtrace,
            } => [
                1.into_dart(),
                e.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error0{e,backtrace} => { [0.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error1{e,backtrace} => { [1.into_dart(),
e.into_into_dart().into_dart(),
backtrace.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedError1TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedError1TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedError1TwinNormal>
    for crate::api::exception::CustomNestedError1TwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedError1TwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::CustomNested1(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::ErrorNested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse> for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::CustomNested1(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::ErrorNested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::CustomNested1(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::ErrorNested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedError2TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedError2TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedError2TwinNormal>
    for crate::api::exception::CustomNestedError2TwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2Number(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse> for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2Number(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2Number(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for crate::api::exception::CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Three(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Four(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse> for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Three(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Four(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Three(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Four(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::exception::CustomNestedErrorOuterTwinNormal::One(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for crate::api::exception::CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::One(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::Two(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse> for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::One(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::Two(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::One(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::Two(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructErrorAnotherTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructErrorAnotherTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructErrorAnotherTwinNormal>
    for crate::api::exception::CustomStructErrorAnotherTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructErrorAnotherTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.message.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse> for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructErrorTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructErrorTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructErrorTwinNormal>
    for crate::api::exception::CustomStructErrorTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::CustomStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::CustomStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::CustomStructTwinNormal>
    for crate::api::exception::CustomStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::CustomStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse,
    > for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::attribute::CustomizedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::attribute::CustomizedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::attribute::CustomizedTwinNormal>
    for crate::api::attribute::CustomizedTwinNormal
{
    fn into_into_dart(self) -> crate::api::attribute::CustomizedTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync,
    > for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse,
    > for crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse,
    > for crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync,
    > for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.final_field.into_into_dart().into_dart(),
            self.non_final_field.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse,
    > for crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart_opaque::DartOpaqueNestedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for crate::api::dart_opaque::DartOpaqueNestedTwinNormal
{
    fn into_into_dart(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync,
    > for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse> for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse,
    > for crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart_fn::DemoStructForRustCallDartTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dart_fn::DemoStructForRustCallDartTwinNormal>
    for crate::api::dart_fn::DemoStructForRustCallDartTwinNormal
{
    fn into_into_dart(self) -> crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
    >
    for crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.name.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse> for crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.name.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse,
    > for crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::DistanceTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::DistanceTwinNormal::Unknown => [0.into_dart()].into_dart(),
            crate::api::enumeration::DistanceTwinNormal::Map(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::DistanceTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::DistanceTwinNormal>
    for crate::api::enumeration::DistanceTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::DistanceTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Unknown => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Map(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Map(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Map(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::optional::ElementTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::ElementTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::ElementTwinNormal>
    for crate::api::optional::ElementTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::ElementTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse,
    > for crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>
    for crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tag.into_into_dart().into_dart(),
            self.text.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse,
    > for crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_type::EmptyTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_type::EmptyTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_type::EmptyTwinNormal>
    for crate::api::misc_type::EmptyTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_type::EmptyTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync,
    > for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>
    for crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse,
    > for crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::dart_opaque::EnumDartOpaqueTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for crate::api::dart_opaque::EnumDartOpaqueTwinNormal
{
    fn into_into_dart(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync,
    > for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Primitive(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Opaque(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Primitive(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Opaque(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse,
    > for crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Primitive(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Opaque(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse,
    > for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Struct(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Primitive(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::TraitObj(
                field0,
            ) => [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Mutex(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::RwLock(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Nothing => {
                [5.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Nothing => [5.into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_opaque::EnumOpaqueTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for crate::api::rust_opaque::EnumOpaqueTwinNormal
{
    fn into_into_dart(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Nothing => { [5.into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Struct(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Primitive(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::TraitObj(
                field0,
            ) => [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Mutex(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::RwLock(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Nothing => {
                [5.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                field0,
            ) => [2.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                field0,
            ) => [4.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Nothing => {
                [5.into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Struct(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Primitive(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::TraitObj(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Mutex(field0) => { [3.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::RwLock(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Nothing => { [5.into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumSimpleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumSimpleTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumSimpleTwinNormal>
    for crate::api::enumeration::EnumSimpleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::A => 0.into_dart(),
            Self::B => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithDiscriminantTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::OneHundred => 0.into_dart(),
            Self::Fifty => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithDiscriminantTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithDiscriminantTwinNormal>
    for crate::api::enumeration::EnumWithDiscriminantTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithDiscriminantTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::OneHundred => 0.into_dart(),
            Self::Fifty => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync,
    >
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::OneHundred => 0.into_dart(),
Self::Fifty => 1.into_dart(),
                }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse> for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::OneHundred => 0.into_dart(),
            Self::Fifty => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::OneHundred => 0.into_dart(),
            Self::Fifty => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::OneHundred => 0.into_dart(),
            Self::Fifty => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemMixedTwinNormal::A => [0.into_dart()].into_dart(),
            crate::api::enumeration::EnumWithItemMixedTwinNormal::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::C { c_field } => {
                [2.into_dart(), c_field.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for crate::api::enumeration::EnumWithItemMixedTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field} => { [2.into_dart(),
c_field.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::A => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::C{c_field} => { [2.into_dart(),
c_field.into_into_dart().into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse> for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::A => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::B(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::C {
                c_field,
            } => [2.into_dart(), c_field.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                c_field,
            } => [2.into_dart(), c_field.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::A => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::C{c_field} => { [2.into_dart(),
c_field.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemStructTwinNormal::A { a_field } => {
                [0.into_dart(), a_field.into_into_dart().into_dart()].into_dart()
            }
            crate::api::enumeration::EnumWithItemStructTwinNormal::B { b_field } => {
                [1.into_dart(), b_field.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for crate::api::enumeration::EnumWithItemStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field} => { [0.into_dart(),
a_field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field} => { [1.into_dart(),
b_field.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::A{a_field} => { [0.into_dart(),
a_field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::B{b_field} => { [1.into_dart(),
b_field.into_into_dart().into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse> for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::A {
                a_field,
            } => [0.into_dart(), a_field.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::B {
                b_field,
            } => [1.into_dart(), b_field.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                a_field,
            } => [0.into_dart(), a_field.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                b_field,
            } => [1.into_dart(), b_field.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::A{a_field} => { [0.into_dart(),
a_field.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::B{b_field} => { [1.into_dart(),
b_field.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::EnumWithItemTupleTwinNormal::A(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::enumeration::EnumWithItemTupleTwinNormal::B(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for crate::api::enumeration::EnumWithItemTupleTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::A(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse> for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::A(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::B(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::A(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::B(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::event_listener::EventTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::event_listener::EventTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::event_listener::EventTwinNormal>
    for crate::api::event_listener::EventTwinNormal
{
    fn into_into_dart(self) -> crate::api::event_listener::EventTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync,
    > for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse,
    > for crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse,
    > for crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::optional::ExoticOptionalsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::ExoticOptionalsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::ExoticOptionalsTwinNormal>
    for crate::api::optional::ExoticOptionalsTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    > for crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse,
    > for crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int32.into_into_dart().into_dart(),
            self.int64.into_into_dart().into_dart(),
            self.float64.into_into_dart().into_dart(),
            self.boolean.into_into_dart().into_dart(),
            self.zerocopy.into_into_dart().into_dart(),
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.attributes.into_into_dart().into_dart(),
            self.attributes_nullable.into_into_dart().into_dart(),
            self.nullable_attributes.into_into_dart().into_dart(),
            self.newtypeint.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse,
    > for crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::chrono_type::FeatureChronoTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::chrono_type::FeatureChronoTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::chrono_type::FeatureChronoTwinNormal>
    for crate::api::chrono_type::FeatureChronoTwinNormal
{
    fn into_into_dart(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync,
    > for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.utc.into_into_dart().into_dart(),
            self.local.into_into_dart().into_dart(),
            self.duration.into_into_dart().into_dart(),
            self.naive.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync,
    > for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::uuid_type::FeatureUuidTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::uuid_type::FeatureUuidTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::uuid_type::FeatureUuidTwinNormal>
    for crate::api::uuid_type::FeatureUuidTwinNormal
{
    fn into_into_dart(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync,
    > for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.one.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync,
    > for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::array::FeedIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::FeedIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::FeedIdTwinNormal>
    for crate::api::array::FeedIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::FeedIdTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse,
    > for crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>
    for crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse,
    > for crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::KitchenSinkTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::KitchenSinkTwinNormal::Empty => [0.into_dart()].into_dart(),
            crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                int32,
                float64,
                boolean,
            } => [
                1.into_dart(),
                int32.into_into_dart().into_dart(),
                float64.into_into_dart().into_dart(),
                boolean.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::enumeration::KitchenSinkTwinNormal::Nested(field0, field1) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::enumeration::KitchenSinkTwinNormal::Optional(field0, field1) => [
                3.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::enumeration::KitchenSinkTwinNormal::Buffer(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Enums(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::KitchenSinkTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::KitchenSinkTwinNormal>
    for crate::api::enumeration::KitchenSinkTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32,float64,boolean} => { [1.into_dart(),
int32.into_into_dart().into_dart(),
float64.into_into_dart().into_dart(),
boolean.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(field0,field1) => { [2.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(field0,field1) => { [3.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(field0) => { [5.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Empty => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Primitives{int32,float64,boolean} => { [1.into_dart(),
int32.into_into_dart().into_dart(),
float64.into_into_dart().into_dart(),
boolean.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Nested(field0,field1) => { [2.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Optional(field0,field1) => { [3.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Buffer(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Enums(field0) => { [5.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Empty => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Primitives {
                int32,
                float64,
                boolean,
            } => [
                1.into_dart(),
                int32.into_into_dart().into_dart(),
                float64.into_into_dart().into_dart(),
                boolean.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Nested(
                field0,
                field1,
            ) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Optional(
                field0,
                field1,
            ) => [
                3.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Buffer(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Enums(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                int32,
                float64,
                boolean,
            } => [
                1.into_dart(),
                int32.into_into_dart().into_dart(),
                float64.into_into_dart().into_dart(),
                boolean.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                field0,
                field1,
            ) => [
                2.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                field0,
                field1,
            ) => [
                3.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                field0,
            ) => [4.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                field0,
            ) => [5.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Empty => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Primitives{int32,float64,boolean} => { [1.into_dart(),
int32.into_into_dart().into_dart(),
float64.into_into_dart().into_dart(),
boolean.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Nested(field0,field1) => { [2.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Optional(field0,field1) => { [3.into_dart(),
field0.into_into_dart().into_dart(),
field1.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Buffer(field0) => { [4.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Enums(field0) => { [5.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_ListOfNestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_ListOfNestedRawStringMirrored
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_ListOfNestedRawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_ListOfNestedRawStringMirrored {
        mirror_ListOfNestedRawStringMirrored(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::method::Log2TwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::Log2TwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::Log2TwinNormal>
    for crate::api::method::Log2TwinNormal
{
    fn into_into_dart(self) -> crate::api::method::Log2TwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse,
    > for crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sse::Log2TwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sse::Log2TwinSse>
    for crate::api::pseudo_manual::method_twin_sse::Log2TwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>
    for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse,
    > for crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::stream::LogTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::stream::LogTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::stream::LogTwinNormal>
    for crate::api::stream::LogTwinNormal
{
    fn into_into_dart(self) -> crate::api::stream::LogTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync,
    > for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse,
    > for crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.key.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_sse::LogTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::stream_twin_sse::LogTwinSse>
    for crate::api::pseudo_manual::stream_twin_sse::LogTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::inside_macro::MacroStruct {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::inside_macro::MacroStruct
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::inside_macro::MacroStruct>
    for crate::api::inside_macro::MacroStruct
{
    fn into_into_dart(self) -> crate::api::inside_macro::MacroStruct {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::MeasureTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::MeasureTwinNormal::Speed(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::enumeration::MeasureTwinNormal::Distance(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::MeasureTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::MeasureTwinNormal>
    for crate::api::enumeration::MeasureTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::MeasureTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Speed(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Distance(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Speed(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Distance(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse,
    > for crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Speed(
                field0,
            ) => [0.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
            crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Distance(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::array::MessageIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::MessageIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::MessageIdTwinNormal>
    for crate::api::array::MessageIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::MessageIdTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse,
    > for crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>
    for crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse,
    > for crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::mirror::MirrorStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::mirror::MirrorStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::mirror::MirrorStructTwinNormal>
    for crate::api::mirror::MirrorStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::mirror::MirrorStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync,
    > for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse,
    > for crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse,
    > for crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync,
    > for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
            self.c.into_into_dart().into_dart(),
            self.d.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse,
    > for crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal,
    > for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.regular.into_into_dart().into_dart(),
self.r#type.into_into_dart().into_dart(),
self.r#async.into_into_dart().into_dart(),
self.another.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync> for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.regular.into_into_dart().into_dart(),
self.r#type.into_into_dart().into_dart(),
self.r#async.into_into_dart().into_dart(),
self.another.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse> for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse,
    > for crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync,
    > for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.regular.into_into_dart().into_dart(),
self.r#type.into_into_dart().into_dart(),
self.r#async.into_into_dart().into_dart(),
self.another.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse> for crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MyEnum {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::False => 0.into_dart(),
            Self::True => 1.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyEnum
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MyEnum>
    for crate::auxiliary::sample_types::MyEnum
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyEnum {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::MyNestedStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::MyNestedStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::MyNestedStructTwinNormal>
    for crate::api::misc_example::MyNestedStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse,
    > for crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MySize {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MySize
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MySize>
    for crate::auxiliary::sample_types::MySize
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MySize {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::stream::MyStreamEntryTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::stream::MyStreamEntryTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::stream::MyStreamEntryTwinNormal>
    for crate::api::stream::MyStreamEntryTwinNormal
{
    fn into_into_dart(self) -> crate::api::stream::MyStreamEntryTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync,
    > for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse,
    > for crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse,
    > for crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::auxiliary::sample_types::MyStruct {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.content.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::sample_types::MyStruct
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::auxiliary::sample_types::MyStruct>
    for crate::auxiliary::sample_types::MyStruct
{
    fn into_into_dart(self) -> crate::auxiliary::sample_types::MyStruct {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::MyTreeNodeTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::MyTreeNodeTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::MyTreeNodeTwinNormal>
    for crate::api::misc_example::MyTreeNodeTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse,
    > for crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_NestedRawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.raw.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for mirror_NestedRawStringMirrored
{
}
impl flutter_rust_bridge::IntoIntoDart<mirror_NestedRawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored
{
    fn into_into_dart(self) -> mirror_NestedRawStringMirrored {
        mirror_NestedRawStringMirrored(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct,
    > for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::newtype_pattern::NewTypeIntTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for crate::api::newtype_pattern::NewTypeIntTwinNormal
{
    fn into_into_dart(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync,
    > for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse,
    > for crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync,
    > for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse,
    > for crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::NoteTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::NoteTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::NoteTwinNormal>
    for crate::api::enumeration::NoteTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::NoteTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>
    for crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.day.into_into_dart().into_dart(),
            self.body.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_Numbers {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Numbers {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Numbers>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers
{
    fn into_into_dart(self) -> mirror_Numbers {
        mirror_Numbers(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct,
    > for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct
{
    fn into_into_dart(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_opaque::OpaqueNestedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for crate::api::rust_opaque::OpaqueNestedTwinNormal
{
    fn into_into_dart(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.first.into_into_dart().into_dart(),
self.second.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi> for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.first.into_into_dart().into_dart(),
            self.second.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi,
    > for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::optional::OptVecsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::optional::OptVecsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::optional::OptVecsTwinNormal>
    for crate::api::optional::OptVecsTwinNormal
{
    fn into_into_dart(self) -> crate::api::optional::OptVecsTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync,
    > for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse,
    > for crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>
    for crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync,
    > for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.i32.into_into_dart().into_dart(),
            self.enums.into_into_dart().into_dart(),
            self.strings.into_into_dart().into_dart(),
            self.buffers.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse,
    > for crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::array::PointTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::PointTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::PointTwinNormal>
    for crate::api::array::PointTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::PointTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse,
    > for crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sse::PointTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>
    for crate::api::pseudo_manual::array_twin_sse::PointTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::PointTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::PointTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse,
    > for crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_RawStringEnumMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(field0) => { [2.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_RawStringEnumMirrored {}
impl flutter_rust_bridge::IntoIntoDart<mirror_RawStringEnumMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored
{
    fn into_into_dart(self) -> mirror_RawStringEnumMirrored {
        mirror_RawStringEnumMirrored(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::raw_string::RawStringItemStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::raw_string::RawStringItemStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::raw_string::RawStringItemStructTwinNormal>
    for crate::api::raw_string::RawStringItemStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::raw_string::RawStringItemStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync,
    > for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.r#type.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse> for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse,
    > for crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync,
    > for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse,
    > for crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_RawStringMirrored {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_RawStringMirrored {}
impl flutter_rust_bridge::IntoIntoDart<mirror_RawStringMirrored>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored
{
    fn into_into_dart(self) -> mirror_RawStringMirrored {
        mirror_RawStringMirrored(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for mirror_Sequences {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for mirror_Sequences {}
impl flutter_rust_bridge::IntoIntoDart<mirror_Sequences>
    for crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences
{
    fn into_into_dart(self) -> mirror_Sequences {
        mirror_Sequences(self)
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::exception::SomeStructTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::exception::SomeStructTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::exception::SomeStructTwinNormal>
    for crate::api::exception::SomeStructTwinNormal
{
    fn into_into_dart(self) -> crate::api::exception::SomeStructTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync,
    > for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse,
    > for crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse,
    > for crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync,
    > for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse,
    > for crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::enumeration::SpeedTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::enumeration::SpeedTwinNormal::Unknown => [0.into_dart()].into_dart(),
            crate::api::enumeration::SpeedTwinNormal::GPS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::enumeration::SpeedTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::enumeration::SpeedTwinNormal>
    for crate::api::enumeration::SpeedTwinNormal
{
    fn into_into_dart(self) -> crate::api::enumeration::SpeedTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                field0,
            ) => [1.into_dart(), field0.into_into_dart().into_dart()].into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::Unknown => { [0.into_dart()].into_dart() }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::GPS(field0) => { [1.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::GPS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>
    for crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync,
    > for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::Unknown => {
                [0.into_dart()].into_dart()
            }
            crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::GPS(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse,
    > for crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::deliberate_name_conflict::StructInLowerLevel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.inner.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::deliberate_name_conflict::StructInLowerLevel
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::deliberate_name_conflict::StructInLowerLevel>
    for crate::api::deliberate_name_conflict::StructInLowerLevel
{
    fn into_into_dart(self) -> crate::api::deliberate_name_conflict::StructInLowerLevel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::deliberate_name_conflict::StructInUpperLevel {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.upper.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::deliberate_name_conflict::StructInUpperLevel
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::deliberate_name_conflict::StructInUpperLevel>
    for crate::deliberate_name_conflict::StructInUpperLevel
{
    fn into_into_dart(self) -> crate::deliberate_name_conflict::StructInUpperLevel {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::comment::StructWithCommentsTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::comment::StructWithCommentsTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::comment::StructWithCommentsTwinNormal>
    for crate::api::comment::StructWithCommentsTwinNormal
{
    fn into_into_dart(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync,
    > for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse,
    > for crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync,
    > for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.field_with_comments.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse,
    > for crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::StructWithEnumTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::StructWithEnumTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::StructWithEnumTwinNormal>
    for crate::api::misc_example::StructWithEnumTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse,
    >
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse,
    > for crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.auto_opaque.into_into_dart().into_dart(),
            self.normal.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal,
    > for crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal
{
    fn into_into_dart(
        self,
    ) -> crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync> for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse> for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse> for crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync> for crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse> for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auto_opaque.into_into_dart().into_dart(),
self.normal.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi> for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {
            fn into_into_dart(self) -> crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithOneFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithOneFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithOneFieldTwinNormal>
    for crate::api::structure::StructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse> for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse,
    > for crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse,
    > for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithTwoFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithTwoFieldTwinNormal>
    for crate::api::structure::StructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse> for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse,
    > for crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse,
    > for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure::StructWithZeroFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::StructWithZeroFieldTwinNormal>
    for crate::api::structure::StructWithZeroFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    Vec::<u8>::new().into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse> for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse,
    > for crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse,
    > for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::method::SumWithTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::method::SumWithTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::method::SumWithTwinNormal>
    for crate::api::method::SumWithTwinNormal
{
    fn into_into_dart(self) -> crate::api::method::SumWithTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync,
    > for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse,
    > for crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>
    for crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.x.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse,
    > for crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::chrono_type::TestChronoTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::chrono_type::TestChronoTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::chrono_type::TestChronoTwinNormal>
    for crate::api::chrono_type::TestChronoTwinNormal
{
    fn into_into_dart(self) -> crate::api::chrono_type::TestChronoTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync,
    > for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.dt.into_into_dart().into_dart(),
            self.dt2.into_into_dart().into_dart(),
            self.du.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync,
    > for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::array::TestIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::array::TestIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::array::TestIdTwinNormal>
    for crate::api::array::TestIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::array::TestIdTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync,
    > for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse,
    > for crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>
    for crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse,
    > for crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::type_alias::TestModelTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::type_alias::TestModelTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::type_alias::TestModelTwinNormal>
    for crate::api::type_alias::TestModelTwinNormal
{
    fn into_into_dart(self) -> crate::api::type_alias::TestModelTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync,
    > for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse,
    > for crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse,
    > for crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync,
    > for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.alias_enum.into_into_dart().into_dart(),
            self.alias_struct.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse,
    > for crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for crate::api::structure::TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    >
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.0.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse> for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse,
    > for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse,
    > for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for crate::api::structure::TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    >
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.0.into_into_dart().into_dart(),
self.1.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse> for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse,
    > for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync,
    > for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse,
    > for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::attribute::UserIdTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::attribute::UserIdTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::attribute::UserIdTwinNormal>
    for crate::api::attribute::UserIdTwinNormal
{
    fn into_into_dart(self) -> crate::api::attribute::UserIdTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync,
    > for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse,
    > for crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>
    for crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync,
    > for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.value.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse,
    > for crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
}
impl
    flutter_rust_bridge::IntoIntoDart<crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal>
    for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal
{
    fn into_into_dart(self) -> crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.int8list.into_into_dart().into_dart(),
self.uint8list.into_into_dart().into_dart(),
self.int16list.into_into_dart().into_dart(),
self.uint16list.into_into_dart().into_dart(),
self.uint32list.into_into_dart().into_dart(),
self.int32list.into_into_dart().into_dart(),
self.uint64list.into_into_dart().into_dart(),
self.int64list.into_into_dart().into_dart(),
self.float32list.into_into_dart().into_dart(),
self.float64list.into_into_dart().into_dart(),
self.bool_list.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync> for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
            fn into_into_dart(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.int8list.into_into_dart().into_dart(),
self.uint8list.into_into_dart().into_dart(),
self.int16list.into_into_dart().into_dart(),
self.uint16list.into_into_dart().into_dart(),
self.uint32list.into_into_dart().into_dart(),
self.int32list.into_into_dart().into_dart(),
self.uint64list.into_into_dart().into_dart(),
self.int64list.into_into_dart().into_dart(),
self.float32list.into_into_dart().into_dart(),
self.float64list.into_into_dart().into_dart(),
self.bool_list.into_into_dart().into_dart()
                ].into_dart()
                }
            }
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse> for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
            fn into_into_dart(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse,
    > for crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync,
    > for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.int8list.into_into_dart().into_dart(),
            self.uint8list.into_into_dart().into_dart(),
            self.int16list.into_into_dart().into_dart(),
            self.uint16list.into_into_dart().into_dart(),
            self.uint32list.into_into_dart().into_dart(),
            self.int32list.into_into_dart().into_dart(),
            self.uint64list.into_into_dart().into_dart(),
            self.int64list.into_into_dart().into_dart(),
            self.float32list.into_into_dart().into_dart(),
            self.float64list.into_into_dart().into_dart(),
            self.bool_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse,
    >
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
    {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::misc_example::WeekdaysTwinNormal {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::misc_example::WeekdaysTwinNormal
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::misc_example::WeekdaysTwinNormal>
    for crate::api::misc_example::WeekdaysTwinNormal
{
    fn into_into_dart(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse,
    > for crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync,
    > for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync
{
    fn into_into_dart(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Monday => 0.into_dart(),
            Self::Tuesday => 1.into_dart(),
            Self::Wednesday => 2.into_dart(),
            Self::Thursday => 3.into_dart(),
            Self::Friday => 4.into_dart(),
            Self::Saturday => 5.into_dart(),
            Self::Sunday => 6.into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse,
    > for crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse
{
    fn into_into_dart(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Box<dyn Fn(String) -> String + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSse>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSseMoi>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn HelloTraitTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinSyncSseMoi>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinNormal + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinRustAsync + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinRustAsyncSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSseMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSse + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSyncMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSync + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSyncSseMoi + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for Box<dyn MyTraitTwinSyncSse + Send + Sync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSse + Send + Sync>,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleTwinRustAsyncSseMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for NonCloneSimpleTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueOneTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueOneTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueOneTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueOneTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueOneTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueOneTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueTwoTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueTwoTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueTwoTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueTwoTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for OpaqueTwoTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode for OpaqueTwoTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructInMiscNoTwinExampleA {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinNormal,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsync,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinRustAsyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSse,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSseMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSync,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSse,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for StructWithGoodAndOpaqueFieldTwinSyncSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
            >,
        >>::sse_encode(
            flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self),
            serializer,
        );
    }
}

impl SseEncode for backtrace::Backtrace {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Time(Duration)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Local> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Time(Local)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for chrono::NaiveDateTime {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Time(Naive)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Time(Utc)) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for flutter_rust_bridge::DartOpaque {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.encode(), serializer);
    }
}

impl SseEncode for [flutter_rust_bridge::DartOpaque; 1] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<flutter_rust_bridge::DartOpaque>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashMap<String, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, Vec<u8>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<String, crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(String, crate::auxiliary::sample_types::MySize)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode for std::collections::HashMap<i32, String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, String)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>>::sse_encode(
            self.into_iter().collect(),
            serializer,
        );
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode
    for std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
        )>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, bool)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, f32)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, f64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, i16)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, i32)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, i64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, i8)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, isize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, isize)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, Vec<u8>)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, u16)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, u32)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, u64)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, u8)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashMap<i32, usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<(i32, usize)>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Box<dyn DartDebugTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Box<dyn DartDebugTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueReturnTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueReturnTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueSyncReturnTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueSyncReturnTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<FrbOpaqueSyncReturnTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<FrbOpaqueSyncReturnTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataAnotherTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<HideDataAnotherTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<HideDataAnotherTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataAnotherTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinNormal>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinNormal>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinRustAsyncMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinRustAsyncSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinRustAsyncSse>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinRustAsync>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinRustAsync>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinSseMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinSse>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinSyncMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinSyncMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueNom<HideDataTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<HideDataTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for [RustOpaqueMoi<HideDataTwinSyncSseMoi>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueMoi<HideDataTwinSyncSseMoi>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinSyncSse>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinSyncSse>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [RustOpaqueNom<HideDataTwinSync>; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<RustOpaqueNom<HideDataTwinSync>>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<Mutex<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<Mutex<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinRustAsyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinRustAsyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinSyncMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<NonCloneDataTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<NonCloneDataTwinSyncSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<RwLock<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<RwLock<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn HelloTraitTwinRustAsyncSseMoi>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinNormal + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsync + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSync + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSse + Send + Sync>,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSseMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueOneTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinRustAsyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSseMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncMoi>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<OpaqueTwoTwinSyncSseMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinMoi>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinNormal,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsync,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSync,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueMoi<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for RustOpaqueNom<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for std::collections::HashSet<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<String>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for std::collections::HashSet<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self.into_iter().collect(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for uuid::Uuid {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Delegate(Uuid) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for crate::api::misc_example::ATwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::misc_example::AbcTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::misc_example::AbcTwinNormal::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::misc_example::ATwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::misc_example::BTwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::misc_example::CTwinNormal>::sse_encode(field0, serializer);
            }
            crate::api::misc_example::AbcTwinNormal::JustInt(field0) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                field0,
            ) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::A(field0) => { <i32>::sse_encode(0, serializer); <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::B(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::C(field0) => { <i32>::sse_encode(2, serializer); <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::JustInt(field0) => { <i32>::sse_encode(3, serializer); <i32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::JustInt(field0) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(field0) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::C(field0) => {
                <i32>::sse_encode(2, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::JustInt(
                field0,
            ) => {
                <i32>::sse_encode(3, serializer);
                <i32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::inside_macro::AnotherMacroStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.data, serializer);
        <i32>::sse_encode(self.non_final_data, serializer);
    }
}

impl SseEncode for crate::api::mirror::AnotherTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>>::sse_encode(
            self.vars, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <bool>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
                x,
                y,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(x, serializer);
                <i32>::sse_encode(y, serializer);
            }
            crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit => {
                <i32>::sse_encode(2, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Standalone => 0,
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode::Embedded => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.version, serializer);
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>::sse_encode(
            self.mode, serializer,
        );
        <Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>::sse_encode(
            self.env, serializer,
        );
        <Option<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>::sse_encode(
            self.env_optional,
            serializer,
        );
    }
}

impl SseEncode for crate::api::optional::AttributeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::misc_example::BTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Apple { field } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field, serializer);
            }
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Orange => {
                <i32>::sse_encode(1, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Apple{field} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field, serializer);
 }
crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Orange => { <i32>::sse_encode(1, serializer);  }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Apple{field} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field, serializer);
 }
crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Orange => { <i32>::sse_encode(1, serializer);  }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Apple { field } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field, serializer);
            }
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Orange => {
                <i32>::sse_encode(1, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Apple {
                field,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field, serializer);
            }
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Orange => {
                <i32>::sse_encode(1, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Apple{field} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field, serializer);
 }
crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Orange => { <i32>::sse_encode(1, serializer);  }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Apple => 0,
                crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal::Orange => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Apple => { 0 }
crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync::Orange => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse::Apple => { 0 }
crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse::Orange => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse::Apple => 0,
                crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse::Orange => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Apple => 0,
                crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync::Orange => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse::Apple => { 0 }
crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse::Orange => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic::BasicStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.apple, serializer);
        <Option<i32>>::sse_encode(self.orange, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>>::sse_encode(self.left, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>>::sse_encode(self.right, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>>::sse_encode(self.left, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>>::sse_encode(self.right, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.name, serializer);
<Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>>::sse_encode(self.left, serializer);
<Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>>::sse_encode(self.right, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>>::sse_encode(self.left, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>>::sse_encode(self.right, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>,
        >>::sse_encode(self.left, serializer);
        <Option<
            Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>,
        >>::sse_encode(self.right, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>>::sse_encode(self.left, serializer);
        <Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>>::sse_encode(self.right, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.first, serializer);
        <Vec<u8>>::sse_encode(self.second, serializer);
        <Vec<u8>>::sse_encode(self.third, serializer);
    }
}

impl SseEncode for crate::api::misc_example::BigBuffersTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i64>>::sse_encode(self.int64, serializer);
        <Vec<u64>>::sse_encode(self.uint64, serializer);
    }
}

impl SseEncode for crate::api::array::BlobTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>::sse_encode(*self, serializer);}
                }

impl SseEncode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::array::BlobTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::array::BlobTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::DistanceTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::DistanceTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::optional::ExoticOptionalsTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::optional::ExoticOptionalsTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::array::FeedIdTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::array::FeedIdTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i8>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::KitchenSinkTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::KitchenSinkTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::auxiliary::sample_types::MySize>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::enumeration::SpeedTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::enumeration::SpeedTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u8>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<[u8; 1600]> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 1600]>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<[u8; 8]> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(*self, serializer);
    }
}

impl SseEncode
    for Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_encode(
            *self, serializer,
        );
    }
}

impl SseEncode for crate::api::misc_example::CTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.c, serializer);
    }
}

impl SseEncode for crate::api::method::ConcatenateWithTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::mirror::ContainsMirroredSubStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::mirror::AnotherTwinNormal>::sse_encode(self.test2, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(self.test, serializer);
<crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse>::sse_encode(self.test2, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.test, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse>::sse_encode(
            self.test2, serializer,
        );
    }
}

impl SseEncode for crate::api::exception::CustomEnumErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomEnumErrorTwinNormal::One { message, backtrace } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::exception::CustomEnumErrorTwinNormal::Two { message, backtrace } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::One{message,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::Two{message,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::One {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::Two {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                message,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(message, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::One{message,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::Two{message,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(message, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomErrorTwinNormal::Error0 { e, backtrace } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::exception::CustomErrorTwinNormal::Error1 { e, backtrace } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error0{e,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error1{e,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error0 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error1 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                e,
                backtrace,
            } => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(e, serializer);
                <backtrace::Backtrace>::sse_encode(backtrace, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error0{e,backtrace} => { <i32>::sse_encode(0, serializer); <String>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error1{e,backtrace} => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(e, serializer);
<backtrace::Backtrace>::sse_encode(backtrace, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomNestedError1TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::exception::CustomNestedError2TwinNormal>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::CustomNested1(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::ErrorNested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::CustomNested1(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::ErrorNested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::CustomNested1(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::ErrorNested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomNestedError2TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2Number(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2Number(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2Number(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomNestedErrorInnerTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(field0) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Three(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Four(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }}
                }

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Three(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Four(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <u32>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Three(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Four(field0) => { <i32>::sse_encode(1, serializer); <u32>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomNestedErrorOuterTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::exception::CustomNestedErrorOuterTwinNormal::One(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(field0) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::exception::CustomNestedErrorInnerTwinNormal>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::One(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::Two(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse>::sse_encode(field0, serializer);
 }
 }}
                }

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::One(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::Two(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::One(field0) => { <i32>::sse_encode(0, serializer); <String>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::Two(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::exception::CustomStructErrorAnotherTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.message, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::exception::CustomStructErrorTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::exception::CustomStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::api::attribute::CustomizedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.final_field, serializer);
        <Option<String>>::sse_encode(self.non_final_field, serializer);
    }
}

impl SseEncode for crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.first, serializer);
        <flutter_rust_bridge::DartOpaque>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::DartAbi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("The type Dynamic(IrTypeDynamic) is not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue");
    }
}

impl SseEncode for crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.name, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::api::enumeration::DistanceTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::DistanceTwinNormal::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::DistanceTwinNormal::Map(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map(field0) => { <i32>::sse_encode(1, serializer); <f64>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Unknown => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Map(field0) => { <i32>::sse_encode(1, serializer); <f64>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Map(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Map(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::optional::ElementTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Option<Vec<crate::api::optional::ElementTwinNormal>>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
        >>::sse_encode(self.attributes, serializer);
        <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>,
        >>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tag, serializer);
        <Option<String>>::sse_encode(self.text, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>::sse_encode(self.attributes, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::misc_type::EmptyTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(field0) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(field0) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive(field0) => { <i32>::sse_encode(0, serializer); <i32>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque(field0) => { <i32>::sse_encode(1, serializer); <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Primitive(field0) => { <i32>::sse_encode(0, serializer); <i32>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Opaque(field0) => { <i32>::sse_encode(1, serializer); <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Opaque(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <i32>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Primitive(field0) => { <i32>::sse_encode(0, serializer); <i32>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Opaque(field0) => { <i32>::sse_encode(1, serializer); <flutter_rust_bridge::DartOpaque>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Struct(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustOpaqueMoi<HideDataTwinMoi>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::TraitObj(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <RustOpaqueMoi<Box<dyn DartDebugTwinMoi>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <RustOpaqueMoi<Mutex<HideDataTwinMoi>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::RwLock(field0) => {
                <i32>::sse_encode(4, serializer);
                <RustOpaqueMoi<RwLock<HideDataTwinMoi>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Nothing => {
                <i32>::sse_encode(5, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::rust_opaque::EnumOpaqueTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustOpaqueNom<HideDataTwinNormal>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(field0) => {
                <i32>::sse_encode(1, serializer);
                <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(field0) => {
                <i32>::sse_encode(2, serializer);
                <RustOpaqueNom<Box<dyn DartDebugTwinNormal>>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <RustOpaqueNom<Mutex<HideDataTwinNormal>>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(field0) => {
                <i32>::sse_encode(4, serializer);
                <RustOpaqueNom<RwLock<HideDataTwinNormal>>>::sse_encode(field0, serializer);
            }
            crate::api::rust_opaque::EnumOpaqueTwinNormal::Nothing => {
                <i32>::sse_encode(5, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueNom<HideDataTwinRustAsync>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueNom<Box < dyn DartDebugTwinRustAsync >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueNom<Mutex < HideDataTwinRustAsync >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueNom<RwLock < HideDataTwinRustAsync >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueMoi<Box < dyn DartDebugTwinRustAsyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueMoi<Mutex < HideDataTwinRustAsyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueMoi<RwLock < HideDataTwinRustAsyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueNom<Box < dyn DartDebugTwinRustAsyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueNom<Mutex < HideDataTwinRustAsyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueNom<RwLock < HideDataTwinRustAsyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueMoi<Box < dyn DartDebugTwinRustAsyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueMoi<Mutex < HideDataTwinRustAsyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueMoi<RwLock < HideDataTwinRustAsyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Nothing => { <i32>::sse_encode(5, serializer);  }
 }}
                }

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi;
        5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Struct(field0) => {
                <i32>::sse_encode(0, serializer);
                <RustOpaqueNom<HideDataTwinSse>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::TraitObj(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <RustOpaqueNom<Box<dyn DartDebugTwinSse>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <RustOpaqueNom<Mutex<HideDataTwinSse>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::RwLock(field0) => {
                <i32>::sse_encode(4, serializer);
                <RustOpaqueNom<RwLock<HideDataTwinSse>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Nothing => {
                <i32>::sse_encode(5, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueMoi<Box < dyn DartDebugTwinSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueMoi<Mutex < HideDataTwinSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueMoi<RwLock < HideDataTwinSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode for [crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <RustOpaqueNom<HideDataTwinSync>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                field0,
            ) => {
                <i32>::sse_encode(2, serializer);
                <RustOpaqueNom<Box<dyn DartDebugTwinSync>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(field0) => {
                <i32>::sse_encode(3, serializer);
                <RustOpaqueNom<Mutex<HideDataTwinSync>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                field0,
            ) => {
                <i32>::sse_encode(4, serializer);
                <RustOpaqueNom<RwLock<HideDataTwinSync>>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Nothing => {
                <i32>::sse_encode(5, serializer);
            }
        }
    }
}

impl SseEncode for [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueMoi<Box < dyn DartDebugTwinSyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueMoi<Mutex < HideDataTwinSyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueMoi<RwLock < HideDataTwinSyncMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueNom<HideDataTwinSyncSse>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueNom<i32>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueNom<Box < dyn DartDebugTwinSyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueNom<Mutex < HideDataTwinSyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueNom<RwLock < HideDataTwinSyncSse >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Struct(field0) => { <i32>::sse_encode(0, serializer); <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Primitive(field0) => { <i32>::sse_encode(1, serializer); <RustOpaqueMoi<i16>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::TraitObj(field0) => { <i32>::sse_encode(2, serializer); <RustOpaqueMoi<Box < dyn DartDebugTwinSyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Mutex(field0) => { <i32>::sse_encode(3, serializer); <RustOpaqueMoi<Mutex < HideDataTwinSyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::RwLock(field0) => { <i32>::sse_encode(4, serializer); <RustOpaqueMoi<RwLock < HideDataTwinSyncSseMoi >>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Nothing => { <i32>::sse_encode(5, serializer);  }
 }
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi; 5]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::enumeration::EnumSimpleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::enumeration::EnumSimpleTwinNormal::A => 0,
                crate::api::enumeration::EnumSimpleTwinNormal::B => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::A => { 0 }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync::B => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse::A => { 0 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse::B => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse::A => 0,
                crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse::B => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::A => 0,
                crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync::B => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse::A => 0,
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse::B => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::enumeration::EnumWithDiscriminantTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::enumeration::EnumWithDiscriminantTwinNormal::OneHundred => 0,
                crate::api::enumeration::EnumWithDiscriminantTwinNormal::Fifty => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::OneHundred => { 0 }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithDiscriminantTwinRustAsync::Fifty => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse::OneHundred => { 0 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithDiscriminantTwinRustAsyncSse::Fifty => { 1 }
 _ => { unimplemented!(""); }}, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse::OneHundred => { 0 }
crate::api::pseudo_manual::enumeration_twin_sse::EnumWithDiscriminantTwinSse::Fifty => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::OneHundred => { 0 }
crate::api::pseudo_manual::enumeration_twin_sync::EnumWithDiscriminantTwinSync::Fifty => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse::OneHundred => { 0 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithDiscriminantTwinSyncSse::Fifty => { 1 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemMixedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemMixedTwinNormal::A => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::EnumWithItemMixedTwinNormal::C { c_field } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(c_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field} => { <i32>::sse_encode(2, serializer); <String>::sse_encode(c_field, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::A => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::C{c_field} => { <i32>::sse_encode(2, serializer); <String>::sse_encode(c_field, serializer);
 }
 }}
                }

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::A => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::C {
                c_field,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(c_field, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                c_field,
            } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(c_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::A => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::C{c_field} => { <i32>::sse_encode(2, serializer); <String>::sse_encode(c_field, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemStructTwinNormal::A { a_field } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(a_field, serializer);
            }
            crate::api::enumeration::EnumWithItemStructTwinNormal::B { b_field } => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(b_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field} => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(a_field, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field} => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(b_field, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::A{a_field} => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(a_field, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::B{b_field} => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(b_field, serializer);
 }
 }}
                }

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::A {
                a_field,
            } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(a_field, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::B {
                b_field,
            } => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(b_field, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                a_field,
            } => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(a_field, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                b_field,
            } => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(b_field, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::A{a_field} => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(a_field, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::B{b_field} => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(b_field, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::enumeration::EnumWithItemTupleTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::EnumWithItemTupleTwinNormal::A(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::EnumWithItemTupleTwinNormal::B(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A(field0) => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::A(field0) => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(field0, serializer);
 }
 }}
                }

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::A(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Vec<i32>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::A(field0) => { <i32>::sse_encode(0, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::B(field0) => { <i32>::sse_encode(1, serializer); <Vec<i32>>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::event_listener::EventTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <String>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for crate::api::optional::ExoticOptionalsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_encode(
            self.attributes_nullable,
            serializer,
        );
        <Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>>>::sse_encode(
            self.nullable_attributes,
            serializer,
        );
        <Option<crate::api::newtype_pattern::NewTypeIntTwinNormal>>::sse_encode(
            self.newtypeint,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes, serializer);
        <Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>>::sse_encode(self.attributes_nullable, serializer);
        <Option<
            Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >,
        >>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<
            Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
        >>::sse_encode(self.attributes, serializer);
        <Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >>::sse_encode(self.attributes_nullable, serializer);
        <Option<Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>>>>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>::sse_encode(
            self.attributes_nullable,
            serializer,
        );
        <Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes,
            serializer,
        );
        <Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(
            self.attributes_nullable,
            serializer,
        );
        <Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<i32>>::sse_encode(self.int32, serializer);
        <Option<i64>>::sse_encode(self.int64, serializer);
        <Option<f64>>::sse_encode(self.float64, serializer);
        <Option<bool>>::sse_encode(self.boolean, serializer);
        <Option<Vec<u8>>>::sse_encode(self.zerocopy, serializer);
        <Option<Vec<i8>>>::sse_encode(self.int8list, serializer);
        <Option<Vec<u8>>>::sse_encode(self.uint8list, serializer);
        <Option<Vec<i32>>>::sse_encode(self.int32list, serializer);
        <Option<Vec<f32>>>::sse_encode(self.float32list, serializer);
        <Option<Vec<f64>>>::sse_encode(self.float64list, serializer);
        <Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>::sse_encode(self.attributes, serializer);
        <Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>::sse_encode(self.attributes_nullable, serializer);
        <Option<
            Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>,
        >>::sse_encode(self.nullable_attributes, serializer);
        <Option<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>>::sse_encode(self.newtypeint, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [f64; 16] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<f64>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::chrono_type::FeatureChronoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.utc, serializer);
        <chrono::DateTime<chrono::Local>>::sse_encode(self.local, serializer);
        <chrono::Duration>::sse_encode(self.duration, serializer);
        <chrono::NaiveDateTime>::sse_encode(self.naive, serializer);
    }
}

impl SseEncode for crate::api::uuid_type::FeatureUuidTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <uuid::Uuid>::sse_encode(self.one, serializer);
    }
}

impl SseEncode for crate::api::array::FeedIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 8]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for i16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for [i32; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i8(self).unwrap();
    }
}

impl SseEncode for isize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_i64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::enumeration::KitchenSinkTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::KitchenSinkTwinNormal::Empty => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                int32,
                float64,
                boolean,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(int32, serializer);
                <f64>::sse_encode(float64, serializer);
                <bool>::sse_encode(boolean, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Nested(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(field0, serializer);
                <Box<crate::api::enumeration::KitchenSinkTwinNormal>>::sse_encode(
                    field1, serializer,
                );
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Optional(field0, field1) => {
                <i32>::sse_encode(3, serializer);
                <Option<i32>>::sse_encode(field0, serializer);
                <Option<i32>>::sse_encode(field1, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Buffer(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::KitchenSinkTwinNormal::Enums(field0) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32,float64,boolean} => { <i32>::sse_encode(1, serializer); <i32>::sse_encode(int32, serializer);
<f64>::sse_encode(float64, serializer);
<bool>::sse_encode(boolean, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested(field0,field1) => { <i32>::sse_encode(2, serializer); <i32>::sse_encode(field0, serializer);
<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional(field0,field1) => { <i32>::sse_encode(3, serializer); <Option<i32>>::sse_encode(field0, serializer);
<Option<i32>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer(field0) => { <i32>::sse_encode(4, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums(field0) => { <i32>::sse_encode(5, serializer); <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Empty => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Primitives{int32,float64,boolean} => { <i32>::sse_encode(1, serializer); <i32>::sse_encode(int32, serializer);
<f64>::sse_encode(float64, serializer);
<bool>::sse_encode(boolean, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Nested(field0,field1) => { <i32>::sse_encode(2, serializer); <i32>::sse_encode(field0, serializer);
<Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Optional(field0,field1) => { <i32>::sse_encode(3, serializer); <Option<i32>>::sse_encode(field0, serializer);
<Option<i32>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Buffer(field0) => { <i32>::sse_encode(4, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Enums(field0) => { <i32>::sse_encode(5, serializer); <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Empty => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Primitives {
                int32,
                float64,
                boolean,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(int32, serializer);
                <f64>::sse_encode(float64, serializer);
                <bool>::sse_encode(boolean, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Nested(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(field0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Optional(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(3, serializer);
                <Option<i32>>::sse_encode(field0, serializer);
                <Option<i32>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Buffer(field0) => {
                <i32>::sse_encode(4, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Enums(field0) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                int32,
                float64,
                boolean,
            } => {
                <i32>::sse_encode(1, serializer);
                <i32>::sse_encode(int32, serializer);
                <f64>::sse_encode(float64, serializer);
                <bool>::sse_encode(boolean, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(2, serializer);
                <i32>::sse_encode(field0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                field0,
                field1,
            ) => {
                <i32>::sse_encode(3, serializer);
                <Option<i32>>::sse_encode(field0, serializer);
                <Option<i32>>::sse_encode(field1, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                field0,
            ) => {
                <i32>::sse_encode(4, serializer);
                <Vec<u8>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                field0,
            ) => {
                <i32>::sse_encode(5, serializer);
                <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Empty => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Primitives{int32,float64,boolean} => { <i32>::sse_encode(1, serializer); <i32>::sse_encode(int32, serializer);
<f64>::sse_encode(float64, serializer);
<bool>::sse_encode(boolean, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Nested(field0,field1) => { <i32>::sse_encode(2, serializer); <i32>::sse_encode(field0, serializer);
<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Optional(field0,field1) => { <i32>::sse_encode(3, serializer); <Option<i32>>::sse_encode(field0, serializer);
<Option<i32>>::sse_encode(field1, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Buffer(field0) => { <i32>::sse_encode(4, serializer); <Vec<u8>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Enums(field0) => { <i32>::sse_encode(5, serializer); <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for Vec<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <chrono::Duration>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<chrono::DateTime<chrono::Local>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <chrono::DateTime<chrono::Local>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <chrono::NaiveDateTime>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<flutter_rust_bridge::DartOpaque> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <flutter_rust_bridge::DartOpaque>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinNormal>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinRustAsync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinSync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueNom<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueNom<HideDataTwinSyncSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<RustOpaqueMoi<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::optional::AttributeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::optional::AttributeTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <bool>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::optional::ElementTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::optional::ElementTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::rust_opaque::EnumOpaqueTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>::sse_encode(item, serializer); }}
                }

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::auxiliary::sample_types::MyEnum> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::auxiliary::sample_types::MyEnum>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::auxiliary::sample_types::MySize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::auxiliary::sample_types::MySize>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>>::sse_encode(
            self.raw, serializer,
        );
    }
}

impl SseEncode for Vec<Option<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<String>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::optional::AttributeTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::optional::AttributeTwinNormal>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<
        Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<i32>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::misc_example::WeekdaysTwinNormal>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<
        Option<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<Option<Vec<i32>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Option<Vec<i32>>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::array::PointTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::array::PointTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sse::PointTwinSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync::PointTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <f64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i16>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <i8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u16>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u32>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u64>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                i32,
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, bool)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, bool)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, f32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, f32)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, f64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, f64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, i16)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, i16)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, i32)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, i64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, i64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, i8)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, i8)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, isize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, isize)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, Vec<u8>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, u16)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, u16)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, u32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, u32)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, u64)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, u64)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, u8)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, u8)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(i32, usize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(i32, usize)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::enumeration::EnumSimpleTwinNormal)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String,crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, i32)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::api::enumeration::KitchenSinkTwinNormal)>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String,crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(
                String,
                crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
            )>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, Vec<u8>)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, Vec<u8>)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, crate::auxiliary::sample_types::MySize)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, crate::auxiliary::sample_types::MySize)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<(String, String)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <(String, String)>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::method::SumWithTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::method::SumWithTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::array::TestIdTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::array::TestIdTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode
    for Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                item, serializer,
            );
        }
    }
}

impl SseEncode for Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::method::Log2TwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::stream::LogTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.key, serializer);
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::inside_macro::MacroStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.data, serializer);
    }
}

impl SseEncode for crate::api::enumeration::MeasureTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::MeasureTwinNormal::Speed(field0) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::enumeration::SpeedTwinNormal>>::sse_encode(field0, serializer);
            }
            crate::api::enumeration::MeasureTwinNormal::Distance(field0) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::enumeration::DistanceTwinNormal>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed(field0) => { <i32>::sse_encode(0, serializer); <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance(field0) => { <i32>::sse_encode(1, serializer); <Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Speed(field0) => { <i32>::sse_encode(0, serializer); <Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Distance(field0) => { <i32>::sse_encode(1, serializer); <Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Speed(field0) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Distance(field0) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>>::sse_encode(
                    field0, serializer,
                );
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(field0) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>::sse_encode(
                    field0, serializer,
                );
            }
            crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(field0) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Speed(
                field0,
            ) => {
                <i32>::sse_encode(0, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>>::sse_encode(field0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Distance(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::array::MessageIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[u8; 32]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::mirror::MirrorStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.a, serializer,
        );
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.b, serializer);
        <Vec<crate::auxiliary::sample_types::MyEnum>>::sse_encode(self.c, serializer);
        <Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>::sse_encode(
            self.d, serializer,
        );
    }
}

impl SseEncode for crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.regular, serializer);
        <String>::sse_encode(self.r#type, serializer);
        <bool>::sse_encode(self.r#async, serializer);
        <String>::sse_encode(self.another, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.regular, serializer);
<String>::sse_encode(self.r#type, serializer);
<bool>::sse_encode(self.r#async, serializer);
<String>::sse_encode(self.another, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.regular, serializer);
<String>::sse_encode(self.r#type, serializer);
<bool>::sse_encode(self.r#async, serializer);
<String>::sse_encode(self.another, serializer);}
                }

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.regular, serializer);
        <String>::sse_encode(self.r#type, serializer);
        <bool>::sse_encode(self.r#async, serializer);
        <String>::sse_encode(self.another, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.regular, serializer);
        <String>::sse_encode(self.r#type, serializer);
        <bool>::sse_encode(self.r#async, serializer);
        <String>::sse_encode(self.another, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.regular, serializer);
<String>::sse_encode(self.r#type, serializer);
<bool>::sse_encode(self.r#async, serializer);
<String>::sse_encode(self.another, serializer);}
                }

impl SseEncode for crate::auxiliary::sample_types::MyEnum {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::auxiliary::sample_types::MyEnum::False => 0,
                crate::auxiliary::sample_types::MyEnum::True => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::misc_example::MyNestedStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::MyTreeNodeTwinNormal>::sse_encode(self.tree_node, serializer);
        <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(self.weekday, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>::sse_encode(self.tree_node, serializer);
        <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(self.weekday, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>::sse_encode(self.tree_node, serializer);
        <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_encode(self.weekday, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>::sse_encode(
            self.tree_node,
            serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_encode(
            self.weekday,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>::sse_encode(
            self.tree_node,
            serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
            self.weekday,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>::sse_encode(
            self.tree_node,
            serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_encode(
            self.weekday,
            serializer,
        );
    }
}

impl SseEncode for crate::auxiliary::sample_types::MySize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.width, serializer);
        <i32>::sse_encode(self.height, serializer);
    }
}

impl SseEncode for crate::api::stream::MyStreamEntryTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.hello, serializer);
    }
}

impl SseEncode for crate::auxiliary::sample_types::MyStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.content, serializer);
    }
}

impl SseEncode for crate::api::misc_example::MyTreeNodeTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
        >>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>::sse_encode(
            self.children,
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.value_i32, serializer);
        <Vec<u8>>::sse_encode(self.value_vec_u8, serializer);
        <bool>::sse_encode(self.value_boolean, serializer);
        <Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>>::sse_encode(self.children, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(
            self.raw, serializer,
        );
    }
}

impl SseEncode for crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field, serializer);
    }
}

impl SseEncode for crate::api::newtype_pattern::NewTypeIntTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::enumeration::NoteTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::misc_example::WeekdaysTwinNormal>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>::sse_encode(
            self.day, serializer,
        );
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>::sse_encode(
            self.day, serializer,
        );
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>::sse_encode(self.day, serializer);
        <String>::sse_encode(self.body, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<HideDataTwinMoi>>::sse_encode(self.first, serializer);
        <RustOpaqueMoi<HideDataTwinMoi>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::rust_opaque::OpaqueNestedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinNormal>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinNormal>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinRustAsync>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinRustAsync>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_encode(self.first, serializer);
        <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_encode(self.first, serializer);
<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_encode(self.second, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinSse>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinSse>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_encode(self.first, serializer);
        <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinSync>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinSync>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_encode(self.first, serializer);
        <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<HideDataTwinSyncSse>>::sse_encode(self.first, serializer);
        <RustOpaqueNom<HideDataTwinSyncSse>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_encode(self.first, serializer);
        <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_encode(self.second, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::Duration> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::Duration>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::NaiveDateTime> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::NaiveDateTime>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<chrono::DateTime<chrono::Utc>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <chrono::DateTime<chrono::Utc>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<flutter_rust_bridge::DartOpaque> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <flutter_rust_bridge::DartOpaque>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataAnotherTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataAnotherTwinMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataAnotherTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataAnotherTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataAnotherTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataAnotherTwinSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataAnotherTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataAnotherTwinSseMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinRustAsync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinRustAsync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinRustAsyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinRustAsyncMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinRustAsyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinRustAsyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinRustAsyncSseMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinSseMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinSync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinSyncMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinSyncMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueNom<HideDataTwinSyncSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueNom<HideDataTwinSyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<RustOpaqueMoi<HideDataTwinSyncSseMoi>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <RustOpaqueMoi<HideDataTwinSyncSseMoi>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::optional::AttributeTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::optional::AttributeTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::optional::ElementTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::optional::ElementTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::optional::ExoticOptionalsTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::optional::ExoticOptionalsTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<f64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <f64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i16>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<isize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <isize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::enumeration::MeasureTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::enumeration::MeasureTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::newtype_pattern::NewTypeIntTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::newtype_pattern::NewTypeIntTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<(String, i32)> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <(String, i32)>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u16> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u16>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u8>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<usize> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <usize>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::misc_example::WeekdaysTwinNormal> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::misc_example::WeekdaysTwinNormal>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>>::sse_encode(value, serializer);
                }}
                }

impl SseEncode for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>>::sse_encode(value, serializer);
                }}
                }

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<bool>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<bool>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<crate::api::optional::ExoticOptionalsTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::optional::ExoticOptionalsTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>>::sse_encode(value, serializer);
                }}
                }

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<f64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<i32>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<i64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<i64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<i8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<i8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Box<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Box<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::optional::AttributeTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::optional::AttributeTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::optional::ElementTwinNormal>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::optional::ElementTwinNormal>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode for Option<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>::sse_encode(
                value, serializer,
            );
        }
    }
}

impl SseEncode
    for Option<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<Option<crate::api::optional::AttributeTwinNormal>>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<crate::api::optional::AttributeTwinNormal>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<
                Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>,
            >>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<
        Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >,
    >
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode
    for Option<Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<f32>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<f64>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<f64>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<i32>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<i32>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<i8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<i8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::api::optional::OptVecsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>::sse_encode(
            self.enums, serializer,
        );
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<Option<i32>>>::sse_encode(self.i32, serializer);
        <Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>>::sse_encode(self.enums, serializer);
        <Vec<Option<String>>>::sse_encode(self.strings, serializer);
        <Vec<Option<Vec<i32>>>>::sse_encode(self.buffers, serializer);
    }
}

impl SseEncode for crate::api::array::PointTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::array::PointTwinNormal; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::PointTwinNormal>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f32>::sse_encode(self.x, serializer);
        <f32>::sse_encode(self.y, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(field0) => { <i32>::sse_encode(0, serializer); <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(field0) => { <i32>::sse_encode(1, serializer); <crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>::sse_encode(field0, serializer);
 }
crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(field0) => { <i32>::sse_encode(2, serializer); <crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::raw_string::RawStringItemStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.r#type, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.r#type, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for (
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>::sse_encode(
            self.0, serializer,
        );
        <crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for (OpaqueOneTwinMoi, OpaqueTwoTwinMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinNormal, OpaqueTwoTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinNormal>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinNormal>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinRustAsync, OpaqueTwoTwinRustAsync) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinRustAsync>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinRustAsync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinRustAsyncMoi, OpaqueTwoTwinRustAsyncMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinRustAsyncMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinRustAsyncMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinRustAsyncSse, OpaqueTwoTwinRustAsyncSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinRustAsyncSse>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinRustAsyncSseMoi, OpaqueTwoTwinRustAsyncSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinRustAsyncSseMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinRustAsyncSseMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSse, OpaqueTwoTwinSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSse>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSseMoi, OpaqueTwoTwinSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSseMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSseMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSync, OpaqueTwoTwinSync) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSync>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSyncMoi, OpaqueTwoTwinSyncMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSyncMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSyncMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSyncSse, OpaqueTwoTwinSyncSse) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSyncSse>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (OpaqueOneTwinSyncSseMoi, OpaqueTwoTwinSyncSseMoi) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <OpaqueOneTwinSyncSseMoi>::sse_encode(self.0, serializer);
        <OpaqueTwoTwinSyncSseMoi>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for (i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic::BasicStructTwinNormal>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for (i32, bool) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <bool>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, f32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <f32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, f64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <f64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, i16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i16>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, i32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, i64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, i8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i8>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, isize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <isize>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <Vec<u8>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, u16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <u16>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, u32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <u32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, u64) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <u64>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, u8) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <u8>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (i32, usize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <usize>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::enumeration::EnumSimpleTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::enumeration::EnumSimpleTwinNormal>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for (String, i32) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::api::enumeration::KitchenSinkTwinNormal) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::enumeration::KitchenSinkTwinNormal>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode
    for (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>::sse_encode(
            self.1, serializer,
        );
    }
}

impl SseEncode for (String, Vec<u8>) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <Vec<u8>>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, crate::auxiliary::sample_types::MySize) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <crate::auxiliary::sample_types::MySize>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for (String, String) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i32>>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::exception::SomeStructTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::enumeration::SpeedTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::enumeration::SpeedTwinNormal::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::enumeration::SpeedTwinNormal::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                field0,
            ) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode
    for crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::Unknown => { <i32>::sse_encode(0, serializer);  }
crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::GPS(field0) => { <i32>::sse_encode(1, serializer); <f64>::sse_encode(field0, serializer);
 }
 }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::Unknown => {
                <i32>::sse_encode(0, serializer);
            }
            crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::GPS(field0) => {
                <i32>::sse_encode(1, serializer);
                <f64>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::deliberate_name_conflict::StructInLowerLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::deliberate_name_conflict::StructInUpperLevel>::sse_encode(self.inner, serializer);
    }
}

impl SseEncode for crate::deliberate_name_conflict::StructInUpperLevel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.upper, serializer);
    }
}

impl SseEncode for crate::api::comment::StructWithCommentsTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.field_with_comments, serializer);
    }
}

impl SseEncode for crate::api::misc_example::StructWithEnumTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::misc_example::AbcTwinNormal>::sse_encode(self.abc1, serializer);
        <crate::api::misc_example::AbcTwinNormal>::sse_encode(self.abc2, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::sse_encode(self.abc1, serializer);
        <crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>::sse_encode(self.abc2, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::sse_encode(
            self.abc1, serializer,
        );
        <crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>::sse_encode(
            self.abc2, serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_moi::StructWithExplicitAutoOpaqueFieldTwinMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::rust_auto_opaque::StructWithExplicitAutoOpaqueFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >>::sse_encode(self.auto_opaque, serializer);
        <i32>::sse_encode(self.normal, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::StructWithExplicitAutoOpaqueFieldTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::StructWithExplicitAutoOpaqueFieldTwinRustAsyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sse::StructWithExplicitAutoOpaqueFieldTwinSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync::StructWithExplicitAutoOpaqueFieldTwinSync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::StructWithExplicitAutoOpaqueFieldTwinSyncMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::StructWithExplicitAutoOpaqueFieldTwinSyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::StructWithExplicitAutoOpaqueFieldTwinSyncSseMoi {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>>>::sse_encode(self.auto_opaque, serializer);
<i32>::sse_encode(self.normal, serializer);}
                }

impl SseEncode for crate::api::structure::StructWithOneFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
    }
}

impl SseEncode for crate::api::structure::StructWithTwoFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.a, serializer);
        <i32>::sse_encode(self.b, serializer);
    }
}

impl SseEncode for crate::api::structure::StructWithZeroFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }

impl SseEncode for crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::method::SumWithTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::method::SumWithTwinNormal; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::method::SumWithTwinNormal>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.x, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::chrono_type::TestChronoTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<chrono::DateTime<chrono::Utc>>>::sse_encode(self.dt, serializer);
        <Option<chrono::NaiveDateTime>>::sse_encode(self.dt2, serializer);
        <Option<chrono::Duration>>::sse_encode(self.du, serializer);
    }
}

impl SseEncode for crate::api::array::TestIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for [crate::api::array::TestIdTwinNormal; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::TestIdTwinNormal>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [crate::api::array::TestIdTwinNormal; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::array::TestIdTwinNormal>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode
    for [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4]
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>>::sse_encode({ let boxed: Box<[_]> = Box::new(self); boxed.into_vec() }, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <[i32; 2]>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::type_alias::TestModelTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <crate::auxiliary::sample_types::MyEnum>::sse_encode(self.alias_enum, serializer);
        <crate::auxiliary::sample_types::MyStruct>::sse_encode(self.alias_struct, serializer);
    }
}

impl SseEncode for crate::api::structure::TupleStructWithOneFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.0, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::structure::TupleStructWithTwoFieldTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.0, serializer);
<i32>::sse_encode(self.1, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.0, serializer);
        <i32>::sse_encode(self.1, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 1600] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [u8; 32] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [u8; 5] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for [u8; 8] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::api::attribute::UserIdTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<i8>>::sse_encode(self.int8list, serializer);
<Vec<u8>>::sse_encode(self.uint8list, serializer);
<Vec<i16>>::sse_encode(self.int16list, serializer);
<Vec<u16>>::sse_encode(self.uint16list, serializer);
<Vec<u32>>::sse_encode(self.uint32list, serializer);
<Vec<i32>>::sse_encode(self.int32list, serializer);
<Vec<u64>>::sse_encode(self.uint64list, serializer);
<Vec<i64>>::sse_encode(self.int64list, serializer);
<Vec<f32>>::sse_encode(self.float32list, serializer);
<Vec<f64>>::sse_encode(self.float64list, serializer);
<Vec<bool>>::sse_encode(self.bool_list, serializer);}
                }

impl SseEncode for crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<i8>>::sse_encode(self.int8list, serializer);
<Vec<u8>>::sse_encode(self.uint8list, serializer);
<Vec<i16>>::sse_encode(self.int16list, serializer);
<Vec<u16>>::sse_encode(self.uint16list, serializer);
<Vec<u32>>::sse_encode(self.uint32list, serializer);
<Vec<i32>>::sse_encode(self.int32list, serializer);
<Vec<u64>>::sse_encode(self.uint64list, serializer);
<Vec<i64>>::sse_encode(self.int64list, serializer);
<Vec<f32>>::sse_encode(self.float32list, serializer);
<Vec<f64>>::sse_encode(self.float64list, serializer);
<Vec<bool>>::sse_encode(self.bool_list, serializer);}
                }

impl SseEncode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<i8>>::sse_encode(self.int8list, serializer);
        <Vec<u8>>::sse_encode(self.uint8list, serializer);
        <Vec<i16>>::sse_encode(self.int16list, serializer);
        <Vec<u16>>::sse_encode(self.uint16list, serializer);
        <Vec<u32>>::sse_encode(self.uint32list, serializer);
        <Vec<i32>>::sse_encode(self.int32list, serializer);
        <Vec<u64>>::sse_encode(self.uint64list, serializer);
        <Vec<i64>>::sse_encode(self.int64list, serializer);
        <Vec<f32>>::sse_encode(self.float32list, serializer);
        <Vec<f64>>::sse_encode(self.float64list, serializer);
        <Vec<bool>>::sse_encode(self.bool_list, serializer);
    }
}

impl SseEncode for crate::api::misc_example::WeekdaysTwinNormal {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::misc_example::WeekdaysTwinNormal::Monday => 0,
                crate::api::misc_example::WeekdaysTwinNormal::Tuesday => 1,
                crate::api::misc_example::WeekdaysTwinNormal::Wednesday => 2,
                crate::api::misc_example::WeekdaysTwinNormal::Thursday => 3,
                crate::api::misc_example::WeekdaysTwinNormal::Friday => 4,
                crate::api::misc_example::WeekdaysTwinNormal::Saturday => 5,
                crate::api::misc_example::WeekdaysTwinNormal::Sunday => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Monday => { 0 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Tuesday => { 1 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Wednesday => { 2 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Thursday => { 3 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Friday => { 4 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Saturday => { 5 }
crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync::Sunday => { 6 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode
    for crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Monday => { 0 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Tuesday => { 1 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Wednesday => { 2 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Thursday => { 3 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Friday => { 4 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Saturday => { 5 }
crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse::Sunday => { 6 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Monday => 0,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Tuesday => 1,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Wednesday => 2,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Thursday => 3,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Friday => 4,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Saturday => 5,
                crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse::Sunday => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Monday => 0,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Tuesday => 1,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Wednesday => 2,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Thursday => 3,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Friday => 4,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Saturday => 5,
                crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync::Sunday => 6,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(match self {crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Monday => { 0 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Tuesday => { 1 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Wednesday => { 2 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Thursday => { 3 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Friday => { 4 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Saturday => { 5 }
crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse::Sunday => { 6 }
 _ => { unimplemented!(""); }}, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
