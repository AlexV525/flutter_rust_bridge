// Section: file_attributes

#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]

// Section: code_header

// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.4.

// Section: imports

use crate::api::array::Blob;
use crate::api::array::FeedId;
use crate::api::array::MessageId;
use crate::api::array::Point;
use crate::api::array::TestId;
use crate::api::array::*;
use crate::api::comment::StructWithCommentsTwinNormal;
use crate::api::comment::*;
use crate::api::enumeration::Distance;
use crate::api::enumeration::EnumWithItemMixedTwinNormal;
use crate::api::enumeration::EnumWithItemStructTwinNormal;
use crate::api::enumeration::EnumWithItemTupleTwinNormal;
use crate::api::enumeration::Measure;
use crate::api::enumeration::Note;
use crate::api::enumeration::Speed;
use crate::api::enumeration::*;
use crate::api::exception::CustomEnumErrorTwinNormal;
use crate::api::exception::CustomNestedErrorInnerTwinNormal;
use crate::api::exception::CustomNestedErrorOuterTwinNormal;
use crate::api::exception::CustomStructErrorTwinNormal;
use crate::api::exception::*;
use crate::api::inside_macro::MacroStruct;
use crate::api::inside_macro::*;
use crate::api::misc_example::Abc;
use crate::api::misc_example::BigBuffers;
use crate::api::misc_example::MyNestedStruct;
use crate::api::misc_example::MyTreeNode;
use crate::api::misc_example::StructWithEnum;
use crate::api::misc_example::A;
use crate::api::misc_example::B;
use crate::api::misc_example::C;
use crate::api::misc_example::*;
use crate::api::misc_type::*;
use crate::api::newtype_pattern::NewTypeInt;
use crate::api::newtype_pattern::*;
use crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync;
use crate::api::pseudo_manual::comment_twin_sync::*;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync;
use crate::api::pseudo_manual::enumeration_twin_sync::*;
use crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync;
use crate::api::pseudo_manual::exception_twin_sync::*;
use crate::api::pseudo_manual::misc_type_twin_sync::*;
use crate::api::pseudo_manual::optional_primitive::*;
use crate::api::pseudo_manual::optional_primitive_twin_sync::*;
use crate::api::pseudo_manual::primitive::*;
use crate::api::pseudo_manual::primitive_list::*;
use crate::api::pseudo_manual::primitive_list_twin_sync::*;
use crate::api::pseudo_manual::primitive_twin_sync::*;
use crate::api::pseudo_manual::simple_twin_sync::*;
use crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync;
use crate::api::pseudo_manual::structure_twin_sync::*;
use crate::api::raw_string::MoreThanJustOneRawStringStruct;
use crate::api::raw_string::RawStringItemStruct;
use crate::api::raw_string::*;
use crate::api::simple::*;
use crate::api::stream::MyStreamEntry;
use crate::api::stream::*;
use crate::api::structure::StructWithOneFieldTwinNormal;
use crate::api::structure::StructWithTwoFieldTwinNormal;
use crate::api::structure::StructWithZeroFieldTwinNormal;
use crate::api::structure::TupleStructWithOneFieldTwinNormal;
use crate::api::structure::TupleStructWithTwoFieldTwinNormal;
use crate::api::structure::*;
use crate::auxiliary::sample_types::MySize;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: wire_funcs

fn wire_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<[u8; 1600]>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Blob, _>(
        WrapInfo {
            debug_name: "boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(boxed_blob(api_blob))
        },
    )
}
fn wire_get_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 5], _>(
        WrapInfo {
            debug_name: "get_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_array()),
    )
}
fn wire_get_complex_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [Point; 2], _>(
        WrapInfo {
            debug_name: "get_complex_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(get_complex_array()),
    )
}
fn wire_last_number_impl(port_: MessagePort, array: impl Wire2Api<[f64; 16]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "last_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_array = array.wire2api();
            move |task_callback| Result::<_, ()>::Ok(last_number(api_array))
        },
    )
}
fn wire_nested_id_impl(port_: MessagePort, id: impl Wire2Api<[TestId; 4]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [TestId; 2], _>(
        WrapInfo {
            debug_name: "nested_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(nested_id(api_id))
        },
    )
}
fn wire_new_msgid_impl(port_: MessagePort, id: impl Wire2Api<[u8; 32]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MessageId, _>(
        WrapInfo {
            debug_name: "new_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(new_msgid(api_id))
        },
    )
}
fn wire_return_boxed_feed_id_impl(port_: MessagePort, id: impl Wire2Api<[u8; 8]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, FeedId, _>(
        WrapInfo {
            debug_name: "return_boxed_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(return_boxed_feed_id(api_id))
        },
    )
}
fn wire_return_boxed_raw_feed_id_impl(port_: MessagePort, id: impl Wire2Api<FeedId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 8], _>(
        WrapInfo {
            debug_name: "return_boxed_raw_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(return_boxed_raw_feed_id(api_id))
        },
    )
}
fn wire_test_id_impl(port_: MessagePort, id: impl Wire2Api<TestId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TestId, _>(
        WrapInfo {
            debug_name: "test_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_id(api_id))
        },
    )
}
fn wire_use_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<Blob>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 1600], _>(
        WrapInfo {
            debug_name: "use_boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_boxed_blob(api_blob))
        },
    )
}
fn wire_use_msgid_impl(port_: MessagePort, id: impl Wire2Api<MessageId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, [u8; 32], _>(
        WrapInfo {
            debug_name: "use_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Result::<_, ()>::Ok(use_msgid(api_id))
        },
    )
}
fn wire_StructWithCommentsTwinNormal_instance_method_twin_normal_impl(
    port_: MessagePort,
    that: impl Wire2Api<StructWithCommentsTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_instance_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::instance_method_twin_normal(
                    &api_that,
                ))
            }
        },
    )
}
fn wire_StructWithCommentsTwinNormal_static_method_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "StructWithCommentsTwinNormal_static_method_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(StructWithCommentsTwinNormal::static_method_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_slash_star_star_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_normal())
            }
        },
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_normal())
            }
        },
    )
}
fn wire_func_enum_simple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumSimpleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumSimpleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_simple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_simple_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemMixedTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemMixedTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_normal(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemStructTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemStructTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_enum_with_item_struct_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<EnumWithItemTupleTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, EnumWithItemTupleTwinNormal, _>(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_normal(api_arg))
        },
    )
}
fn wire_handle_enum_parameter_impl(
    port_: MessagePort,
    weekday: impl Wire2Api<Weekdays> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Weekdays, _>(
        WrapInfo {
            debug_name: "handle_enum_parameter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_enum_parameter(api_weekday))
        },
    )
}
fn wire_handle_return_enum_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<Weekdays>, _>(
        WrapInfo {
            debug_name: "handle_return_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_return_enum(api_input))
        },
    )
}
fn wire_multiply_by_ten_impl(port_: MessagePort, measure: impl Wire2Api<Measure> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<Measure>, _>(
        WrapInfo {
            debug_name: "multiply_by_ten",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.wire2api();
            move |task_callback| Result::<_, ()>::Ok(multiply_by_ten(api_measure))
        },
    )
}
fn wire_print_note_impl(port_: MessagePort, note: impl Wire2Api<Note> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ZeroCopyBuffer<Vec<u8>>, _>(
        WrapInfo {
            debug_name: "print_note",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Result::<_, ()>::Ok(print_note(api_note))
        },
    )
}
fn wire_custom_enum_error_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_enum_error_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_panic_twin_normal(),
    )
}
fn wire_custom_enum_error_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| custom_enum_error_return_error_twin_normal(),
    )
}
fn wire_custom_enum_error_return_ok_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_enum_error_return_ok_twin_normal(api_arg)
        },
    )
}
fn wire_custom_nested_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomNestedErrorOuterTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_nested_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_custom_struct_error_return_error_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<CustomStructErrorTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| custom_struct_error_return_error_twin_normal(api_arg)
        },
    )
}
fn wire_func_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_return_error_twin_normal(),
    )
}
fn wire_func_type_fallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_fallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| func_type_fallible_panic_twin_normal(),
    )
}
fn wire_func_type_infallible_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "func_type_infallible_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_type_infallible_panic_twin_normal()),
    )
}
fn wire_func_macro_struct_impl(port_: MessagePort, arg: impl Wire2Api<MacroStruct> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MacroStruct, _>(
        WrapInfo {
            debug_name: "func_macro_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_macro_struct(api_arg))
        },
    )
}
fn wire_handle_big_buffers_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, BigBuffers, _>(
        WrapInfo {
            debug_name: "handle_big_buffers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(handle_big_buffers()),
    )
}
fn wire_handle_complex_struct_impl(port_: MessagePort, s: impl Wire2Api<MyTreeNode> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MyTreeNode, _>(
        WrapInfo {
            debug_name: "handle_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_complex_struct(api_s))
        },
    )
}
fn wire_handle_nested_struct_impl(
    port_: MessagePort,
    s: impl Wire2Api<MyNestedStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MyNestedStruct, _>(
        WrapInfo {
            debug_name: "handle_nested_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_nested_struct(api_s))
        },
    )
}
fn wire_list_of_primitive_enums_impl(
    port_: MessagePort,
    weekdays: impl Wire2Api<Vec<Weekdays>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<Weekdays>, _>(
        WrapInfo {
            debug_name: "list_of_primitive_enums",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekdays = weekdays.wire2api();
            move |task_callback| Result::<_, ()>::Ok(list_of_primitive_enums(api_weekdays))
        },
    )
}
fn wire_test_abc_enum_impl(port_: MessagePort, abc: impl Wire2Api<Abc> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Abc, _>(
        WrapInfo {
            debug_name: "test_abc_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_abc = abc.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_abc_enum(api_abc))
        },
    )
}
fn wire_test_struct_with_enum_impl(
    port_: MessagePort,
    se: impl Wire2Api<StructWithEnum> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithEnum, _>(
        WrapInfo {
            debug_name: "test_struct_with_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_se = se.wire2api();
            move |task_callback| Result::<_, ()>::Ok(test_struct_with_enum(api_se))
        },
    )
}
fn wire_func_return_unit_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_return_unit_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(func_return_unit_twin_normal()),
    )
}
fn wire_func_string_twin_normal_impl(port_: MessagePort, arg: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String, _>(
        WrapInfo {
            debug_name: "func_string_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(func_string_twin_normal(api_arg))
        },
    )
}
fn wire_handle_list_of_struct_impl(port_: MessagePort, l: impl Wire2Api<Vec<MySize>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<MySize>, _>(
        WrapInfo {
            debug_name: "handle_list_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_l = l.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_list_of_struct(api_l))
        },
    )
}
fn wire_handle_string_list_impl(
    port_: MessagePort,
    names: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<String>, _>(
        WrapInfo {
            debug_name: "handle_string_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_names = names.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_string_list(api_names))
        },
    )
}
fn wire_handle_newtype_impl(port_: MessagePort, arg: impl Wire2Api<NewTypeInt> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, NewTypeInt, _>(
        WrapInfo {
            debug_name: "handle_newtype",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(handle_newtype(api_arg))
        },
    )
}
fn wire_StructWithCommentsTwinSync_instance_method_twin_sync_impl(
    that: impl Wire2Api<StructWithCommentsTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_instance_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_that = that.wire2api();
            Result::<_, ()>::Ok(StructWithCommentsTwinSync::instance_method_twin_sync(
                &api_that,
            ))
        },
    )
}
fn wire_StructWithCommentsTwinSync_static_method_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "StructWithCommentsTwinSync_static_method_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(StructWithCommentsTwinSync::static_method_twin_sync()),
    )
}
fn wire_function_with_comments_slash_star_star_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_slash_star_star_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_slash_star_star_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_multi_line_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_multi_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_multi_line_twin_sync()),
    )
}
fn wire_function_with_comments_triple_slash_single_line_twin_sync_impl() -> support::WireSyncReturn
{
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "function_with_comments_triple_slash_single_line_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(function_with_comments_triple_slash_single_line_twin_sync()),
    )
}
fn wire_func_enum_simple_twin_sync_impl(
    arg: impl Wire2Api<EnumSimpleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_simple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_simple_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_mixed_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemMixedTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_mixed_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_mixed_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_struct_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemStructTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_struct_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_struct_twin_sync(api_arg))
        },
    )
}
fn wire_func_enum_with_item_tuple_twin_sync_impl(
    arg: impl Wire2Api<EnumWithItemTupleTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_enum_with_item_tuple_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_enum_with_item_tuple_twin_sync(api_arg))
        },
    )
}
fn wire_custom_enum_error_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || custom_enum_error_panic_twin_sync(),
    )
}
fn wire_custom_enum_error_return_error_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || custom_enum_error_return_error_twin_sync(),
    )
}
fn wire_custom_enum_error_return_ok_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_enum_error_return_ok_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_enum_error_return_ok_twin_sync(api_arg)
        },
    )
}
fn wire_custom_nested_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<CustomNestedErrorOuterTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_nested_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_nested_error_return_error_twin_sync(api_arg)
        },
    )
}
fn wire_custom_struct_error_return_error_twin_sync_impl(
    arg: impl Wire2Api<CustomStructErrorTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "custom_struct_error_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            custom_struct_error_return_error_twin_sync(api_arg)
        },
    )
}
fn wire_func_return_error_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_error_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || func_return_error_twin_sync(),
    )
}
fn wire_func_type_fallible_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_type_fallible_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || func_type_fallible_panic_twin_sync(),
    )
}
fn wire_func_type_infallible_panic_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_type_infallible_panic_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_type_infallible_panic_twin_sync()),
    )
}
fn wire_func_return_unit_twin_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_return_unit_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Result::<_, ()>::Ok(func_return_unit_twin_sync()),
    )
}
fn wire_func_string_twin_sync_impl(
    arg: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_string_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_string_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<bool>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<f64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<i8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u16>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u32>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u64>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<u8>, _>(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_optional_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Option<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Option<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Option<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Option<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Option<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Option<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Option<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Option<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Option<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Option<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_optional_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Option<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_optional_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_optional_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool, _>(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, f64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<i8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_i8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u16, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u32, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u64, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<u8> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, u8, _>(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Result::<_, ()>::Ok(example_primitive_type_u8_twin_normal(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<bool>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<f64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<i8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u16>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u32>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u64>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_normal(api_arg))
            }
        },
    )
}
fn wire_example_primitive_list_type_bool_twin_sync_impl(
    arg: impl Wire2Api<Vec<bool>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f32_twin_sync_impl(
    arg: impl Wire2Api<Vec<f32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_f64_twin_sync_impl(
    arg: impl Wire2Api<Vec<f64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i16_twin_sync_impl(
    arg: impl Wire2Api<Vec<i16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i32_twin_sync_impl(
    arg: impl Wire2Api<Vec<i32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i64_twin_sync_impl(
    arg: impl Wire2Api<Vec<i64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_i8_twin_sync_impl(
    arg: impl Wire2Api<Vec<i8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u16_twin_sync_impl(
    arg: impl Wire2Api<Vec<u16>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u32_twin_sync_impl(
    arg: impl Wire2Api<Vec<u32>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u64_twin_sync_impl(
    arg: impl Wire2Api<Vec<u64>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_list_type_u8_twin_sync_impl(
    arg: impl Wire2Api<Vec<u8>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_list_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_list_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_bool_twin_sync_impl(
    arg: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_bool_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_bool_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f32_twin_sync_impl(
    arg: impl Wire2Api<f32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_f64_twin_sync_impl(
    arg: impl Wire2Api<f64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_f64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_f64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i16_twin_sync_impl(
    arg: impl Wire2Api<i16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i32_twin_sync_impl(
    arg: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i64_twin_sync_impl(
    arg: impl Wire2Api<i64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_i8_twin_sync_impl(
    arg: impl Wire2Api<i8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_i8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_i8_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u16_twin_sync_impl(
    arg: impl Wire2Api<u16> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u16_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u16_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u32_twin_sync_impl(
    arg: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u32_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u32_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u64_twin_sync_impl(
    arg: impl Wire2Api<u64> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u64_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u64_twin_sync(api_arg))
        },
    )
}
fn wire_example_primitive_type_u8_twin_sync_impl(
    arg: impl Wire2Api<u8> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "example_primitive_type_u8_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(example_primitive_type_u8_twin_sync(api_arg))
        },
    )
}
fn wire_simple_adder_twin_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Result::<_, ()>::Ok(simple_adder_twin_sync(api_a, api_b))
        },
    )
}
fn wire_func_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_struct_with_zero_field_twin_sync_impl(
    arg: impl Wire2Api<StructWithZeroFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_struct_with_zero_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithOneFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_sync(api_arg))
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_sync_impl(
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinSync> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_sync(api_arg))
        },
    )
}
fn wire_test_more_than_just_one_raw_string_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, MoreThanJustOneRawStringStruct, _>(
        WrapInfo {
            debug_name: "test_more_than_just_one_raw_string_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            move |task_callback| Result::<_, ()>::Ok(test_more_than_just_one_raw_string_struct())
        },
    )
}
fn wire_test_raw_string_item_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, RawStringItemStruct, _>(
        WrapInfo {
            debug_name: "test_raw_string_item_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(test_raw_string_item_struct()),
    )
}
fn wire_simple_adder_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, i32, _>(
        WrapInfo {
            debug_name: "simple_adder_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Result::<_, ()>::Ok(simple_adder_twin_normal(api_a, api_b))
        },
    )
}
fn wire_func_stream_realistic_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_realistic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_realistic_twin_normal(
                    task_callback.stream_sink::<_, String>(),
                    api_arg,
                ))
            }
        },
    )
}
fn wire_func_stream_return_error_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_error_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_error_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_return_panic_twin_normal_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_return_panic_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                func_stream_return_panic_twin_normal(task_callback.stream_sink::<_, String>())
            }
        },
    )
}
fn wire_func_stream_sink_arg_position_twin_normal_impl(
    port_: MessagePort,
    a: impl Wire2Api<u32> + UnwindSafe,
    b: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "func_stream_sink_arg_position_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_stream_sink_arg_position_twin_normal(
                    api_a,
                    api_b,
                    task_callback.stream_sink::<_, u32>(),
                ))
            }
        },
    )
}
fn wire_handle_stream_of_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "handle_stream_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Result::<_, ()>::Ok(handle_stream_of_struct(
                    task_callback.stream_sink::<_, MyStreamEntry>(),
                ))
            }
        },
    )
}
fn wire_func_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_struct_with_zero_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<StructWithZeroFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, StructWithZeroFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_struct_with_zero_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_struct_with_zero_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_one_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithOneFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithOneFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_one_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_one_field_twin_normal(api_arg))
            }
        },
    )
}
fn wire_func_tuple_struct_with_two_field_twin_normal_impl(
    port_: MessagePort,
    arg: impl Wire2Api<TupleStructWithTwoFieldTwinNormal> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, TupleStructWithTwoFieldTwinNormal, _>(
        WrapInfo {
            debug_name: "func_tuple_struct_with_two_field_twin_normal",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| {
                Result::<_, ()>::Ok(func_tuple_struct_with_two_field_twin_normal(api_arg))
            }
        },
    )
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

// Section: impl_wire2api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}
impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}
impl Wire2Api<EnumSimpleTwinNormal> for i32 {
    fn wire2api(self) -> EnumSimpleTwinNormal {
        match self {
            0 => EnumSimpleTwinNormal::A,
            1 => EnumSimpleTwinNormal::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinNormal: {}", self),
        }
    }
}
impl Wire2Api<EnumSimpleTwinSync> for i32 {
    fn wire2api(self) -> EnumSimpleTwinSync {
        match self {
            0 => EnumSimpleTwinSync::A,
            1 => EnumSimpleTwinSync::B,
            _ => unreachable!("Invalid variant for EnumSimpleTwinSync: {}", self),
        }
    }
}
impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}
impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}
impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}
impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}
impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}
impl Wire2Api<Weekdays> for i32 {
    fn wire2api(self) -> Weekdays {
        match self {
            0 => Weekdays::Monday,
            1 => Weekdays::Tuesday,
            2 => Weekdays::Wednesday,
            3 => Weekdays::Thursday,
            4 => Weekdays::Friday,
            5 => Weekdays::Saturday,
            6 => Weekdays::Sunday,
            _ => unreachable!("Invalid variant for Weekdays: {}", self),
        }
    }
}

// Section: impl_into_dart

impl support::IntoDart for A {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for A {}
impl rust2dart::IntoIntoDart<A> for A {
    fn into_into_dart(self) -> A {
        self
    }
}
impl support::IntoDart for Abc {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C(field0) => vec![2.into_dart(), field0.into_into_dart().into_dart()],
            Self::JustInt(field0) => vec![3.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Abc {}
impl rust2dart::IntoIntoDart<Abc> for Abc {
    fn into_into_dart(self) -> Abc {
        self
    }
}
impl support::IntoDart for B {
    fn into_dart(self) -> support::DartAbi {
        vec![self.b.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for B {}
impl rust2dart::IntoIntoDart<B> for B {
    fn into_into_dart(self) -> B {
        self
    }
}
impl support::IntoDart for BigBuffers {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int64.into_into_dart().into_dart(),
            self.uint64.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BigBuffers {}
impl rust2dart::IntoIntoDart<BigBuffers> for BigBuffers {
    fn into_into_dart(self) -> BigBuffers {
        self
    }
}
impl support::IntoDart for Blob {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Blob {}
impl rust2dart::IntoIntoDart<Blob> for Blob {
    fn into_into_dart(self) -> Blob {
        self
    }
}
impl support::IntoDart for C {
    fn into_dart(self) -> support::DartAbi {
        vec![self.c.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for C {}
impl rust2dart::IntoIntoDart<C> for C {
    fn into_into_dart(self) -> C {
        self
    }
}
impl support::IntoDart for CustomEnumErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomEnumErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomEnumErrorTwinNormal> for CustomEnumErrorTwinNormal {
    fn into_into_dart(self) -> CustomEnumErrorTwinNormal {
        self
    }
}
impl support::IntoDart for CustomEnumErrorTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One { message, backtrace } => vec![
                0.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
            Self::Two { message, backtrace } => vec![
                1.into_dart(),
                message.into_into_dart().into_dart(),
                backtrace.into_into_dart().into_dart(),
            ],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomEnumErrorTwinSync {}
impl rust2dart::IntoIntoDart<CustomEnumErrorTwinSync> for CustomEnumErrorTwinSync {
    fn into_into_dart(self) -> CustomEnumErrorTwinSync {
        self
    }
}
impl support::IntoDart for CustomNestedErrorInnerTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorInnerTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorInnerTwinNormal>
    for CustomNestedErrorInnerTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorInnerTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorInnerTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Three(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Four(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorInnerTwinSync {}
impl rust2dart::IntoIntoDart<CustomNestedErrorInnerTwinSync> for CustomNestedErrorInnerTwinSync {
    fn into_into_dart(self) -> CustomNestedErrorInnerTwinSync {
        self
    }
}
impl support::IntoDart for CustomNestedErrorOuterTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorOuterTwinNormal {}
impl rust2dart::IntoIntoDart<CustomNestedErrorOuterTwinNormal>
    for CustomNestedErrorOuterTwinNormal
{
    fn into_into_dart(self) -> CustomNestedErrorOuterTwinNormal {
        self
    }
}
impl support::IntoDart for CustomNestedErrorOuterTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::One(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Two(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomNestedErrorOuterTwinSync {}
impl rust2dart::IntoIntoDart<CustomNestedErrorOuterTwinSync> for CustomNestedErrorOuterTwinSync {
    fn into_into_dart(self) -> CustomNestedErrorOuterTwinSync {
        self
    }
}
impl support::IntoDart for CustomStructErrorTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomStructErrorTwinNormal {}
impl rust2dart::IntoIntoDart<CustomStructErrorTwinNormal> for CustomStructErrorTwinNormal {
    fn into_into_dart(self) -> CustomStructErrorTwinNormal {
        self
    }
}
impl support::IntoDart for CustomStructErrorTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for CustomStructErrorTwinSync {}
impl rust2dart::IntoIntoDart<CustomStructErrorTwinSync> for CustomStructErrorTwinSync {
    fn into_into_dart(self) -> CustomStructErrorTwinSync {
        self
    }
}
impl support::IntoDart for Distance {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::Map(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Distance {}
impl rust2dart::IntoIntoDart<Distance> for Distance {
    fn into_into_dart(self) -> Distance {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinNormal> for EnumSimpleTwinNormal {
    fn into_into_dart(self) -> EnumSimpleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumSimpleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => 0,
            Self::B => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumSimpleTwinSync {}
impl rust2dart::IntoIntoDart<EnumSimpleTwinSync> for EnumSimpleTwinSync {
    fn into_into_dart(self) -> EnumSimpleTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinNormal> for EnumWithItemMixedTwinNormal {
    fn into_into_dart(self) -> EnumWithItemMixedTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemMixedTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A => vec![0.into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
            Self::C { c_field } => vec![2.into_dart(), c_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemMixedTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemMixedTwinSync> for EnumWithItemMixedTwinSync {
    fn into_into_dart(self) -> EnumWithItemMixedTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinNormal> for EnumWithItemStructTwinNormal {
    fn into_into_dart(self) -> EnumWithItemStructTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemStructTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A { a_field } => vec![0.into_dart(), a_field.into_into_dart().into_dart()],
            Self::B { b_field } => vec![1.into_dart(), b_field.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemStructTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemStructTwinSync> for EnumWithItemStructTwinSync {
    fn into_into_dart(self) -> EnumWithItemStructTwinSync {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinNormal {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinNormal> for EnumWithItemTupleTwinNormal {
    fn into_into_dart(self) -> EnumWithItemTupleTwinNormal {
        self
    }
}
impl support::IntoDart for EnumWithItemTupleTwinSync {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::A(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::B(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumWithItemTupleTwinSync {}
impl rust2dart::IntoIntoDart<EnumWithItemTupleTwinSync> for EnumWithItemTupleTwinSync {
    fn into_into_dart(self) -> EnumWithItemTupleTwinSync {
        self
    }
}
impl support::IntoDart for FeedId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FeedId {}
impl rust2dart::IntoIntoDart<FeedId> for FeedId {
    fn into_into_dart(self) -> FeedId {
        self
    }
}
impl support::IntoDart for MacroStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.data.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MacroStruct {}
impl rust2dart::IntoIntoDart<MacroStruct> for MacroStruct {
    fn into_into_dart(self) -> MacroStruct {
        self
    }
}
impl support::IntoDart for Measure {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Speed(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Distance(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Measure {}
impl rust2dart::IntoIntoDart<Measure> for Measure {
    fn into_into_dart(self) -> Measure {
        self
    }
}
impl support::IntoDart for MessageId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MessageId {}
impl rust2dart::IntoIntoDart<MessageId> for MessageId {
    fn into_into_dart(self) -> MessageId {
        self
    }
}
impl support::IntoDart for MoreThanJustOneRawStringStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.regular.into_into_dart().into_dart(),
            self.r#type.into_into_dart().into_dart(),
            self.r#async.into_into_dart().into_dart(),
            self.another.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MoreThanJustOneRawStringStruct {}
impl rust2dart::IntoIntoDart<MoreThanJustOneRawStringStruct> for MoreThanJustOneRawStringStruct {
    fn into_into_dart(self) -> MoreThanJustOneRawStringStruct {
        self
    }
}
impl support::IntoDart for MyNestedStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.tree_node.into_into_dart().into_dart(),
            self.weekday.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyNestedStruct {}
impl rust2dart::IntoIntoDart<MyNestedStruct> for MyNestedStruct {
    fn into_into_dart(self) -> MyNestedStruct {
        self
    }
}
impl support::IntoDart for MySize {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.width.into_into_dart().into_dart(),
            self.height.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MySize {}
impl rust2dart::IntoIntoDart<MySize> for MySize {
    fn into_into_dart(self) -> MySize {
        self
    }
}
impl support::IntoDart for MyStreamEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![self.hello.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStreamEntry {}
impl rust2dart::IntoIntoDart<MyStreamEntry> for MyStreamEntry {
    fn into_into_dart(self) -> MyStreamEntry {
        self
    }
}
impl support::IntoDart for MyTreeNode {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.value_i32.into_into_dart().into_dart(),
            self.value_vec_u8.into_into_dart().into_dart(),
            self.value_boolean.into_into_dart().into_dart(),
            self.children.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyTreeNode {}
impl rust2dart::IntoIntoDart<MyTreeNode> for MyTreeNode {
    fn into_into_dart(self) -> MyTreeNode {
        self
    }
}
impl support::IntoDart for NewTypeInt {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewTypeInt {}
impl rust2dart::IntoIntoDart<NewTypeInt> for NewTypeInt {
    fn into_into_dart(self) -> NewTypeInt {
        self
    }
}
impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.x.into_into_dart().into_dart(),
            self.y.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}
impl rust2dart::IntoIntoDart<Point> for Point {
    fn into_into_dart(self) -> Point {
        self
    }
}
impl support::IntoDart for RawStringItemStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.r#type.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for RawStringItemStruct {}
impl rust2dart::IntoIntoDart<RawStringItemStruct> for RawStringItemStruct {
    fn into_into_dart(self) -> RawStringItemStruct {
        self
    }
}
impl support::IntoDart for Speed {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::GPS(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Speed {}
impl rust2dart::IntoIntoDart<Speed> for Speed {
    fn into_into_dart(self) -> Speed {
        self
    }
}
impl support::IntoDart for StructWithEnum {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.abc1.into_into_dart().into_dart(),
            self.abc2.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithEnum {}
impl rust2dart::IntoIntoDart<StructWithEnum> for StructWithEnum {
    fn into_into_dart(self) -> StructWithEnum {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinNormal> for StructWithOneFieldTwinNormal {
    fn into_into_dart(self) -> StructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithOneFieldTwinSync> for StructWithOneFieldTwinSync {
    fn into_into_dart(self) -> StructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinNormal> for StructWithTwoFieldTwinNormal {
    fn into_into_dart(self) -> StructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.a.into_into_dart().into_dart(),
            self.b.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithTwoFieldTwinSync> for StructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> StructWithTwoFieldTwinSync {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinNormal {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinNormal> for StructWithZeroFieldTwinNormal {
    fn into_into_dart(self) -> StructWithZeroFieldTwinNormal {
        self
    }
}
impl support::IntoDart for StructWithZeroFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl support::IntoDartExceptPrimitive for StructWithZeroFieldTwinSync {}
impl rust2dart::IntoIntoDart<StructWithZeroFieldTwinSync> for StructWithZeroFieldTwinSync {
    fn into_into_dart(self) -> StructWithZeroFieldTwinSync {
        self
    }
}
impl support::IntoDart for TestId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestId {}
impl rust2dart::IntoIntoDart<TestId> for TestId {
    fn into_into_dart(self) -> TestId {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinNormal>
    for TupleStructWithOneFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithOneFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithOneFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithOneFieldTwinSync> for TupleStructWithOneFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithOneFieldTwinSync {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinNormal {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinNormal {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinNormal>
    for TupleStructWithTwoFieldTwinNormal
{
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinNormal {
        self
    }
}
impl support::IntoDart for TupleStructWithTwoFieldTwinSync {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.into_into_dart().into_dart(),
            self.1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TupleStructWithTwoFieldTwinSync {}
impl rust2dart::IntoIntoDart<TupleStructWithTwoFieldTwinSync> for TupleStructWithTwoFieldTwinSync {
    fn into_into_dart(self) -> TupleStructWithTwoFieldTwinSync {
        self
    }
}
impl support::IntoDart for Weekdays {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Weekdays {}
impl rust2dart::IntoIntoDart<Weekdays> for Weekdays {
    fn into_into_dart(self) -> Weekdays {
        self
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
