// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.19.

// Section: imports

use super::*;
use crate::api::misc_no_twin_example_a::*;
use crate::api::misc_no_twin_example_b::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sse_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_moi::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse::*;
use crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::*;
use crate::api::rust_auto_opaque::*;
use crate::api::rust_opaque::*;
use crate::api::rust_opaque_sync::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<backtrace::Backtrace> for String {
    fn cst_decode(self) -> backtrace::Backtrace {
        unimplemented!()
    }
}
impl CstDecode<chrono::Duration> for i64 {
    fn cst_decode(self) -> chrono::Duration {
        chrono::Duration::milliseconds(self)
    }
}
impl CstDecode<flutter_rust_bridge::DartOpaque>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> flutter_rust_bridge::DartOpaque {
        unsafe { flutter_rust_bridge::for_generated::cst_decode_dart_opaque(self as _) }
    }
}
impl CstDecode<std::collections::HashSet<i32>> for Box<[i32]> {
    fn cst_decode(self) -> std::collections::HashSet<i32> {
        let vec: Vec<i32> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<uuid::Uuid> for Box<[u8]> {
    fn cst_decode(self) -> uuid::Uuid {
        let single: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::decode_uuid(single)
    }
}
impl CstDecode<crate::api::misc_example::ATwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::ATwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::ATwinNormal {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::ATwinRustAsync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::ATwinRustAsyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::ATwinSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::ATwinSync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::ATwinSyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::AbcTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::AbcTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::misc_example::AbcTwinNormal::A(self_.get(1).cst_decode()),
            1 => crate::api::misc_example::AbcTwinNormal::B(self_.get(1).cst_decode()),
            2 => crate::api::misc_example::AbcTwinNormal::C(self_.get(1).cst_decode()),
            3 => crate::api::misc_example::AbcTwinNormal::JustInt(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::C(
                self_.get(1).cst_decode(),
            ),
            3 => {
                crate::api::pseudo_manual::misc_example_twin_rust_async::AbcTwinRustAsync::JustInt(
                    self_.get(1).cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::A( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::B( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::C( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::misc_example_twin_rust_async_sse::AbcTwinRustAsyncSse::JustInt( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::C(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::misc_example_twin_sse::AbcTwinSse::JustInt(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::C(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::misc_example_twin_sync::AbcTwinSync::JustInt(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::C(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::misc_example_twin_sync_sse::AbcTwinSyncSse::JustInt(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::AnotherMacroStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::inside_macro::AnotherMacroStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::inside_macro::AnotherMacroStructTwinNormal {
            data: self_.get(0).cst_decode(),
            non_final_data: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::AnotherTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::mirror::AnotherTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::mirror::AnotherTwinNormal {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_rust_async::AnotherTwinRustAsync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::AnotherTwinRustAsyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sse::AnotherTwinSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync::AnotherTwinSync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::AnotherTwinSyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv {
            vars: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::DisplayMessage(
                    self_.get(1).cst_decode(),
                )
            }
            1 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::RenderPixel {
                x: self_.get(1).cst_decode(),
                y: self_.get(2).cst_decode(),
            },
            2 => crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMessage::Exit,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings {
            name: self_.get(0).cst_decode(),
            version: self_.get(1).cst_decode(),
            mode: self_.get(2).cst_decode(),
            env: self_.get(3).cst_decode(),
            env_optional: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::AttributeTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::optional::AttributeTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::optional::AttributeTwinNormal {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::BTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::BTwinNormal {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::BTwinRustAsync {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BTwinRustAsyncSse {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::BTwinSse {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::BTwinSync {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BTwinSyncSse {
            b: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Apple {
                field: self_.get(1).cst_decode(),
            },
            1 => crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal::Orange,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Apple{field:  self_.get(1).cst_decode()} },
1 => crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync::Orange,
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Apple{field:  self_.get(1).cst_decode()} },
1 => crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse::Orange,
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Apple {
                field: self_.get(1).cst_decode(),
            },
            1 => crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse::Orange,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Apple {
                field: self_.get(1).cst_decode(),
            },
            1 => crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync::Orange,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Apple {
                    field: self_.get(1).cst_decode(),
                }
            }
            1 => {
                crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse::Orange
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic::BasicStructTwinNormal {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse {
            apple: self_.get(0).cst_decode(),
            orange: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal {
            name: self_.get(0).cst_decode(),
            left: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync {
            name: self_.get(0).cst_decode(),
            left: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 3, "Expected 3 elements, got {}", self_.length());
                crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse{name:  self_.get(0).cst_decode(),left:  self_.get(1).cst_decode(),right:  self_.get(2).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse {
            name: self_.get(0).cst_decode(),
            left: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync {
            name: self_.get(0).cst_decode(),
            left: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse {
            name: self_.get(0).cst_decode(),
            left: self_.get(1).cst_decode(),
            right: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api::BenchmarkBlobTwinNormal {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
            third: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBlobTwinRustAsync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
            third: self_.get(2).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBlobTwinRustAsyncSse{first:  self_.get(0).cst_decode(),second:  self_.get(1).cst_decode(),third:  self_.get(2).cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBlobTwinSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
            third: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBlobTwinSync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
            third: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBlobTwinSyncSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
            third: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::BigBuffersTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::BigBuffersTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::BigBuffersTwinNormal {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::BigBuffersTwinRustAsync {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::BigBuffersTwinRustAsyncSse {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::BigBuffersTwinSse {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::BigBuffersTwinSync {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::BigBuffersTwinSyncSse {
            int64: self_.get(0).cst_decode(),
            uint64: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::BlobTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::array::BlobTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::array::BlobTwinNormal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::BlobTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sse::BlobTwinSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::BlobTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync::BlobTwinSync(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<Box<[u8; 1600]>> for Box<[u8]> {
    fn cst_decode(self) -> Box<[u8; 1600]> {
        CstDecode::<[u8; 1600]>::cst_decode(self).into()
    }
}
impl CstDecode<Box<[u8; 8]>> for Box<[u8]> {
    fn cst_decode(self) -> Box<[u8; 8]> {
        CstDecode::<[u8; 8]>::cst_decode(self).into()
    }
}
impl CstDecode<crate::api::misc_example::CTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::CTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::CTwinNormal {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::CTwinRustAsync {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::CTwinRustAsyncSse {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::CTwinSse {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::CTwinSync {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::CTwinSyncSse {
            c: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::method::ConcatenateWithTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::method::ConcatenateWithTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::method::ConcatenateWithTwinNormal {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async::ConcatenateWithTwinRustAsync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async_sse::ConcatenateWithTwinRustAsyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sse::ConcatenateWithTwinSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync::ConcatenateWithTwinSync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync_sse::ConcatenateWithTwinSyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::mirror::ContainsMirroredSubStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::mirror::ContainsMirroredSubStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::mirror::ContainsMirroredSubStructTwinNormal {
            test: self_.get(0).cst_decode(),
            test2: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_rust_async::ContainsMirroredSubStructTwinRustAsync {
            test: self_.get(0).cst_decode(),
            test2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
                crate::api::pseudo_manual::mirror_twin_rust_async_sse::ContainsMirroredSubStructTwinRustAsyncSse{test:  self_.get(0).cst_decode(),test2:  self_.get(1).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sse::ContainsMirroredSubStructTwinSse {
            test: self_.get(0).cst_decode(),
            test2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync::ContainsMirroredSubStructTwinSync {
            test: self_.get(0).cst_decode(),
            test2: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::ContainsMirroredSubStructTwinSyncSse {
            test: self_.get(0).cst_decode(),
            test2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomEnumErrorTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomEnumErrorTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomEnumErrorTwinNormal::One {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::exception::CustomEnumErrorTwinNormal::Two {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::One{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomEnumErrorTwinRustAsync::Two{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::One{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomEnumErrorTwinRustAsyncSse::Two{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::One {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::pseudo_manual::exception_twin_sse::CustomEnumErrorTwinSse::Two {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::One {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::pseudo_manual::exception_twin_sync::CustomEnumErrorTwinSync::Two {
                message: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::One{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
1 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomEnumErrorTwinSyncSse::Two{message:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::exception::CustomErrorTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomErrorTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomErrorTwinNormal::Error0 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::exception::CustomErrorTwinNormal::Error1 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error0{e:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomErrorTwinRustAsync::Error1{e:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error0{e:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomErrorTwinRustAsyncSse::Error1{e:  self_.get(1).cst_decode(),backtrace:  self_.get(2).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error0 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::pseudo_manual::exception_twin_sse::CustomErrorTwinSse::Error1 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error0 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            1 => crate::api::pseudo_manual::exception_twin_sync::CustomErrorTwinSync::Error1 {
                e: self_.get(1).cst_decode(),
                backtrace: self_.get(2).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error0 {
                    e: self_.get(1).cst_decode(),
                    backtrace: self_.get(2).cst_decode(),
                }
            }
            1 => {
                crate::api::pseudo_manual::exception_twin_sync_sse::CustomErrorTwinSyncSse::Error1 {
                    e: self_.get(1).cst_decode(),
                    backtrace: self_.get(2).cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError1TwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedError1TwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomNestedError1TwinNormal::CustomNested1(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::exception::CustomNestedError1TwinNormal::ErrorNested(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::CustomNested1( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError1TwinRustAsync::ErrorNested( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::CustomNested1( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError1TwinRustAsyncSse::ErrorNested( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::CustomNested1( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sse::CustomNestedError1TwinSse::ErrorNested( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::CustomNested1( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError1TwinSync::ErrorNested( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::CustomNested1( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError1TwinSyncSse::ErrorNested( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::exception::CustomNestedError2TwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedError2TwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomNestedError2TwinNormal::CustomNested2(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::exception::CustomNestedError2TwinNormal::CustomNested2Number(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedError2TwinRustAsync::CustomNested2Number( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedError2TwinRustAsyncSse::CustomNested2Number( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sse::CustomNestedError2TwinSse::CustomNested2Number( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedError2TwinSync::CustomNested2Number( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedError2TwinSyncSse::CustomNested2Number( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorInnerTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorInnerTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomNestedErrorInnerTwinNormal::Three(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::exception::CustomNestedErrorInnerTwinNormal::Four(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Three( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorInnerTwinRustAsync::Four( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Three( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorInnerTwinRustAsyncSse::Four( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Three(
                    self_.get(1).cst_decode(),
                )
            }
            1 => {
                crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorInnerTwinSse::Four(
                    self_.get(1).cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Three( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorInnerTwinSync::Four( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Three( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorInnerTwinSyncSse::Four( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::exception::CustomNestedErrorOuterTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomNestedErrorOuterTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::exception::CustomNestedErrorOuterTwinNormal::One(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::exception::CustomNestedErrorOuterTwinNormal::Two(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::One( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async::CustomNestedErrorOuterTwinRustAsync::Two( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::One( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomNestedErrorOuterTwinRustAsyncSse::Two( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::One(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::exception_twin_sse::CustomNestedErrorOuterTwinSse::Two(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::One(
                    self_.get(1).cst_decode(),
                )
            }
            1 => {
                crate::api::pseudo_manual::exception_twin_sync::CustomNestedErrorOuterTwinSync::Two(
                    self_.get(1).cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::One( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::exception_twin_sync_sse::CustomNestedErrorOuterTwinSyncSse::Two( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorAnotherTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorAnotherTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::exception::CustomStructErrorAnotherTwinNormal {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorAnotherTwinRustAsync{message:  self_.get(0).cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
                crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorAnotherTwinRustAsyncSse{message:  self_.get(0).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorAnotherTwinSse {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorAnotherTwinSync {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorAnotherTwinSyncSse {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructErrorTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomStructErrorTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::exception::CustomStructErrorTwinNormal {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructErrorTwinRustAsync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructErrorTwinRustAsyncSse{a:  self_.get(0).cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sse::CustomStructErrorTwinSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync::CustomStructErrorTwinSync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructErrorTwinSyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::exception::CustomStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::CustomStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::exception::CustomStructTwinNormal {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async::CustomStructTwinRustAsync {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async_sse::CustomStructTwinRustAsyncSse {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sse::CustomStructTwinSse {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync::CustomStructTwinSync {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync_sse::CustomStructTwinSyncSse {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::attribute::CustomizedTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::attribute::CustomizedTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::attribute::CustomizedTwinNormal {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_rust_async::CustomizedTwinRustAsync {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::CustomizedTwinRustAsyncSse {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sse::CustomizedTwinSse {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sync::CustomizedTwinSync {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sync_sse::CustomizedTwinSyncSse {
            final_field: self_.get(0).cst_decode(),
            non_final_field: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_opaque::DartOpaqueNestedTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::dart_opaque::DartOpaqueNestedTwinNormal {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_opaque_twin_rust_async::DartOpaqueNestedTwinRustAsync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
                crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::DartOpaqueNestedTwinRustAsyncSse{first:  self_.get(0).cst_decode(),second:  self_.get(1).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_opaque_twin_sse::DartOpaqueNestedTwinSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_opaque_twin_sync::DartOpaqueNestedTwinSync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_opaque_twin_sync_sse::DartOpaqueNestedTwinSyncSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::dart_fn::DemoStructForRustCallDartTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::dart_fn::DemoStructForRustCallDartTwinNormal {
            name: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_fn_twin_rust_async::DemoStructForRustCallDartTwinRustAsync {
            name: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
                crate::api::pseudo_manual::dart_fn_twin_rust_async_sse::DemoStructForRustCallDartTwinRustAsyncSse{name:  self_.get(0).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::dart_fn_twin_sse::DemoStructForRustCallDartTwinSse {
            name: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::DistanceTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::DistanceTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::DistanceTwinNormal::Unknown,
            1 => crate::api::enumeration::DistanceTwinNormal::Map(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Unknown,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync::Map( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Unknown,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse::Map( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse::Map(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync::Map(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse::Map(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::optional::ElementTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::optional::ElementTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::optional::ElementTwinNormal {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse {
            tag: self_.get(0).cst_decode(),
            text: self_.get(1).cst_decode(),
            attributes: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_type::EmptyTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_type::EmptyTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::misc_type::EmptyTwinNormal {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_type_twin_rust_async::EmptyTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_type_twin_rust_async_sse::EmptyTwinRustAsyncSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_type_twin_sse::EmptyTwinSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_type_twin_sync::EmptyTwinSync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_type_twin_sync_sse::EmptyTwinSyncSse {}
    }
}
impl CstDecode<crate::api::dart_opaque::EnumDartOpaqueTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::dart_opaque::EnumDartOpaqueTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Primitive(
                self_.get(1).cst_decode(),
            ),
            1 => {
                crate::api::dart_opaque::EnumDartOpaqueTwinNormal::Opaque(self_.get(1).cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Primitive( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::dart_opaque_twin_rust_async::EnumDartOpaqueTwinRustAsync::Opaque( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Primitive( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::dart_opaque_twin_rust_async_sse::EnumDartOpaqueTwinRustAsyncSse::Opaque( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Primitive(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::dart_opaque_twin_sse::EnumDartOpaqueTwinSse::Opaque(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Primitive(
                    self_.get(1).cst_decode(),
                )
            }
            1 => crate::api::pseudo_manual::dart_opaque_twin_sync::EnumDartOpaqueTwinSync::Opaque(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Primitive( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::dart_opaque_twin_sync_sse::EnumDartOpaqueTwinSyncSse::Opaque( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Struct(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Primitive(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::TraitObj(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::Mutex(
                self_.get(1).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi::RwLock(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::rust_opaque::EnumOpaqueTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::rust_opaque::EnumOpaqueTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::rust_opaque::EnumOpaqueTwinNormal::Struct(self_.get(1).cst_decode()),
            1 => {
                crate::api::rust_opaque::EnumOpaqueTwinNormal::Primitive(self_.get(1).cst_decode())
            }
            2 => crate::api::rust_opaque::EnumOpaqueTwinNormal::TraitObj(self_.get(1).cst_decode()),
            3 => crate::api::rust_opaque::EnumOpaqueTwinNormal::Mutex(self_.get(1).cst_decode()),
            4 => crate::api::rust_opaque::EnumOpaqueTwinNormal::RwLock(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Struct(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Primitive(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::TraitObj(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::Mutex(
                self_.get(1).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse::RwLock(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Struct(
                self_.get(1).cst_decode(),
            ),
            1 => {
                crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Primitive(
                    self_.get(1).cst_decode(),
                )
            }
            2 => {
                crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::TraitObj(
                    self_.get(1).cst_decode(),
                )
            }
            3 => crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::Mutex(
                self_.get(1).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi::RwLock(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Struct(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Primitive(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::TraitObj(
                self_.get(1).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::Mutex(
                self_.get(1).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync::RwLock(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Struct( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Primitive( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::TraitObj( self_.get(1).cst_decode()) },
3 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::Mutex( self_.get(1).cst_decode()) },
4 => { crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi::RwLock( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemMixedTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemMixedTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::EnumWithItemMixedTwinNormal::A,
            1 => crate::api::enumeration::EnumWithItemMixedTwinNormal::B(self_.get(1).cst_decode()),
            2 => crate::api::enumeration::EnumWithItemMixedTwinNormal::C {
                c_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::A,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::B( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemMixedTwinRustAsync::C{c_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::A,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::B( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemMixedTwinRustAsyncSse::C{c_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemMixedTwinSse::C {
                c_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::A,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::B(
                self_.get(1).cst_decode(),
            ),
            2 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemMixedTwinSync::C {
                c_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::A,
1 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::B( self_.get(1).cst_decode()) },
2 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemMixedTwinSyncSse::C{c_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemStructTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::EnumWithItemStructTwinNormal::A {
                a_field: self_.get(1).cst_decode(),
            },
            1 => crate::api::enumeration::EnumWithItemStructTwinNormal::B {
                b_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::A{a_field:  self_.get(1).cst_decode()} },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemStructTwinRustAsync::B{b_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::A{a_field:  self_.get(1).cst_decode()} },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemStructTwinRustAsyncSse::B{b_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::A {
                a_field: self_.get(1).cst_decode(),
            },
            1 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemStructTwinSse::B {
                b_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::A {
                a_field: self_.get(1).cst_decode(),
            },
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemStructTwinSync::B {
                b_field: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::A{a_field:  self_.get(1).cst_decode()} },
1 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemStructTwinSyncSse::B{b_field:  self_.get(1).cst_decode()} },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::enumeration::EnumWithItemTupleTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::EnumWithItemTupleTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::EnumWithItemTupleTwinNormal::A(self_.get(1).cst_decode()),
            1 => crate::api::enumeration::EnumWithItemTupleTwinNormal::B(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::A( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::EnumWithItemTupleTwinRustAsync::B( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse {
                let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::A( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumWithItemTupleTwinRustAsyncSse::B( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
            }
        }
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::enumeration_twin_sse::EnumWithItemTupleTwinSse::B(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::A(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::enumeration_twin_sync::EnumWithItemTupleTwinSync::B(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::A( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumWithItemTupleTwinSyncSse::B( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::event_listener::EventTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::event_listener::EventTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::event_listener::EventTwinNormal {
            address: self_.get(0).cst_decode(),
            payload: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::event_listener_twin_rust_async::EventTwinRustAsync {
            address: self_.get(0).cst_decode(),
            payload: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::event_listener_twin_rust_async_sse::EventTwinRustAsyncSse {
            address: self_.get(0).cst_decode(),
            payload: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::event_listener_twin_sse::EventTwinSse {
            address: self_.get(0).cst_decode(),
            payload: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::optional::ExoticOptionalsTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::optional::ExoticOptionalsTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::optional::ExoticOptionalsTwinNormal {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            14,
            "Expected 14 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse {
            int32: self_.get(0).cst_decode(),
            int64: self_.get(1).cst_decode(),
            float64: self_.get(2).cst_decode(),
            boolean: self_.get(3).cst_decode(),
            zerocopy: self_.get(4).cst_decode(),
            int8list: self_.get(5).cst_decode(),
            uint8list: self_.get(6).cst_decode(),
            int32list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            attributes: self_.get(10).cst_decode(),
            attributes_nullable: self_.get(11).cst_decode(),
            nullable_attributes: self_.get(12).cst_decode(),
            newtypeint: self_.get(13).cst_decode(),
        }
    }
}
impl CstDecode<[f64; 16]> for Box<[f64]> {
    fn cst_decode(self) -> [f64; 16] {
        let vec: Vec<f64> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::chrono_type::FeatureChronoTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::chrono_type::FeatureChronoTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::chrono_type::FeatureChronoTwinNormal {
            utc: self_.get(0).cst_decode(),
            local: self_.get(1).cst_decode(),
            duration: self_.get(2).cst_decode(),
            naive: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::chrono_type_twin_rust_async::FeatureChronoTwinRustAsync {
            utc: self_.get(0).cst_decode(),
            local: self_.get(1).cst_decode(),
            duration: self_.get(2).cst_decode(),
            naive: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::chrono_type_twin_sync::FeatureChronoTwinSync {
            utc: self_.get(0).cst_decode(),
            local: self_.get(1).cst_decode(),
            duration: self_.get(2).cst_decode(),
            naive: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::uuid_type::FeatureUuidTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::uuid_type::FeatureUuidTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::uuid_type::FeatureUuidTwinNormal {
            one: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::uuid_type_twin_rust_async::FeatureUuidTwinRustAsync {
            one: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::uuid_type_twin_sync::FeatureUuidTwinSync {
            one: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::FeedIdTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::array::FeedIdTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::array::FeedIdTwinNormal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<[i32; 2]> for Box<[i32]> {
    fn cst_decode(self) -> [i32; 2] {
        let vec: Vec<i32> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::enumeration::KitchenSinkTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::KitchenSinkTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::KitchenSinkTwinNormal::Empty,
            1 => crate::api::enumeration::KitchenSinkTwinNormal::Primitives {
                int32: self_.get(1).cst_decode(),
                float64: self_.get(2).cst_decode(),
                boolean: self_.get(3).cst_decode(),
            },
            2 => crate::api::enumeration::KitchenSinkTwinNormal::Nested(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            3 => crate::api::enumeration::KitchenSinkTwinNormal::Optional(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            4 => crate::api::enumeration::KitchenSinkTwinNormal::Buffer(self_.get(1).cst_decode()),
            5 => crate::api::enumeration::KitchenSinkTwinNormal::Enums(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Empty,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Primitives{int32:  self_.get(1).cst_decode(),float64:  self_.get(2).cst_decode(),boolean:  self_.get(3).cst_decode()} },
2 => { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Nested( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
3 => { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Optional( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
4 => { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Buffer( self_.get(1).cst_decode()) },
5 => { crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync::Enums( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse
    {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Empty,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Primitives{int32:  self_.get(1).cst_decode(),float64:  self_.get(2).cst_decode(),boolean:  self_.get(3).cst_decode()} },
2 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Nested( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
3 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Optional( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
4 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Buffer( self_.get(1).cst_decode()) },
5 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse::Enums( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Empty,
            1 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Primitives {
                int32: self_.get(1).cst_decode(),
                float64: self_.get(2).cst_decode(),
                boolean: self_.get(3).cst_decode(),
            },
            2 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Nested(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Optional(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Buffer(
                self_.get(1).cst_decode(),
            ),
            5 => crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse::Enums(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Empty,
            1 => {
                crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Primitives {
                    int32: self_.get(1).cst_decode(),
                    float64: self_.get(2).cst_decode(),
                    boolean: self_.get(3).cst_decode(),
                }
            }
            2 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Nested(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            3 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Optional(
                self_.get(1).cst_decode(),
                self_.get(2).cst_decode(),
            ),
            4 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Buffer(
                self_.get(1).cst_decode(),
            ),
            5 => crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync::Enums(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Empty,
1 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Primitives{int32:  self_.get(1).cst_decode(),float64:  self_.get(2).cst_decode(),boolean:  self_.get(3).cst_decode()} },
2 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Nested( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
3 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Optional( self_.get(1).cst_decode(), self_.get(2).cst_decode()) },
4 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Buffer( self_.get(1).cst_decode()) },
5 => { crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse::Enums( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<Vec<chrono::Duration>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<chrono::Duration> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<chrono::DateTime<chrono::Local>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<chrono::DateTime<chrono::Local>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<chrono::NaiveDateTime>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<chrono::NaiveDateTime> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<flutter_rust_bridge::DartOpaque>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<flutter_rust_bridge::DartOpaque> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            RustOpaqueNom<
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
        >,
    > {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi>> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse>> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            RustOpaqueMoi<
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            RustOpaqueNom<
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            RustOpaqueMoi<
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
        >,
    > {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<String>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<String> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnvVar> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::optional::AttributeTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::optional::AttributeTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic::BasicStructTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<bool>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<bool> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::optional::ElementTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::optional::ElementTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async::ElementTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_rust_async_sse::ElementTwinRustAsyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sse::ElementTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::optional_twin_sync::ElementTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::optional_twin_sync_sse::ElementTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MyEnum>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MyEnum> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::auxiliary::sample_types::MySize>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::auxiliary::sample_types::MySize> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::MyTreeNodeTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::MyTreeNodeTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::ListOfNestedRawStringMirrored {
            raw: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<Vec<Option<String>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<Option<String>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::optional::AttributeTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<Option<crate::api::optional::AttributeTwinNormal>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_rust_async::AttributeTwinRustAsync>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<
            Option<
                crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<
        Option<crate::api::pseudo_manual::optional_twin_rust_async_sse::AttributeTwinRustAsyncSse>,
    > {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sse::AttributeTwinSse>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync::AttributeTwinSync>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::optional_twin_sync_sse::AttributeTwinSyncSse>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<i32>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<Option<i32>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<Option<crate::api::misc_example::WeekdaysTwinNormal>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<Option<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<Option<Vec<i32>>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<Option<Vec<i32>>> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::array::PointTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::array::PointTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<f32>> for Box<[f32]> {
    fn cst_decode(self) -> Vec<f32> {
        self.into_vec()
    }
}
impl CstDecode<Vec<f64>> for Box<[f64]> {
    fn cst_decode(self) -> Vec<f64> {
        self.into_vec()
    }
}
impl CstDecode<Vec<i16>> for Box<[i16]> {
    fn cst_decode(self) -> Vec<i16> {
        self.into_vec()
    }
}
impl CstDecode<Vec<i32>> for Box<[i32]> {
    fn cst_decode(self) -> Vec<i32> {
        self.into_vec()
    }
}
impl CstDecode<Vec<i64>> for Box<[i64]> {
    fn cst_decode(self) -> Vec<i64> {
        self.into_vec()
    }
}
impl CstDecode<Vec<i8>> for Box<[i8]> {
    fn cst_decode(self) -> Vec<i8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u16>> for Box<[u16]> {
    fn cst_decode(self) -> Vec<u16> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u32>> for Box<[u32]> {
    fn cst_decode(self) -> Vec<u32> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u64>> for Box<[u64]> {
    fn cst_decode(self) -> Vec<u64> {
        self.into_vec()
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Vec<(i32,crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,)> {
                self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap().iter().map(CstDecode::cst_decode).collect()
            }
        }
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, bool)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, bool)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, f32)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, f32)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, f64)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, f64)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, i16)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, i16)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, i32)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, i32)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, i64)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, i64)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, i8)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, i8)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, isize)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, isize)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, Vec<u8>)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, Vec<u8>)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, String)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, String)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, u16)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, u16)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, u32)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, u32)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, u64)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, u64)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, u8)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, u8)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(i32, usize)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(i32, usize)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, i32)>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<(String, i32)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
        )>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, Vec<u8>)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(String, Vec<u8>)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, crate::auxiliary::sample_types::MySize)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(String, crate::auxiliary::sample_types::MySize)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<(String, String)>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<(String, String)> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::method::SumWithTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::method::SumWithTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::array::TestIdTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::array::TestIdTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::misc_example::WeekdaysTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::misc_example::WeekdaysTwinNormal> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl
    CstDecode<
        Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Vec<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::api::method::Log2TwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::method::Log2TwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::method::Log2TwinNormal {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async::Log2TwinRustAsync {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async_sse::Log2TwinRustAsyncSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::Log2TwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sse::Log2TwinSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::Log2TwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync::Log2TwinSync {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync_sse::Log2TwinSyncSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::LogTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::stream::LogTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::stream::LogTwinNormal {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_rust_async::LogTwinRustAsync {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_rust_async_sse::LogTwinRustAsyncSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_sse::LogTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_sse::LogTwinSse {
            key: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::inside_macro::MacroStruct>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::inside_macro::MacroStruct {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::inside_macro::MacroStruct {
            data: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::MeasureTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::MeasureTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::MeasureTwinNormal::Speed(self_.get(1).cst_decode()),
            1 => crate::api::enumeration::MeasureTwinNormal::Distance(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Speed( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async::MeasureTwinRustAsync::Distance( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Speed( self_.get(1).cst_decode()) },
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::MeasureTwinRustAsyncSse::Distance( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Speed(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::enumeration_twin_sse::MeasureTwinSse::Distance(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Speed(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::enumeration_twin_sync::MeasureTwinSync::Distance(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Speed(
                self_.get(1).cst_decode(),
            ),
            1 => {
                crate::api::pseudo_manual::enumeration_twin_sync_sse::MeasureTwinSyncSse::Distance(
                    self_.get(1).cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::array::MessageIdTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::array::MessageIdTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::array::MessageIdTwinNormal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async::MessageIdTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async_sse::MessageIdTwinRustAsyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sse::MessageIdTwinSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync::MessageIdTwinSync(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync_sse::MessageIdTwinSyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::mirror::MirrorStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::mirror::MirrorStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::mirror::MirrorStructTwinNormal {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_rust_async::MirrorStructTwinRustAsync {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_rust_async_sse::MirrorStructTwinRustAsyncSse {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sse::MirrorStructTwinSse {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync::MirrorStructTwinSync {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::MirrorStructTwinSyncSse {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
            c: self_.get(2).cst_decode(),
            d: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::raw_string::MoreThanJustOneRawStringStructTwinNormal {
            regular: self_.get(0).cst_decode(),
            r#type: self_.get(1).cst_decode(),
            r#async: self_.get(2).cst_decode(),
            another: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
                crate::api::pseudo_manual::raw_string_twin_rust_async::MoreThanJustOneRawStringStructTwinRustAsync{regular:  self_.get(0).cst_decode(),r#type:  self_.get(1).cst_decode(),r#async:  self_.get(2).cst_decode(),another:  self_.get(3).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
                crate::api::pseudo_manual::raw_string_twin_rust_async_sse::MoreThanJustOneRawStringStructTwinRustAsyncSse{regular:  self_.get(0).cst_decode(),r#type:  self_.get(1).cst_decode(),r#async:  self_.get(2).cst_decode(),another:  self_.get(3).cst_decode()}
            }
        }
impl
    CstDecode<crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_sse::MoreThanJustOneRawStringStructTwinSse {
            regular: self_.get(0).cst_decode(),
            r#type: self_.get(1).cst_decode(),
            r#async: self_.get(2).cst_decode(),
            another: self_.get(3).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_sync::MoreThanJustOneRawStringStructTwinSync {
            regular: self_.get(0).cst_decode(),
            r#type: self_.get(1).cst_decode(),
            r#async: self_.get(2).cst_decode(),
            another: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 4, "Expected 4 elements, got {}", self_.length());
                crate::api::pseudo_manual::raw_string_twin_sync_sse::MoreThanJustOneRawStringStructTwinSyncSse{regular:  self_.get(0).cst_decode(),r#type:  self_.get(1).cst_decode(),r#async:  self_.get(2).cst_decode(),another:  self_.get(3).cst_decode()}
            }
        }
impl CstDecode<crate::api::misc_example::MyNestedStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::MyNestedStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::MyNestedStructTwinNormal {
            tree_node: self_.get(0).cst_decode(),
            weekday: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyNestedStructTwinRustAsync {
            tree_node: self_.get(0).cst_decode(),
            weekday: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyNestedStructTwinRustAsyncSse{tree_node:  self_.get(0).cst_decode(),weekday:  self_.get(1).cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::MyNestedStructTwinSse {
            tree_node: self_.get(0).cst_decode(),
            weekday: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::MyNestedStructTwinSync {
            tree_node: self_.get(0).cst_decode(),
            weekday: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyNestedStructTwinSyncSse {
            tree_node: self_.get(0).cst_decode(),
            weekday: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MySize>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::auxiliary::sample_types::MySize {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::auxiliary::sample_types::MySize {
            width: self_.get(0).cst_decode(),
            height: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::stream::MyStreamEntryTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::stream::MyStreamEntryTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::stream::MyStreamEntryTwinNormal {
            hello: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_rust_async::MyStreamEntryTwinRustAsync {
            hello: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_rust_async_sse::MyStreamEntryTwinRustAsyncSse {
            hello: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::stream_twin_sse::MyStreamEntryTwinSse {
            hello: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyStruct>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyStruct {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::auxiliary::sample_types::MyStruct {
            content: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::MyTreeNodeTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::MyTreeNodeTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::MyTreeNodeTwinNormal {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::MyTreeNodeTwinRustAsync {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::MyTreeNodeTwinRustAsyncSse {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::MyTreeNodeTwinSse {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::MyTreeNodeTwinSync {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::MyTreeNodeTwinSyncSse {
            value_i32: self_.get(0).cst_decode(),
            value_vec_u8: self_.get(1).cst_decode(),
            value_boolean: self_.get(2).cst_decode(),
            children: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::NestedRawStringMirrored {
            raw: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::auxiliary::new_module_system::sub_module::NewSimpleStruct>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::auxiliary::new_module_system::sub_module::NewSimpleStruct {
            field: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::newtype_pattern::NewTypeIntTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::newtype_pattern::NewTypeIntTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::newtype_pattern::NewTypeIntTwinNormal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async::NewTypeIntTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::newtype_pattern_twin_rust_async_sse::NewTypeIntTwinRustAsyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::newtype_pattern_twin_sse::NewTypeIntTwinSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::newtype_pattern_twin_sync::NewTypeIntTwinSync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::newtype_pattern_twin_sync_sse::NewTypeIntTwinSyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::enumeration::NoteTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::NoteTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::enumeration::NoteTwinNormal {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::enumeration_twin_rust_async::NoteTwinRustAsync {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::NoteTwinRustAsyncSse {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::enumeration_twin_sse::NoteTwinSse {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::enumeration_twin_sync::NoteTwinSync {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::enumeration_twin_sync_sse::NoteTwinSyncSse {
            day: self_.get(0).cst_decode(),
            body: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::Numbers(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::auxiliary::old_module_system::sub_module::OldSimpleStruct>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::auxiliary::old_module_system::sub_module::OldSimpleStruct {
            field: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_moi::OpaqueNestedTwinMoi {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::rust_opaque::OpaqueNestedTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::rust_opaque::OpaqueNestedTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::rust_opaque::OpaqueNestedTwinNormal {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::OpaqueNestedTwinRustAsync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::OpaqueNestedTwinRustAsyncMoi {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::OpaqueNestedTwinRustAsyncSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
                crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::OpaqueNestedTwinRustAsyncSseMoi{first:  self_.get(0).cst_decode(),second:  self_.get(1).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sse::OpaqueNestedTwinSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sse_moi::OpaqueNestedTwinSseMoi {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sync::OpaqueNestedTwinSync {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::OpaqueNestedTwinSyncMoi {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse::OpaqueNestedTwinSyncSse {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::OpaqueNestedTwinSyncSseMoi {
            first: self_.get(0).cst_decode(),
            second: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<Option<String>> for Option<String> {
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<f32>>> for Option<Box<[f32]>> {
    fn cst_decode(self) -> Option<Vec<f32>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<f64>>> for Option<Box<[f64]>> {
    fn cst_decode(self) -> Option<Vec<f64>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<i32>>> for Option<Box<[i32]>> {
    fn cst_decode(self) -> Option<Vec<i32>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<i8>>> for Option<Box<[i8]>> {
    fn cst_decode(self) -> Option<Vec<i8>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<u8>>> for Option<Box<[u8]>> {
    fn cst_decode(self) -> Option<Vec<u8>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<crate::api::optional::OptVecsTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::optional::OptVecsTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::optional::OptVecsTwinNormal {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async::OptVecsTwinRustAsync {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_rust_async_sse::OptVecsTwinRustAsyncSse {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sse::OptVecsTwinSse {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync::OptVecsTwinSync {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::optional_twin_sync_sse::OptVecsTwinSyncSse {
            i32: self_.get(0).cst_decode(),
            enums: self_.get(1).cst_decode(),
            strings: self_.get(2).cst_decode(),
            buffers: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::PointTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::array::PointTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::array::PointTwinNormal {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::PointTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sse::PointTwinSse {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::PointTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync::PointTwinSync {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse {
            x: self_.get(0).cst_decode(),
            y: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Raw(
                self_.get(1).cst_decode(),
            ),
            1 => crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::Nested(
                self_.get(1).cst_decode(),
            ),
            2 => {
                crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored::ListOfNested(
                    self_.get(1).cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::raw_string::RawStringItemStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::raw_string::RawStringItemStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::raw_string::RawStringItemStructTwinNormal {
            r#type: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_rust_async::RawStringItemStructTwinRustAsync {
            r#type: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
                crate::api::pseudo_manual::raw_string_twin_rust_async_sse::RawStringItemStructTwinRustAsyncSse{r#type:  self_.get(0).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_sse::RawStringItemStructTwinSse {
            r#type: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_sync::RawStringItemStructTwinSync {
            r#type: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::raw_string_twin_sync_sse::RawStringItemStructTwinSyncSse {
            r#type: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringMirrored {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<(
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationSettings,
        crate::api::pseudo_manual::mirror_twin_sync_sse::RawStringEnumMirrored,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> (i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, bool)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, bool) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, f32)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, f32) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, f64)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, f64) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, i16)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, i16) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, i32)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, i32) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, i64)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, i64) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, i8)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, i8) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, isize)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, isize) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, Vec<u8>)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, Vec<u8>) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, String)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, String) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, u16)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, u16) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, u32)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, u32) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, u64)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, u64) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, u8)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, u8) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(i32, usize)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (i32, usize) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, crate::api::enumeration::EnumSimpleTwinNormal)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> (String, crate::api::enumeration::EnumSimpleTwinNormal) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, i32)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (String, i32) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, crate::api::enumeration::KitchenSinkTwinNormal)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> (String, crate::api::enumeration::KitchenSinkTwinNormal) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl
    CstDecode<(
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    )> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> (
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    ) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, Vec<u8>)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (String, Vec<u8>) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, crate::auxiliary::sample_types::MySize)>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> (String, crate::auxiliary::sample_types::MySize) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<(String, String)> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> (String, String) {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        (self_.get(0).cst_decode(), self_.get(1).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::mirror_twin_sync_sse::Sequences(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::exception::SomeStructTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::exception::SomeStructTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::exception::SomeStructTwinNormal {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async::SomeStructTwinRustAsync {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_rust_async_sse::SomeStructTwinRustAsyncSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sse::SomeStructTwinSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync::SomeStructTwinSync {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::exception_twin_sync_sse::SomeStructTwinSyncSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::enumeration::SpeedTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::SpeedTwinNormal {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::enumeration::SpeedTwinNormal::Unknown,
            1 => crate::api::enumeration::SpeedTwinNormal::GPS(self_.get(1).cst_decode()),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => {
                crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::Unknown
            }
            1 => crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync::GPS(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
                    0 => crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::Unknown,
1 => { crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse::GPS( self_.get(1).cst_decode()) },
                    _ => unreachable!(),
                }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse::GPS(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync::GPS(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::Unknown,
            1 => crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse::GPS(
                self_.get(1).cst_decode(),
            ),
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::comment::StructWithCommentsTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::comment::StructWithCommentsTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::comment::StructWithCommentsTwinNormal {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::comment_twin_rust_async::StructWithCommentsTwinRustAsync {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::comment_twin_rust_async_sse::StructWithCommentsTwinRustAsyncSse {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::comment_twin_sse::StructWithCommentsTwinSse {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::comment_twin_sync::StructWithCommentsTwinSync {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::comment_twin_sync_sse::StructWithCommentsTwinSyncSse {
            field_with_comments: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::misc_example::StructWithEnumTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::StructWithEnumTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::misc_example::StructWithEnumTwinNormal {
            abc1: self_.get(0).cst_decode(),
            abc2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async::StructWithEnumTwinRustAsync {
            abc1: self_.get(0).cst_decode(),
            abc2: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_rust_async_sse::StructWithEnumTwinRustAsyncSse{abc1:  self_.get(0).cst_decode(),abc2:  self_.get(1).cst_decode()}
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sse::StructWithEnumTwinSse {
            abc1: self_.get(0).cst_decode(),
            abc2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync::StructWithEnumTwinSync {
            abc1: self_.get(0).cst_decode(),
            abc2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::misc_example_twin_sync_sse::StructWithEnumTwinSyncSse {
            abc1: self_.get(0).cst_decode(),
            abc2: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithOneFieldTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::structure::StructWithOneFieldTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::structure::StructWithOneFieldTwinNormal {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithOneFieldTwinRustAsync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithOneFieldTwinRustAsyncSse{a:  self_.get(0).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sse::StructWithOneFieldTwinSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync::StructWithOneFieldTwinSync {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithOneFieldTwinSyncSse {
            a: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithTwoFieldTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::structure::StructWithTwoFieldTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::structure::StructWithTwoFieldTwinNormal {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
        }
    }
}
impl
    CstDecode<crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithTwoFieldTwinRustAsync {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithTwoFieldTwinRustAsyncSse{a:  self_.get(0).cst_decode(),b:  self_.get(1).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sse::StructWithTwoFieldTwinSse {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync::StructWithTwoFieldTwinSync {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithTwoFieldTwinSyncSse {
            a: self_.get(0).cst_decode(),
            b: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::StructWithZeroFieldTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::structure::StructWithZeroFieldTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::structure::StructWithZeroFieldTwinNormal {}
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_rust_async::StructWithZeroFieldTwinRustAsync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 0, "Expected 0 elements, got {}", self_.length());
                crate::api::pseudo_manual::structure_twin_rust_async_sse::StructWithZeroFieldTwinRustAsyncSse{}
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sse::StructWithZeroFieldTwinSse {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync::StructWithZeroFieldTwinSync {}
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            0,
            "Expected 0 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync_sse::StructWithZeroFieldTwinSyncSse {}
    }
}
impl CstDecode<crate::api::method::SumWithTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::method::SumWithTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::method::SumWithTwinNormal {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse {
            x: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::chrono_type::TestChronoTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::chrono_type::TestChronoTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::chrono_type::TestChronoTwinNormal {
            dt: self_.get(0).cst_decode(),
            dt2: self_.get(1).cst_decode(),
            du: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::chrono_type_twin_rust_async::TestChronoTwinRustAsync {
            dt: self_.get(0).cst_decode(),
            dt2: self_.get(1).cst_decode(),
            du: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::chrono_type_twin_sync::TestChronoTwinSync {
            dt: self_.get(0).cst_decode(),
            dt2: self_.get(1).cst_decode(),
            du: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::array::TestIdTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::array::TestIdTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::array::TestIdTwinNormal(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse(self_.get(0).cst_decode())
    }
}
impl CstDecode<crate::api::type_alias::TestModelTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::type_alias::TestModelTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::type_alias::TestModelTwinNormal {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::type_alias_twin_rust_async::TestModelTwinRustAsync {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::type_alias_twin_rust_async_sse::TestModelTwinRustAsyncSse {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::type_alias_twin_sse::TestModelTwinSse {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::type_alias_twin_sync::TestModelTwinSync {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::type_alias_twin_sync_sse::TestModelTwinSyncSse {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            alias_enum: self_.get(2).cst_decode(),
            alias_struct: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::structure::TupleStructWithOneFieldTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithOneFieldTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::structure::TupleStructWithOneFieldTwinNormal(self_.get(0).cst_decode())
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithOneFieldTwinRustAsync(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 1, "Expected 1 elements, got {}", self_.length());
                crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithOneFieldTwinRustAsyncSse( self_.get(0).cst_decode())
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithOneFieldTwinSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithOneFieldTwinSync(
            self_.get(0).cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithOneFieldTwinSyncSse(
            self_.get(0).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::structure::TupleStructWithTwoFieldTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::structure::TupleStructWithTwoFieldTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::structure::TupleStructWithTwoFieldTwinNormal(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_rust_async::TupleStructWithTwoFieldTwinRustAsync(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 2, "Expected 2 elements, got {}", self_.length());
                crate::api::pseudo_manual::structure_twin_rust_async_sse::TupleStructWithTwoFieldTwinRustAsyncSse( self_.get(0).cst_decode(), self_.get(1).cst_decode())
            }
        }
impl CstDecode<crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sse::TupleStructWithTwoFieldTwinSse(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl CstDecode<crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync::TupleStructWithTwoFieldTwinSync(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::structure_twin_sync_sse::TupleStructWithTwoFieldTwinSyncSse(
            self_.get(0).cst_decode(),
            self_.get(1).cst_decode(),
        )
    }
}
impl CstDecode<[u8; 1600]> for Box<[u8]> {
    fn cst_decode(self) -> [u8; 1600] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 32]> for Box<[u8]> {
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 5]> for Box<[u8]> {
    fn cst_decode(self) -> [u8; 5] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 8]> for Box<[u8]> {
    fn cst_decode(self) -> [u8; 8] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::attribute::UserIdTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::attribute::UserIdTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::attribute::UserIdTwinNormal {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_rust_async::UserIdTwinRustAsync {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_rust_async_sse::UserIdTwinRustAsyncSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sse::UserIdTwinSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sync::UserIdTwinSync {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::attribute_twin_sync_sse::UserIdTwinSyncSse {
            value: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::api::primitive_list_misc::VecOfPrimitivePackTwinNormal {
            int8list: self_.get(0).cst_decode(),
            uint8list: self_.get(1).cst_decode(),
            int16list: self_.get(2).cst_decode(),
            uint16list: self_.get(3).cst_decode(),
            uint32list: self_.get(4).cst_decode(),
            int32list: self_.get(5).cst_decode(),
            uint64list: self_.get(6).cst_decode(),
            int64list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            bool_list: self_.get(10).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 11, "Expected 11 elements, got {}", self_.length());
                crate::api::pseudo_manual::primitive_list_misc_twin_rust_async::VecOfPrimitivePackTwinRustAsync{int8list:  self_.get(0).cst_decode(),uint8list:  self_.get(1).cst_decode(),int16list:  self_.get(2).cst_decode(),uint16list:  self_.get(3).cst_decode(),uint32list:  self_.get(4).cst_decode(),int32list:  self_.get(5).cst_decode(),uint64list:  self_.get(6).cst_decode(),int64list:  self_.get(7).cst_decode(),float32list:  self_.get(8).cst_decode(),float64list:  self_.get(9).cst_decode(),bool_list:  self_.get(10).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse {
                let self_ = self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>().unwrap();
                assert_eq!(self_.length(), 11, "Expected 11 elements, got {}", self_.length());
                crate::api::pseudo_manual::primitive_list_misc_twin_rust_async_sse::VecOfPrimitivePackTwinRustAsyncSse{int8list:  self_.get(0).cst_decode(),uint8list:  self_.get(1).cst_decode(),int16list:  self_.get(2).cst_decode(),uint16list:  self_.get(3).cst_decode(),uint32list:  self_.get(4).cst_decode(),int32list:  self_.get(5).cst_decode(),uint64list:  self_.get(6).cst_decode(),int64list:  self_.get(7).cst_decode(),float32list:  self_.get(8).cst_decode(),float64list:  self_.get(9).cst_decode(),bool_list:  self_.get(10).cst_decode()}
            }
        }
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::primitive_list_misc_twin_sse::VecOfPrimitivePackTwinSse {
            int8list: self_.get(0).cst_decode(),
            uint8list: self_.get(1).cst_decode(),
            int16list: self_.get(2).cst_decode(),
            uint16list: self_.get(3).cst_decode(),
            uint32list: self_.get(4).cst_decode(),
            int32list: self_.get(5).cst_decode(),
            uint64list: self_.get(6).cst_decode(),
            int64list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            bool_list: self_.get(10).cst_decode(),
        }
    }
}
impl CstDecode<crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::primitive_list_misc_twin_sync::VecOfPrimitivePackTwinSync {
            int8list: self_.get(0).cst_decode(),
            uint8list: self_.get(1).cst_decode(),
            int16list: self_.get(2).cst_decode(),
            uint16list: self_.get(3).cst_decode(),
            uint32list: self_.get(4).cst_decode(),
            int32list: self_.get(5).cst_decode(),
            uint64list: self_.get(6).cst_decode(),
            int64list: self_.get(7).cst_decode(),
            float32list: self_.get(8).cst_decode(),
            float64list: self_.get(9).cst_decode(),
            bool_list: self_.get(10).cst_decode(),
        }
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse
    {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::api::pseudo_manual::primitive_list_misc_twin_sync_sse::VecOfPrimitivePackTwinSyncSse{int8list:  self_.get(0).cst_decode(),uint8list:  self_.get(1).cst_decode(),int16list:  self_.get(2).cst_decode(),uint16list:  self_.get(3).cst_decode(),uint32list:  self_.get(4).cst_decode(),int32list:  self_.get(5).cst_decode(),uint64list:  self_.get(6).cst_decode(),int64list:  self_.get(7).cst_decode(),float32list:  self_.get(8).cst_decode(),float64list:  self_.get(9).cst_decode(),bool_list:  self_.get(10).cst_decode()}
    }
}
impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<backtrace::Backtrace> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> backtrace::Backtrace {
        unimplemented!()
    }
}
impl CstDecode<chrono::Duration> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> chrono::Duration {
        CstDecode::<i64>::cst_decode(self).cst_decode()
    }
}
impl CstDecode<chrono::DateTime<chrono::Local>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> chrono::DateTime<chrono::Local> {
        CstDecode::<i64>::cst_decode(self).cst_decode()
    }
}
impl CstDecode<chrono::NaiveDateTime>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> chrono::NaiveDateTime {
        CstDecode::<i64>::cst_decode(self).cst_decode()
    }
}
impl CstDecode<chrono::DateTime<chrono::Utc>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> chrono::DateTime<chrono::Utc> {
        CstDecode::<i64>::cst_decode(self).cst_decode()
    }
}
impl CstDecode<[flutter_rust_bridge::DartOpaque; 1]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [flutter_rust_bridge::DartOpaque; 1] {
        let vec: Vec<flutter_rust_bridge::DartOpaque> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<std::collections::HashMap<String, String>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<String, String> {
        let vec: Vec<(String, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::api::enumeration::EnumSimpleTwinNormal> {
        let vec: Vec<(String, crate::api::enumeration::EnumSimpleTwinNormal)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::api::enumeration::KitchenSinkTwinNormal> {
        let vec: Vec<(String, crate::api::enumeration::KitchenSinkTwinNormal)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        String,
        crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
    > {
        let vec: Vec<(
            String,
            crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, Vec<u8>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<String, Vec<u8>> {
        let vec: Vec<(String, Vec<u8>)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<String, crate::auxiliary::sample_types::MySize>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<String, crate::auxiliary::sample_types::MySize> {
        let vec: Vec<(String, crate::auxiliary::sample_types::MySize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, String>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, String> {
        let vec: Vec<(i32, String)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal>
    {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicGeneralEnumTwinNormal,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicGeneralEnumTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicGeneralEnumTwinRustAsyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicGeneralEnumTwinSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicGeneralEnumTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicGeneralEnumTwinSyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse> {
                let vec: Vec<(i32, crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse)> = self.cst_decode(); vec.into_iter().collect()
            }
        }
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal>
    {
        let vec: Vec<(i32, crate::api::pseudo_manual::basic::BasicStructTwinNormal)> =
            self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async::BasicStructTwinRustAsync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicStructTwinRustAsyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<i32, crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse>
    {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sse::BasicStructTwinSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync::BasicStructTwinSync,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl
    CstDecode<
        std::collections::HashMap<
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> std::collections::HashMap<
        i32,
        crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
    > {
        let vec: Vec<(
            i32,
            crate::api::pseudo_manual::basic_twin_sync_sse::BasicStructTwinSyncSse,
        )> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, bool>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, bool> {
        let vec: Vec<(i32, bool)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, f32>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, f32> {
        let vec: Vec<(i32, f32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, f64>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, f64> {
        let vec: Vec<(i32, f64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i16>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, i16> {
        let vec: Vec<(i32, i16)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i32>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, i32> {
        let vec: Vec<(i32, i32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i64>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, i64> {
        let vec: Vec<(i32, i64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, i8>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, i8> {
        let vec: Vec<(i32, i8)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, isize>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, isize> {
        let vec: Vec<(i32, isize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, Vec<u8>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, Vec<u8>> {
        let vec: Vec<(i32, Vec<u8>)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u16>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, u16> {
        let vec: Vec<(i32, u16)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u32>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, u32> {
        let vec: Vec<(i32, u32)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u64>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, u64> {
        let vec: Vec<(i32, u64)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, u8>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, u8> {
        let vec: Vec<(i32, u8)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashMap<i32, usize>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashMap<i32, usize> {
        let vec: Vec<(i32, usize)> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinNormal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinRustAsync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinRustAsync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinRustAsyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinRustAsyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinRustAsyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinRustAsyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinRustAsyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinSync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinSync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinSyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Mutex<HideDataTwinSyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Mutex<HideDataTwinSyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Mutex<HideDataTwinSyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Mutex<HideDataTwinSyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinNormal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinRustAsync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinRustAsync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinRustAsyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinRustAsyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinRustAsyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinRustAsyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinRustAsyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinSync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinSync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinSyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<RwLock<HideDataTwinSyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<RwLock<HideDataTwinSyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<RwLock<HideDataTwinSyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<RwLock<HideDataTwinSyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinNormal>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinNormal>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinRustAsync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinRustAsyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinRustAsyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinRustAsyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinSync>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinSync>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinSyncMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<Box<dyn DartDebugTwinSyncSse>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<Box<dyn DartDebugTwinSyncSse>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<Box<dyn DartDebugTwinSyncSseMoi>>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueMoi<Box<dyn DartDebugTwinSyncSseMoi>> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn Fn(String) -> String + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn Fn(String) -> String + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinMoi>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinNormal>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsync>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncMoi>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncMoi>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSse>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinRustAsyncSse>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinRustAsyncSseMoi>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn HelloTraitTwinRustAsyncSseMoi>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSse>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSseMoi>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSync>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncMoi>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSse>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn HelloTraitTwinSyncSseMoi>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<Box<dyn HelloTraitTwinSyncSseMoi>>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinNormal + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinNormal + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsync + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsync + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSseMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinRustAsyncSse + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSseMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSseMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSse + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSse + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSync + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSync + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSseMoi + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                Box<dyn MyTraitTwinSyncSse + Send + Sync>,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            Box<dyn MyTraitTwinSyncSse + Send + Sync>,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinMoi>>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinNormal>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsync>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSse>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                NonCloneSimpleTwinRustAsyncSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinRustAsyncSseMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSse>>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSseMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSync>>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSse>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<NonCloneSimpleTwinSyncSseMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleA>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructInMiscNoTwinExampleB>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinMoi>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinNormal,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinNormal,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsync,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsync,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSse,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinRustAsyncSseMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithGoodAndOpaqueFieldTwinSse>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSseMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSync,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSync,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSse,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            StructWithGoodAndOpaqueFieldTwinSyncSseMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<StructWithImplBlockInMultiFile>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueOneTwinMoi,
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueTwoTwinMoi,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueOneTwinMoi,
            crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueTwoTwinMoi,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueTwoTwinMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_moi::OpaqueTwoTwinMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueOneTwinRustAsync,
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueTwoTwinRustAsync,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueOneTwinRustAsync,
            crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueTwoTwinRustAsync,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueTwoTwinRustAsync,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async::OpaqueTwoTwinRustAsync,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueOneTwinRustAsyncMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueTwoTwinRustAsyncMoi,)>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueOneTwinRustAsyncMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueTwoTwinRustAsyncMoi,)>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueTwoTwinRustAsyncMoi>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_moi::OpaqueTwoTwinRustAsyncMoi>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueOneTwinRustAsyncSse,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse,)>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueOneTwinRustAsyncSse,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse,)>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
            }
        }
impl CstDecode<RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse::OpaqueTwoTwinRustAsyncSse>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
            }
        }
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueOneTwinRustAsyncSseMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueTwoTwinRustAsyncSseMoi,)>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueOneTwinRustAsyncSseMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueTwoTwinRustAsyncSseMoi,)>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueTwoTwinRustAsyncSseMoi>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_rust_async_sse_moi::OpaqueTwoTwinRustAsyncSseMoi>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueOneTwinSse,
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueTwoTwinSse,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueOneTwinSse,
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueTwoTwinSse,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueTwoTwinSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse::OpaqueTwoTwinSse,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueOneTwinSseMoi,
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueTwoTwinSseMoi,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueOneTwinSseMoi,
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueTwoTwinSseMoi,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueTwoTwinSseMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sse_moi::OpaqueTwoTwinSseMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueOneTwinSync,
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueTwoTwinSync,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueOneTwinSync,
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueTwoTwinSync,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueTwoTwinSync,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync::OpaqueTwoTwinSync,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueOneTwinSyncMoi,
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueTwoTwinSyncMoi,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueOneTwinSyncMoi,
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueTwoTwinSyncMoi,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueTwoTwinSyncMoi,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_moi::OpaqueTwoTwinSyncMoi,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueOneTwinSyncSse,
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueTwoTwinSyncSse,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueOneTwinSyncSse,
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueTwoTwinSyncSse,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueTwoTwinSyncSse,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse::OpaqueTwoTwinSyncSse,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueOneTwinSyncSseMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueTwoTwinSyncSseMoi,)>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<(crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueOneTwinSyncSseMoi,crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueTwoTwinSyncSseMoi,)>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueTwoTwinSyncSseMoi>>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<crate::api::pseudo_manual::rust_auto_opaque_twin_sync_sse_moi::OpaqueTwoTwinSyncSseMoi>> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<(
                crate::api::rust_auto_opaque::OpaqueOneTwinNormal,
                crate::api::rust_auto_opaque::OpaqueTwoTwinNormal,
            )>,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<(
            crate::api::rust_auto_opaque::OpaqueOneTwinNormal,
            crate::api::rust_auto_opaque::OpaqueTwoTwinNormal,
        )>,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            flutter_rust_bridge::for_generated::rust_async::RwLock<
                crate::api::rust_auto_opaque::OpaqueTwoTwinNormal,
            >,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        flutter_rust_bridge::for_generated::rust_async::RwLock<
            crate::api::rust_auto_opaque::OpaqueTwoTwinNormal,
        >,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::FrbOpaqueReturnTwinMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::FrbOpaqueReturnTwinMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::rust_opaque::FrbOpaqueReturnTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<crate::api::rust_opaque::FrbOpaqueReturnTwinNormal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::FrbOpaqueReturnTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::FrbOpaqueReturnTwinRustAsync,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::FrbOpaqueReturnTwinRustAsyncMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::FrbOpaqueReturnTwinRustAsyncMoi> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::FrbOpaqueReturnTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::FrbOpaqueReturnTwinRustAsyncSse> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
            }
        }
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::FrbOpaqueReturnTwinRustAsyncSseMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::FrbOpaqueReturnTwinRustAsyncSseMoi> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl
    CstDecode<
        RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::FrbOpaqueReturnTwinSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::FrbOpaqueReturnTwinSse>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sse_moi::FrbOpaqueReturnTwinSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::FrbOpaqueReturnTwinSseMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::FrbOpaqueReturnTwinSync>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::FrbOpaqueReturnTwinSync>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_moi::FrbOpaqueReturnTwinSyncMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_sync_moi::FrbOpaqueReturnTwinSyncMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse::FrbOpaqueReturnTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse::FrbOpaqueReturnTwinSyncSse,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::FrbOpaqueReturnTwinSyncSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::FrbOpaqueReturnTwinSyncSseMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_sync_twin_moi::FrbOpaqueSyncReturnTwinMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_sync_twin_moi::FrbOpaqueSyncReturnTwinMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::rust_opaque_sync::FrbOpaqueSyncReturnTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::rust_opaque_sync::FrbOpaqueSyncReturnTwinNormal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_sync_twin_sse::FrbOpaqueSyncReturnTwinSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_sync_twin_sse::FrbOpaqueSyncReturnTwinSse,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::FrbOpaqueSyncReturnTwinSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::FrbOpaqueSyncReturnTwinSseMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_sync_twin_moi::HideDataAnotherTwinMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_sync_twin_moi::HideDataAnotherTwinMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::rust_opaque_sync::HideDataAnotherTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<crate::api::rust_opaque_sync::HideDataAnotherTwinNormal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_sync_twin_sse::HideDataAnotherTwinSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_sync_twin_sse::HideDataAnotherTwinSse>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::HideDataAnotherTwinSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_sync_twin_sse_moi::HideDataAnotherTwinSseMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<[RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>; 2] {
        let vec: Vec<
            RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::HideDataTwinMoi>,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<[RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>; 2] {
        let vec: Vec<RustOpaqueNom<crate::api::rust_opaque::HideDataTwinNormal>> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        [RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
        >; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
    >; 2] {
        let vec: Vec<
            RustOpaqueNom<
                crate::api::pseudo_manual::rust_opaque_twin_rust_async::HideDataTwinRustAsync,
            >,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        [RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi,
        >; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi,
    >; 2] {
        let vec: Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::HideDataTwinRustAsyncMoi>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        [RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse,
        >; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse,
    >; 2] {
        let vec: Vec<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::HideDataTwinRustAsyncSse>> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<[RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>; 2]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>; 2] {
                let vec: Vec<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::HideDataTwinRustAsyncSseMoi>> = self.cst_decode(); flutter_rust_bridge::for_generated::from_vec_to_array(vec)
            }
        }
impl CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<[RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>; 2] {
        let vec: Vec<
            RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::HideDataTwinSse>,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>; 2]
    {
        let vec: Vec<
            RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::HideDataTwinSseMoi>,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        [RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>; 2]
    {
        let vec: Vec<
            RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::HideDataTwinSync>,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi>;
            2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi>; 2]
    {
        let vec: Vec<
            RustOpaqueMoi<
                crate::api::pseudo_manual::rust_opaque_twin_sync_moi::HideDataTwinSyncMoi,
            >,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        [RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse>;
            2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse>; 2]
    {
        let vec: Vec<
            RustOpaqueNom<
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse::HideDataTwinSyncSse,
            >,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        [RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
        >; 2],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
    >; 2] {
        let vec: Vec<
            RustOpaqueMoi<
                crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::HideDataTwinSyncSseMoi,
            >,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<RustOpaqueMoi<i16>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> RustOpaqueMoi<i16> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<i32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> RustOpaqueNom<i32> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::NonCloneDataTwinMoi>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_moi::NonCloneDataTwinMoi> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<RustOpaqueNom<crate::api::rust_opaque::NonCloneDataTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> RustOpaqueNom<crate::api::rust_opaque::NonCloneDataTwinNormal> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::NonCloneDataTwinRustAsync,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<
        crate::api::pseudo_manual::rust_opaque_twin_rust_async::NonCloneDataTwinRustAsync,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::NonCloneDataTwinRustAsyncMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::NonCloneDataTwinRustAsyncMoi> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::NonCloneDataTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::NonCloneDataTwinRustAsyncSse> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
            }
        }
impl CstDecode<RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::NonCloneDataTwinRustAsyncSseMoi>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::NonCloneDataTwinRustAsyncSseMoi> {
                #[cfg(target_pointer_width = "64")]
                { compile_error!("64-bit pointers are not supported."); }
                decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
            }
        }
impl CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::NonCloneDataTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sse::NonCloneDataTwinSse> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::NonCloneDataTwinSseMoi>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::NonCloneDataTwinSseMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::NonCloneDataTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync::NonCloneDataTwinSync> {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_moi::NonCloneDataTwinSyncMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::NonCloneDataTwinSyncMoi>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl
    CstDecode<
        RustOpaqueNom<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse::NonCloneDataTwinSyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueNom<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::NonCloneDataTwinSyncSse>
    {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        unsafe { decode_rust_opaque_nom((self.as_f64().unwrap() as usize) as _) }
    }
}
impl
    CstDecode<
        RustOpaqueMoi<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::NonCloneDataTwinSyncSseMoi,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> RustOpaqueMoi<
        crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::NonCloneDataTwinSyncSseMoi,
    > {
        #[cfg(target_pointer_width = "64")]
        {
            compile_error!("64-bit pointers are not supported.");
        }
        decode_rust_opaque_moi((self.as_f64().unwrap() as usize) as _)
    }
}
impl CstDecode<std::collections::HashSet<String>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashSet<String> {
        let vec: Vec<String> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<std::collections::HashSet<i32>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> std::collections::HashSet<i32> {
        let vec: Vec<i32> = self.cst_decode();
        vec.into_iter().collect()
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<uuid::Uuid> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> uuid::Uuid {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into_boxed_slice()
            .cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationMode {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic::BasicPrimitiveEnumTwinNormal {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async::BasicPrimitiveEnumTwinRustAsync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_rust_async_sse::BasicPrimitiveEnumTwinRustAsyncSse
    {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sse::BasicPrimitiveEnumTwinSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::basic_twin_sync::BasicPrimitiveEnumTwinSync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::basic_twin_sync_sse::BasicPrimitiveEnumTwinSyncSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::mirror_twin_sync_sse::ApplicationEnv> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api::BenchmarkBinaryTreeTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async::BenchmarkBinaryTreeTwinRustAsync> {
                Box::new(self.cst_decode())
            }
        }
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Box<crate::api::pseudo_manual::benchmark_api_twin_rust_async_sse::BenchmarkBinaryTreeTwinRustAsyncSse> {
                Box::new(self.cst_decode())
            }
        }
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api_twin_sse::BenchmarkBinaryTreeTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api_twin_sync::BenchmarkBinaryTreeTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::benchmark_api_twin_sync_sse::BenchmarkBinaryTreeTwinSyncSse>
    {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::array::BlobTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::array::BlobTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::BlobTwinRustAsync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async_sse::BlobTwinRustAsyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sse::BlobTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::BlobTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync_sse::BlobTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<bool>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<bool> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::enumeration::DistanceTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::enumeration::DistanceTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::DistanceTwinRustAsync> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::DistanceTwinRustAsyncSse>
    {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::DistanceTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::DistanceTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::DistanceTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::optional::ExoticOptionalsTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::optional::ExoticOptionalsTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_rust_async::ExoticOptionalsTwinRustAsync>
    {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> Box<crate::api::pseudo_manual::optional_twin_rust_async_sse::ExoticOptionalsTwinRustAsyncSse> {
                Box::new(self.cst_decode())
            }
        }
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sse::ExoticOptionalsTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync::ExoticOptionalsTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::optional_twin_sync_sse::ExoticOptionalsTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<f64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<f64> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::array::FeedIdTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::array::FeedIdTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async::FeedIdTwinRustAsync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::array_twin_rust_async_sse::FeedIdTwinRustAsyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sse::FeedIdTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync::FeedIdTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::array_twin_sync_sse::FeedIdTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<i32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<i32> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<i64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<i64> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<i8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<i8> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::enumeration::KitchenSinkTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::enumeration::KitchenSinkTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::KitchenSinkTwinRustAsync> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<
        Box<
            crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse,
        >,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::KitchenSinkTwinRustAsyncSse>
    {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::KitchenSinkTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::KitchenSinkTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::KitchenSinkTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::auxiliary::sample_types::MySize>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::auxiliary::sample_types::MySize> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::enumeration::SpeedTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::enumeration::SpeedTwinNormal> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async::SpeedTwinRustAsync> {
        Box::new(self.cst_decode())
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_rust_async_sse::SpeedTwinRustAsyncSse>
    {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sse::SpeedTwinSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::enumeration_twin_sync::SpeedTwinSync> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::enumeration_twin_sync_sse::SpeedTwinSyncSse> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<u8> {
        Box::new(self.cst_decode())
    }
}
impl CstDecode<Box<[u8; 1600]>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<[u8; 1600]> {
        let vec: Vec<u8> = self.cst_decode();
        Box::new(flutter_rust_bridge::for_generated::from_vec_to_array(vec))
    }
}
impl CstDecode<Box<[u8; 8]>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Box<[u8; 8]> {
        let vec: Vec<u8> = self.cst_decode();
        Box::new(flutter_rust_bridge::for_generated::from_vec_to_array(vec))
    }
}
impl CstDecode<Box<crate::api::misc_example::WeekdaysTwinNormal>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::misc_example::WeekdaysTwinNormal> {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync> {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl
    CstDecode<
        Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Box<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse> {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync> {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl CstDecode<Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> Box<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse> {
        let ptr: Box<i32> = self.cst_decode();
        Box::new(ptr.cst_decode())
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_moi::EnumOpaqueTwinMoi> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::rust_opaque::EnumOpaqueTwinNormal; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::rust_opaque::EnumOpaqueTwinNormal; 5] {
        let vec: Vec<crate::api::rust_opaque::EnumOpaqueTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync; 5] {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async::EnumOpaqueTwinRustAsync,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi; 5]
    {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_moi::EnumOpaqueTwinRustAsyncMoi,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse; 5]
    {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse::EnumOpaqueTwinRustAsyncSse,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi; 5]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
            fn cst_decode(self) -> [crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi; 5] {
                let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_rust_async_sse_moi::EnumOpaqueTwinRustAsyncSseMoi> = self.cst_decode(); flutter_rust_bridge::for_generated::from_vec_to_array(vec)
            }
        }
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sse::EnumOpaqueTwinSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sse_moi::EnumOpaqueTwinSseMoi> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync::EnumOpaqueTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_moi::EnumOpaqueTwinSyncMoi> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse; 5] {
        let vec: Vec<crate::api::pseudo_manual::rust_opaque_twin_sync_sse::EnumOpaqueTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl
    CstDecode<
        [crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi; 5],
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi; 5]
    {
        let vec: Vec<
            crate::api::pseudo_manual::rust_opaque_twin_sync_sse_moi::EnumOpaqueTwinSyncSseMoi,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<crate::api::enumeration::EnumSimpleTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::enumeration::EnumSimpleTwinNormal {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async::EnumSimpleTwinRustAsync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl
    CstDecode<
        crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_rust_async_sse::EnumSimpleTwinRustAsyncSse
    {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sse::EnumSimpleTwinSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::enumeration_twin_sync::EnumSimpleTwinSync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::enumeration_twin_sync_sse::EnumSimpleTwinSyncSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<f32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<f64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> f64 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<[f64; 16]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [f64; 16] {
        let vec: Vec<f64> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<i16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i16 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<[i32; 2]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [i32; 2] {
        let vec: Vec<i32> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<i8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i8 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<isize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> isize {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<Vec<f32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<f32> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Float32Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<f64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<f64> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Float64Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<i16>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<i16> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Int16Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<i32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<i32> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Int32Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<i64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<i64> {
        let buf = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt64Array>()
            .unwrap();
        let buf = flutter_rust_bridge::for_generated::js_sys::Uint8Array::new(&buf.buffer());
        flutter_rust_bridge::for_generated::slice_from_byte_buffer(buf.to_vec()).into()
    }
}
impl CstDecode<Vec<i8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<i8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Int8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<u16>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u16> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint16Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<u32>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u32> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint32Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<Vec<u64>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u64> {
        let buf = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigUint64Array>()
            .unwrap();
        let buf = flutter_rust_bridge::for_generated::js_sys::Uint8Array::new(&buf.buffer());
        flutter_rust_bridge::for_generated::slice_from_byte_buffer(buf.to_vec()).into()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<crate::auxiliary::sample_types::MyEnum>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::auxiliary::sample_types::MyEnum {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<[crate::api::array::PointTwinNormal; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::array::PointTwinNormal; 2] {
        let vec: Vec<crate::api::array::PointTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::PointTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::PointTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::PointTwinSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::PointTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::PointTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::PointTwinSync> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::PointTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::method::SumWithTwinNormal; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::method::SumWithTwinNormal; 3] {
        let vec: Vec<crate::api::method::SumWithTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_rust_async::SumWithTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse; 3] {
        let vec: Vec<
            crate::api::pseudo_manual::method_twin_rust_async_sse::SumWithTwinRustAsyncSse,
        > = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sse::SumWithTwinSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sync::SumWithTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse; 3] {
        let vec: Vec<crate::api::pseudo_manual::method_twin_sync_sse::SumWithTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 2] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::array::TestIdTwinNormal; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::array::TestIdTwinNormal; 4] {
        let vec: Vec<crate::api::array::TestIdTwinNormal> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async::TestIdTwinRustAsync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> [crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_rust_async_sse::TestIdTwinRustAsyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sse::TestIdTwinSse> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync::TestIdTwinSync> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 2] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4]>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> [crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse; 4] {
        let vec: Vec<crate::api::pseudo_manual::array_twin_sync_sse::TestIdTwinSyncSse> =
            self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<u16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u16 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<[u8; 1600]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [u8; 1600] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 32]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [u8; 32] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 5]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [u8; 5] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<[u8; 8]> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> [u8; 8] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl CstDecode<usize> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> usize {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<crate::api::misc_example::WeekdaysTwinNormal>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::misc_example::WeekdaysTwinNormal {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async::WeekdaysTwinRustAsync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl
    CstDecode<crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_rust_async_sse::WeekdaysTwinRustAsyncSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sse::WeekdaysTwinSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::pseudo_manual::misc_example_twin_sync::WeekdaysTwinSync {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(
        self,
    ) -> crate::api::pseudo_manual::misc_example_twin_sync_sse::WeekdaysTwinSyncSse {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
