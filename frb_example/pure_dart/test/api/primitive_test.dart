// NOTE: This (test) file is auto-generated by frb_internal.
// Please do not modify manually, but modify the (quite straightforward) source in frb_internal.

import 'package:frb_example_pure_dart/src/rust/api/primitive.dart';
import 'package:frb_example_pure_dart/src/rust/frb_generated.dart';
import 'package:test/test.dart';

Future<void> main() async {
  await RustLib.init();

  group('primitive type as argument and return type', () {
    test('type=i8 arg=0', () async {
      expect(await examplePrimitiveTypeI8(arg: 0), 0);
    });
    test('type=i8 arg=-128', () async {
      expect(await examplePrimitiveTypeI8(arg: -128), -128);
    });
    test('type=i8 arg=127', () async {
      expect(await examplePrimitiveTypeI8(arg: 127), 127);
    });
    test('type=i16 arg=0', () async {
      expect(await examplePrimitiveTypeI16(arg: 0), 0);
    });
    test('type=i16 arg=-32768', () async {
      expect(await examplePrimitiveTypeI16(arg: -32768), -32768);
    });
    test('type=i16 arg=32767', () async {
      expect(await examplePrimitiveTypeI16(arg: 32767), 32767);
    });
    test('type=i32 arg=0', () async {
      expect(await examplePrimitiveTypeI32(arg: 0), 0);
    });
    test('type=i32 arg=-2147483648', () async {
      expect(await examplePrimitiveTypeI32(arg: -2147483648), -2147483648);
    });
    test('type=i32 arg=2147483647', () async {
      expect(await examplePrimitiveTypeI32(arg: 2147483647), 2147483647);
    });
    test('type=i64 arg=BigInt(0)', () async {
      expect(await examplePrimitiveTypeI64(arg: BigInt(0)), BigInt(0));
    });
    test('type=i64 arg=BigInt(-9223372036854775808)', () async {
      expect(await examplePrimitiveTypeI64(arg: BigInt(-9223372036854775808)),
          BigInt(-9223372036854775808));
    });
    test('type=i64 arg=BigInt(9223372036854775807)', () async {
      expect(await examplePrimitiveTypeI64(arg: BigInt(9223372036854775807)),
          BigInt(9223372036854775807));
    });
    test('type=u8 arg=0', () async {
      expect(await examplePrimitiveTypeU8(arg: 0), 0);
    });
    test('type=u8 arg=255', () async {
      expect(await examplePrimitiveTypeU8(arg: 255), 255);
    });
    test('type=u16 arg=0', () async {
      expect(await examplePrimitiveTypeU16(arg: 0), 0);
    });
    test('type=u16 arg=65535', () async {
      expect(await examplePrimitiveTypeU16(arg: 65535), 65535);
    });
    test('type=u32 arg=0', () async {
      expect(await examplePrimitiveTypeU32(arg: 0), 0);
    });
    test('type=u32 arg=4294967295', () async {
      expect(await examplePrimitiveTypeU32(arg: 4294967295), 4294967295);
    });
    test('type=u64 arg=BigInt(0)', () async {
      expect(await examplePrimitiveTypeU64(arg: BigInt(0)), BigInt(0));
    });
    test('type=u64 arg=BigInt(18446744073709551615)', () async {
      expect(await examplePrimitiveTypeU64(arg: BigInt(18446744073709551615)),
          BigInt(18446744073709551615));
    });
    test('type=f32 arg=0', () async {
      expect(await examplePrimitiveTypeF32(arg: 0), 0);
    });
    test('type=f32 arg=-42.5', () async {
      expect(await examplePrimitiveTypeF32(arg: -42.5), -42.5);
    });
    test('type=f32 arg=123456', () async {
      expect(await examplePrimitiveTypeF32(arg: 123456), 123456);
    });
    test('type=f64 arg=0', () async {
      expect(await examplePrimitiveTypeF64(arg: 0), 0);
    });
    test('type=f64 arg=-42.5', () async {
      expect(await examplePrimitiveTypeF64(arg: -42.5), -42.5);
    });
    test('type=f64 arg=123456', () async {
      expect(await examplePrimitiveTypeF64(arg: 123456), 123456);
    });
    test('type=bool arg=false', () async {
      expect(await examplePrimitiveTypeBool(arg: false), false);
    });
    test('type=bool arg=true', () async {
      expect(await examplePrimitiveTypeBool(arg: true), true);
    });
  });
}
