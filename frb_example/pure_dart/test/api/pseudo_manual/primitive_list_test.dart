// NOTE: This file is mimicking how a human developer writes tests,
// and is auto-generated by frb_internal
// Please do not modify manually, but modify the origin and re-run frb_internal generator

import 'package:frb_example_pure_dart/src/rust/api/pseudo_manual/primitive_list.dart';
import 'package:frb_example_pure_dart/src/rust/frb_generated.dart';
import 'package:test/test.dart';
import 'dart:typed_data';

Future<void> main() async {
  await RustLib.init();

  group('primitive_list', () {
    test('type=i8 arg=Int8List(0)', () async {
      expect(await examplePrimitiveListTypeI8TwinNormal(arg: Int8List(0)),
          Int8List(0));
    });
    test('type=i8 arg=Int8List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeI8TwinNormal(
              arg: Int8List.fromList([0])),
          Int8List.fromList([0]));
    });
    test('type=i8 arg=Int8List.fromList([-128])', () async {
      expect(
          await examplePrimitiveListTypeI8TwinNormal(
              arg: Int8List.fromList([-128])),
          Int8List.fromList([-128]));
    });
    test('type=i8 arg=Int8List.fromList([127])', () async {
      expect(
          await examplePrimitiveListTypeI8TwinNormal(
              arg: Int8List.fromList([127])),
          Int8List.fromList([127]));
    });
    test('type=i16 arg=Int16List(0)', () async {
      expect(await examplePrimitiveListTypeI16TwinNormal(arg: Int16List(0)),
          Int16List(0));
    });
    test('type=i16 arg=Int16List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeI16TwinNormal(
              arg: Int16List.fromList([0])),
          Int16List.fromList([0]));
    });
    test('type=i16 arg=Int16List.fromList([-32768])', () async {
      expect(
          await examplePrimitiveListTypeI16TwinNormal(
              arg: Int16List.fromList([-32768])),
          Int16List.fromList([-32768]));
    });
    test('type=i16 arg=Int16List.fromList([32767])', () async {
      expect(
          await examplePrimitiveListTypeI16TwinNormal(
              arg: Int16List.fromList([32767])),
          Int16List.fromList([32767]));
    });
    test('type=i32 arg=Int32List(0)', () async {
      expect(await examplePrimitiveListTypeI32TwinNormal(arg: Int32List(0)),
          Int32List(0));
    });
    test('type=i32 arg=Int32List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeI32TwinNormal(
              arg: Int32List.fromList([0])),
          Int32List.fromList([0]));
    });
    test('type=i32 arg=Int32List.fromList([-2147483648])', () async {
      expect(
          await examplePrimitiveListTypeI32TwinNormal(
              arg: Int32List.fromList([-2147483648])),
          Int32List.fromList([-2147483648]));
    });
    test('type=i32 arg=Int32List.fromList([2147483647])', () async {
      expect(
          await examplePrimitiveListTypeI32TwinNormal(
              arg: Int32List.fromList([2147483647])),
          Int32List.fromList([2147483647]));
    });
    test('type=i64 arg=Int64List(0)', () async {
      expect(await examplePrimitiveListTypeI64TwinNormal(arg: Int64List(0)),
          Int64List(0));
    });
    test('type=i64 arg=Int64List.fromList([BigInt.parse("0")])', () async {
      expect(
          await examplePrimitiveListTypeI64TwinNormal(
              arg: Int64List.fromList([BigInt.parse("0")])),
          Int64List.fromList([BigInt.parse("0")]));
    });
    test(
        'type=i64 arg=Int64List.fromList([BigInt.parse("-9223372036854775808")])',
        () async {
      expect(
          await examplePrimitiveListTypeI64TwinNormal(
              arg: Int64List.fromList([BigInt.parse("-9223372036854775808")])),
          Int64List.fromList([BigInt.parse("-9223372036854775808")]));
    });
    test(
        'type=i64 arg=Int64List.fromList([BigInt.parse("9223372036854775807")])',
        () async {
      expect(
          await examplePrimitiveListTypeI64TwinNormal(
              arg: Int64List.fromList([BigInt.parse("9223372036854775807")])),
          Int64List.fromList([BigInt.parse("9223372036854775807")]));
    });
    test('type=u8 arg=Uint8List(0)', () async {
      expect(await examplePrimitiveListTypeU8TwinNormal(arg: Uint8List(0)),
          Uint8List(0));
    });
    test('type=u8 arg=Uint8List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeU8TwinNormal(
              arg: Uint8List.fromList([0])),
          Uint8List.fromList([0]));
    });
    test('type=u8 arg=Uint8List.fromList([255])', () async {
      expect(
          await examplePrimitiveListTypeU8TwinNormal(
              arg: Uint8List.fromList([255])),
          Uint8List.fromList([255]));
    });
    test('type=u16 arg=Uint16List(0)', () async {
      expect(await examplePrimitiveListTypeU16TwinNormal(arg: Uint16List(0)),
          Uint16List(0));
    });
    test('type=u16 arg=Uint16List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeU16TwinNormal(
              arg: Uint16List.fromList([0])),
          Uint16List.fromList([0]));
    });
    test('type=u16 arg=Uint16List.fromList([65535])', () async {
      expect(
          await examplePrimitiveListTypeU16TwinNormal(
              arg: Uint16List.fromList([65535])),
          Uint16List.fromList([65535]));
    });
    test('type=u32 arg=Uint32List(0)', () async {
      expect(await examplePrimitiveListTypeU32TwinNormal(arg: Uint32List(0)),
          Uint32List(0));
    });
    test('type=u32 arg=Uint32List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeU32TwinNormal(
              arg: Uint32List.fromList([0])),
          Uint32List.fromList([0]));
    });
    test('type=u32 arg=Uint32List.fromList([4294967295])', () async {
      expect(
          await examplePrimitiveListTypeU32TwinNormal(
              arg: Uint32List.fromList([4294967295])),
          Uint32List.fromList([4294967295]));
    });
    test('type=u64 arg=Uint64List(0)', () async {
      expect(await examplePrimitiveListTypeU64TwinNormal(arg: Uint64List(0)),
          Uint64List(0));
    });
    test('type=u64 arg=Uint64List.fromList([BigInt.parse("0")])', () async {
      expect(
          await examplePrimitiveListTypeU64TwinNormal(
              arg: Uint64List.fromList([BigInt.parse("0")])),
          Uint64List.fromList([BigInt.parse("0")]));
    });
    test(
        'type=u64 arg=Uint64List.fromList([BigInt.parse("9223372036854775807")])',
        () async {
      expect(
          await examplePrimitiveListTypeU64TwinNormal(
              arg: Uint64List.fromList([BigInt.parse("9223372036854775807")])),
          Uint64List.fromList([BigInt.parse("9223372036854775807")]));
    });
    test('type=f32 arg=Float32List(0)', () async {
      expect(await examplePrimitiveListTypeF32TwinNormal(arg: Float32List(0)),
          Float32List(0));
    });
    test('type=f32 arg=Float32List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeF32TwinNormal(
              arg: Float32List.fromList([0])),
          Float32List.fromList([0]));
    });
    test('type=f32 arg=Float32List.fromList([-42.5])', () async {
      expect(
          await examplePrimitiveListTypeF32TwinNormal(
              arg: Float32List.fromList([-42.5])),
          Float32List.fromList([-42.5]));
    });
    test('type=f32 arg=Float32List.fromList([123456])', () async {
      expect(
          await examplePrimitiveListTypeF32TwinNormal(
              arg: Float32List.fromList([123456])),
          Float32List.fromList([123456]));
    });
    test('type=f64 arg=Float64List(0)', () async {
      expect(await examplePrimitiveListTypeF64TwinNormal(arg: Float64List(0)),
          Float64List(0));
    });
    test('type=f64 arg=Float64List.fromList([0])', () async {
      expect(
          await examplePrimitiveListTypeF64TwinNormal(
              arg: Float64List.fromList([0])),
          Float64List.fromList([0]));
    });
    test('type=f64 arg=Float64List.fromList([-42.5])', () async {
      expect(
          await examplePrimitiveListTypeF64TwinNormal(
              arg: Float64List.fromList([-42.5])),
          Float64List.fromList([-42.5]));
    });
    test('type=f64 arg=Float64List.fromList([123456])', () async {
      expect(
          await examplePrimitiveListTypeF64TwinNormal(
              arg: Float64List.fromList([123456])),
          Float64List.fromList([123456]));
    });
    test('type=bool arg=List<bool>(0)', () async {
      expect(await examplePrimitiveListTypeBoolTwinNormal(arg: List<bool>(0)),
          List<bool>(0));
    });
    test('type=bool arg=List<bool>.fromList([false])', () async {
      expect(
          await examplePrimitiveListTypeBoolTwinNormal(
              arg: List<bool>.fromList([false])),
          List<bool>.fromList([false]));
    });
    test('type=bool arg=List<bool>.fromList([true])', () async {
      expect(
          await examplePrimitiveListTypeBoolTwinNormal(
              arg: List<bool>.fromList([true])),
          List<bool>.fromList([true]));
    });
  });
}
