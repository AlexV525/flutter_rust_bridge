// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated_api_1.io.dart' if (dart.library.html) 'bridge_generated_api_1.web.dart';
import 'bridge_generated_shares.dart';
export 'bridge_generated_shares.dart';
import 'bridge_generated_shares.io.dart' if (dart.library.html) 'bridge_generated_shares.web.dart';

abstract class ApiClass1 {
  Future<double> testInbuiltType1({required int a, required double b, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestInbuiltType1ConstMeta;

  Future<String> testString1({required String s, required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestString1ConstMeta;

  Future<SharedStruct> testSharedStruct1(
      {required SharedStruct custom, required String s, required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestSharedStruct1ConstMeta;

  Future<OnlyForApi1Struct> testUniqueStruct1(
      {required OnlyForApi1Struct custom, required String s, required int i, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestUniqueStruct1ConstMeta;

  Future<String> testCrossSharedStruct1({required CrossSharedStruct custom, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestCrossSharedStruct1ConstMeta;

  Future<String> testStructDefinedInApi1({required StructDefinedInApi1 custom, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestStructDefinedInApi1ConstMeta;

  Future<String> testMethodMethodStructDefinedInApi1(
      {required StructDefinedInApi1 that, required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestMethodMethodStructDefinedInApi1ConstMeta;

  Future<String> testStaticMethodStaticMethodStructDefinedInApi1({required String message, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestStaticMethodStaticMethodStructDefinedInApi1ConstMeta;
}

class OnlyForApi1Struct {
  final int id;
  final double num;
  final String name;

  const OnlyForApi1Struct({
    required this.id,
    required this.num,
    required this.name,
  });
}

class StructDefinedInApi1 {
  final ApiClass1 bridge;
  final String name;

  const StructDefinedInApi1({
    required this.bridge,
    required this.name,
  });

  Future<String> testMethod({required String message, dynamic hint}) => bridge.testMethodMethodStructDefinedInApi1(
        that: this,
        message: message,
      );

  static Future<String> testStaticMethod({required ApiClass1 bridge, required String message, dynamic hint}) =>
      bridge.testStaticMethodStaticMethodStructDefinedInApi1(message: message, hint: hint);
}

class ApiClass1Impl implements ApiClass1 {
  final ApiClass1Platform _platform;
  final BridgeGeneratedSharesPlatform _sharedPlatform;
  final BridgeGeneratedSharesImpl _sharedImpl;

  factory ApiClass1Impl(ExternalLibrary dylib) {
    final platform = ApiClass1Platform(dylib);
    final sharedPlatform = BridgeGeneratedSharesPlatform(dylib);
    final sharedImpl = BridgeGeneratedSharesImpl(dylib);
    return ApiClass1Impl.raw(platform, sharedPlatform, sharedImpl);
  }

  ApiClass1Impl.raw(this._platform, this._sharedPlatform, this._sharedImpl);

  /// Only valid on web/WASM platforms.
  factory ApiClass1Impl.wasm(FutureOr<WasmModule> module) => ApiClass1Impl(module as ExternalLibrary);

  Future<double> testInbuiltType1({required int a, required double b, dynamic hint}) {
    var arg0 = api2wire_i32(a);
    var arg1 = api2wire_f32(b);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_inbuilt_type_1(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_f32,
      constMeta: kTestInbuiltType1ConstMeta,
      argValues: [a, b],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestInbuiltType1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_inbuilt_type_1",
        argNames: ["a", "b"],
      );

  Future<String> testString1({required String s, required int i, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(s);
    var arg1 = _sharedPlatform.api2wire_u64(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_string_1(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kTestString1ConstMeta,
      argValues: [s, i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestString1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_string_1",
        argNames: ["s", "i"],
      );

  Future<SharedStruct> testSharedStruct1(
      {required SharedStruct custom, required String s, required int i, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_box_autoadd_shared_struct(custom);
    var arg1 = _sharedPlatform.api2wire_String(s);
    var arg2 = api2wire_i32(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_shared_struct_1(port_, arg0, arg1, arg2),
      parseSuccessData: _sharedImpl.wire2api_shared_struct,
      constMeta: kTestSharedStruct1ConstMeta,
      argValues: [custom, s, i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestSharedStruct1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_shared_struct_1",
        argNames: ["custom", "s", "i"],
      );

  Future<OnlyForApi1Struct> testUniqueStruct1(
      {required OnlyForApi1Struct custom, required String s, required int i, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_only_for_api_1_struct(custom);
    var arg1 = _sharedPlatform.api2wire_String(s);
    var arg2 = api2wire_i16(i);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_unique_struct_1(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_only_for_api_1_struct,
      constMeta: kTestUniqueStruct1ConstMeta,
      argValues: [custom, s, i],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestUniqueStruct1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_unique_struct_1",
        argNames: ["custom", "s", "i"],
      );

  Future<String> testCrossSharedStruct1({required CrossSharedStruct custom, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_box_autoadd_cross_shared_struct(custom);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_cross_shared_struct_1(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kTestCrossSharedStruct1ConstMeta,
      argValues: [custom],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestCrossSharedStruct1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_cross_shared_struct_1",
        argNames: ["custom"],
      );

  Future<String> testStructDefinedInApi1({required StructDefinedInApi1 custom, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_struct_defined_in_api_1(custom);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_StructDefinedInApi1(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kTestStructDefinedInApi1ConstMeta,
      argValues: [custom],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestStructDefinedInApi1ConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_StructDefinedInApi1",
        argNames: ["custom"],
      );

  Future<String> testMethodMethodStructDefinedInApi1(
      {required StructDefinedInApi1 that, required String message, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_struct_defined_in_api_1(that);
    var arg1 = _sharedPlatform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_method__method__StructDefinedInApi1(port_, arg0, arg1),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kTestMethodMethodStructDefinedInApi1ConstMeta,
      argValues: [that, message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestMethodMethodStructDefinedInApi1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_method__method__StructDefinedInApi1",
        argNames: ["that", "message"],
      );

  Future<String> testStaticMethodStaticMethodStructDefinedInApi1({required String message, dynamic hint}) {
    var arg0 = _sharedPlatform.api2wire_String(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_static_method__static_method__StructDefinedInApi1(port_, arg0),
      parseSuccessData: _sharedImpl.wire2api_String,
      constMeta: kTestStaticMethodStaticMethodStructDefinedInApi1ConstMeta,
      argValues: [message],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestStaticMethodStaticMethodStructDefinedInApi1ConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "test_static_method__static_method__StructDefinedInApi1",
        argNames: ["message"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  int _wire2api_i16(dynamic raw) {
    return raw as int;
  }

  OnlyForApi1Struct _wire2api_only_for_api_1_struct(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return OnlyForApi1Struct(
      id: _wire2api_i16(arr[0]),
      num: _sharedImpl.wire2api_f64(arr[1]),
      name: _sharedImpl.wire2api_String(arr[2]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i16(int raw) {
  return raw;
}

// Section: finalizer
