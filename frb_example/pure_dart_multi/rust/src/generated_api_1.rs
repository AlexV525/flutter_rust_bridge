#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.0.

use crate::api_1::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::bridge_generated_shares;
use crate::bridge_generated_shares::*;
use crate::custom::OnlyForApi1Struct;

// Section: wire functions

fn wire_test_inbuilt_type_1_impl(
    port_: MessagePort,
    a: impl bridge_generated_shares::Wire2Api<i32> + UnwindSafe,
    b: impl bridge_generated_shares::Wire2Api<f32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_inbuilt_type_1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(test_inbuilt_type_1(api_a, api_b))
        },
    )
}
fn wire_test_string_1_impl(
    port_: MessagePort,
    s: impl bridge_generated_shares::Wire2Api<String> + UnwindSafe,
    i: impl bridge_generated_shares::Wire2Api<u64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_string_1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            let api_i = i.wire2api();
            move |task_callback| Ok(test_string_1(api_s, api_i))
        },
    )
}
fn wire_test_shared_struct_1_impl(
    port_: MessagePort,
    custom: impl bridge_generated_shares::Wire2Api<SharedStruct> + UnwindSafe,
    s: impl bridge_generated_shares::Wire2Api<String> + UnwindSafe,
    i: impl bridge_generated_shares::Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_shared_struct_1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_custom = custom.wire2api();
            let api_s = s.wire2api();
            let api_i = i.wire2api();
            move |task_callback| Ok(test_shared_struct_1(api_custom, api_s, api_i))
        },
    )
}
fn wire_test_unique_struct_1_impl(
    port_: MessagePort,
    custom: impl Wire2Api<OnlyForApi1Struct> + UnwindSafe,
    s: impl bridge_generated_shares::Wire2Api<String> + UnwindSafe,
    i: impl Wire2Api<i16> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_unique_struct_1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_custom = custom.wire2api();
            let api_s = s.wire2api();
            let api_i = i.wire2api();
            move |task_callback| Ok(test_unique_struct_1(api_custom, api_s, api_i))
        },
    )
}
fn wire_test_cross_shared_struct_1_impl(
    port_: MessagePort,
    custom: impl bridge_generated_shares::Wire2Api<CrossSharedStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_cross_shared_struct_1",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_custom = custom.wire2api();
            move |task_callback| Ok(test_cross_shared_struct_1(api_custom))
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i16> for i16 {
    fn wire2api(self) -> i16 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for OnlyForApi1Struct {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.num.into_dart(),
            self.name.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OnlyForApi1Struct {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "generated_api_1.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "generated_api_1.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
