// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.37.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'misc_no_twin_example_b.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The functions `clone` are not `pub`, thus are ignored.

Future<void> sameFunctionNameInDifferentFiles() => RustLib.instance.api
    .crateApiMiscNoTwinExampleASameFunctionNameInDifferentFiles();

Future<void> renamedFunction() => RustLib.instance.api
    .crateApiMiscNoTwinExampleAFunctionWithCustomNameTwinNormal();

Future<void> functionWithArgTypeNameOverride(
        {required BoxAnyMyDartTypeRename a}) =>
    RustLib.instance.api
        .crateApiMiscNoTwinExampleAFunctionWithArgTypeNameOverride(a: a);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn Any + Send + Sync + 'static >>>
@sealed
class BoxAnyMyDartTypeRename extends RustOpaque {
  // Not to be used by end users
  BoxAnyMyDartTypeRename.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxAnyMyDartTypeRename.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_BoxAnyMyDartTypeRename,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAnyMyDartTypeRename,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_BoxAnyMyDartTypeRenamePtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<DeliberateFailSanityCheckTwinNormal>>
@sealed
class DeliberateFailSanityCheckTwinNormal extends RustOpaque {
  // Not to be used by end users
  DeliberateFailSanityCheckTwinNormal.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DeliberateFailSanityCheckTwinNormal.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_DeliberateFailSanityCheckTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_DeliberateFailSanityCheckTwinNormalPtr,
  );

  static Future<void> dummyFunctionTwinNormal() => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalDummyFunctionTwinNormal();

  Uint8List get deliberateBadFieldA => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetDeliberateBadFieldA(
        that: this,
      );

  OpaqueItemTwinNormal get deliberateBadFieldB => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetDeliberateBadFieldB(
        that: this,
      );

  List<OpaqueItemTwinNormal> get deliberateBadFieldC => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetDeliberateBadFieldC(
        that: this,
      );

  String get goodFieldA => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetGoodFieldA(
        that: this,
      );

  int get goodFieldB => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetGoodFieldB(
        that: this,
      );

  OpaqueItemTwinNormal get goodFieldC => RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalGetGoodFieldC(
        that: this,
      );

  void set deliberateBadFieldA(Uint8List deliberateBadFieldA) => RustLib
      .instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetDeliberateBadFieldA(
          that: this, deliberateBadFieldA: deliberateBadFieldA);

  void set deliberateBadFieldB(OpaqueItemTwinNormal deliberateBadFieldB) => RustLib
      .instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetDeliberateBadFieldB(
          that: this, deliberateBadFieldB: deliberateBadFieldB);

  void set deliberateBadFieldC(
          List<OpaqueItemTwinNormal> deliberateBadFieldC) =>
      RustLib.instance.api
          .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetDeliberateBadFieldC(
              that: this, deliberateBadFieldC: deliberateBadFieldC);

  void set goodFieldA(String goodFieldA) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetGoodFieldA(
          that: this, goodFieldA: goodFieldA);

  void set goodFieldB(int goodFieldB) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetGoodFieldB(
          that: this, goodFieldB: goodFieldB);

  void set goodFieldC(OpaqueItemTwinNormal goodFieldC) => RustLib.instance.api
      .crateApiMiscNoTwinExampleADeliberateFailSanityCheckTwinNormalSetGoodFieldC(
          that: this, goodFieldC: goodFieldC);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ItemContainerSolutionOneTwinNormal>>
@sealed
class ItemContainerSolutionOneTwinNormal extends RustOpaque {
  // Not to be used by end users
  ItemContainerSolutionOneTwinNormal.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ItemContainerSolutionOneTwinNormal.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ItemContainerSolutionOneTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ItemContainerSolutionOneTwinNormalPtr,
  );

  static Future<ItemContainerSolutionOneTwinNormal> createTwinNormal() => RustLib
      .instance.api
      .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalCreateTwinNormal();

  Future<Int32List> getItemContentsTwinNormal() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetItemContentsTwinNormal(
        that: this,
      );

  String get name => RustLib.instance.api
          .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalGetName(
        that: this,
      );

  void set name(String name) => RustLib.instance.api
      .crateApiMiscNoTwinExampleAItemContainerSolutionOneTwinNormalSetName(
          that: this, name: name);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<OpaqueItemTwinNormal>>
@sealed
class OpaqueItemTwinNormal extends RustOpaque {
  // Not to be used by end users
  OpaqueItemTwinNormal.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OpaqueItemTwinNormal.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_OpaqueItemTwinNormal,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueItemTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_OpaqueItemTwinNormalPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructInMiscNoTwinExampleA>>
@sealed
class StructInMiscNoTwinExampleA extends RustOpaque {
  // Not to be used by end users
  StructInMiscNoTwinExampleA.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructInMiscNoTwinExampleA.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructInMiscNoTwinExampleA,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructInMiscNoTwinExampleAPtr,
  );

  Future<void> sampleFunctionA() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructInMiscNoTwinExampleASampleFunctionA(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithImplBlockInMultiFile>>
@sealed
class StructWithImplBlockInMultiFile extends RustOpaque {
  // Not to be used by end users
  StructWithImplBlockInMultiFile.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithImplBlockInMultiFile.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithImplBlockInMultiFile,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithImplBlockInMultiFilePtr,
  );

  Future<void> methodInA() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithImplBlockInMultiFileMethodInA(
        that: this,
      );

  Future<void> methodInB() => RustLib.instance.api
          .crateApiMiscNoTwinExampleBStructWithImplBlockInMultiFileMethodInB(
        that: this,
      );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<StructWithSimpleSetterTwinNormal>>
@sealed
class StructWithSimpleSetterTwinNormal extends RustOpaque {
  // Not to be used by end users
  StructWithSimpleSetterTwinNormal.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  StructWithSimpleSetterTwinNormal.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StructWithSimpleSetterTwinNormal,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormal,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StructWithSimpleSetterTwinNormalPtr,
  );

  factory StructWithSimpleSetterTwinNormal() => RustLib.instance.api
      .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalNew();

  int get simpleGetter => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleGetter(
        that: this,
      );

  void set simpleSetter(int value) => RustLib.instance.api
      .crateApiMiscNoTwinExampleAStructWithSimpleSetterTwinNormalSimpleSetter(
          that: this, value: value);
}

class ItemContainerSolutionTwoTwinNormal {
  String name;
  final List<OpaqueItemTwinNormal> items;

  ItemContainerSolutionTwoTwinNormal({
    required this.name,
    required this.items,
  });

  static Future<ItemContainerSolutionTwoTwinNormal> createTwinNormal() => RustLib
      .instance.api
      .crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalCreateTwinNormal();

  Future<Int32List> getItemContentsTwinNormal() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAItemContainerSolutionTwoTwinNormalGetItemContentsTwinNormal(
        that: this,
      );

  @override
  int get hashCode => name.hashCode ^ items.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ItemContainerSolutionTwoTwinNormal &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          items == other.items;
}

class StructWithCustomNameMethodTwinNormal {
  final int field0;

  const StructWithCustomNameMethodTwinNormal({
    required this.field0,
  });

  void renamedMethod() => RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithCustomNameMethodTwinNormalMethodWithCustomNameTwinNormal(
        that: this,
      );

  @override
  int get hashCode => field0.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithCustomNameMethodTwinNormal &&
          runtimeType == other.runtimeType &&
          field0 == other.field0;
}

class StructWithImplBlockInAnotherFile {
  const StructWithImplBlockInAnotherFile();

  static Future<void> f(
          {required StructWithImplBlockInAnotherFileDependency arg}) =>
      RustLib.instance.api
          .crateApiMiscNoTwinExampleAStructWithImplBlockInAnotherFileF(
              arg: arg);

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StructWithImplBlockInAnotherFile &&
          runtimeType == other.runtimeType;
}
