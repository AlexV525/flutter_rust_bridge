// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.19.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/array.dart';
import 'api/async_misc.dart';
import 'api/async_spawn.dart';
import 'api/attribute.dart';
import 'api/benchmark_misc.dart';
import 'api/comment.dart';
import 'api/customization.dart';
import 'api/dart_fn.dart';
import 'api/dart_opaque.dart';
import 'api/dart_opaque_sync.dart';
import 'api/enumeration.dart';
import 'api/event_listener.dart';
import 'api/exception.dart';
import 'api/external_type_in_crate.dart';
import 'api/inside_macro.dart';
import 'api/map_and_set.dart';
import 'api/method.dart';
import 'api/mirror.dart';
import 'api/misc_example.dart';
import 'api/misc_no_twin_example_a.dart';
import 'api/misc_no_twin_example_b.dart';
import 'api/misc_type.dart';
import 'api/newtype_pattern.dart';
import 'api/optional.dart';
import 'api/optional_primitive_misc.dart';
import 'api/primitive_list_misc.dart';
import 'api/primitive_misc.dart';
import 'api/pseudo_manual/array_twin_rust_async.dart';
import 'api/pseudo_manual/array_twin_sync.dart';
import 'api/pseudo_manual/attribute_twin_rust_async.dart';
import 'api/pseudo_manual/attribute_twin_sync.dart';
import 'api/pseudo_manual/basic.dart';
import 'api/pseudo_manual/basic_list.dart';
import 'api/pseudo_manual/basic_list_twin_rust_async.dart';
import 'api/pseudo_manual/basic_list_twin_sync.dart';
import 'api/pseudo_manual/basic_map.dart';
import 'api/pseudo_manual/basic_map_twin_rust_async.dart';
import 'api/pseudo_manual/basic_map_twin_sync.dart';
import 'api/pseudo_manual/basic_optional.dart';
import 'api/pseudo_manual/basic_optional_twin_rust_async.dart';
import 'api/pseudo_manual/basic_optional_twin_sync.dart';
import 'api/pseudo_manual/basic_twin_rust_async.dart';
import 'api/pseudo_manual/basic_twin_sync.dart';
import 'api/pseudo_manual/benchmark_api.dart';
import 'api/pseudo_manual/benchmark_api_twin_rust_async.dart';
import 'api/pseudo_manual/benchmark_api_twin_sync.dart';
import 'api/pseudo_manual/comment_twin_rust_async.dart';
import 'api/pseudo_manual/comment_twin_sync.dart';
import 'api/pseudo_manual/dart_fn_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/dart_opaque_twin_sync.dart';
import 'api/pseudo_manual/enumeration_twin_rust_async.dart';
import 'api/pseudo_manual/enumeration_twin_sync.dart';
import 'api/pseudo_manual/event_listener_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_rust_async.dart';
import 'api/pseudo_manual/exception_twin_sync.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_rust_async.dart';
import 'api/pseudo_manual/external_type_in_crate_twin_sync.dart';
import 'api/pseudo_manual/map_and_set_twin_rust_async.dart';
import 'api/pseudo_manual/map_and_set_twin_sync.dart';
import 'api/pseudo_manual/method_twin_rust_async.dart';
import 'api/pseudo_manual/method_twin_sync.dart';
import 'api/pseudo_manual/mirror_twin_rust_async.dart';
import 'api/pseudo_manual/mirror_twin_sync.dart';
import 'api/pseudo_manual/misc_example_twin_rust_async.dart';
import 'api/pseudo_manual/misc_example_twin_sync.dart';
import 'api/pseudo_manual/misc_type_twin_rust_async.dart';
import 'api/pseudo_manual/misc_type_twin_sync.dart';
import 'api/pseudo_manual/newtype_pattern_twin_rust_async.dart';
import 'api/pseudo_manual/newtype_pattern_twin_sync.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/optional_primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/optional_twin_rust_async.dart';
import 'api/pseudo_manual/optional_twin_sync.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_list_misc_twin_sync.dart';
import 'api/pseudo_manual/primitive_misc_twin_rust_async.dart';
import 'api/pseudo_manual/primitive_misc_twin_sync.dart';
import 'api/pseudo_manual/raw_string_twin_rust_async.dart';
import 'api/pseudo_manual/raw_string_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_moi.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_rust_async_moi.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_auto_opaque_twin_sync_moi.dart';
import 'api/pseudo_manual/rust_opaque_sync_twin_moi.dart';
import 'api/pseudo_manual/rust_opaque_twin_moi.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async.dart';
import 'api/pseudo_manual/rust_opaque_twin_rust_async_moi.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync.dart';
import 'api/pseudo_manual/rust_opaque_twin_sync_moi.dart';
import 'api/pseudo_manual/simple_twin_rust_async.dart';
import 'api/pseudo_manual/simple_twin_sync.dart';
import 'api/pseudo_manual/stream_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_rust_async.dart';
import 'api/pseudo_manual/structure_twin_sync.dart';
import 'api/pseudo_manual/tuple_twin_rust_async.dart';
import 'api/pseudo_manual/tuple_twin_sync.dart';
import 'api/pseudo_manual/type_alias_twin_rust_async.dart';
import 'api/pseudo_manual/type_alias_twin_sync.dart';
import 'api/raw_string.dart';
import 'api/rust_auto_opaque.dart';
import 'api/rust_opaque.dart';
import 'api/rust_opaque_sync.dart';
import 'api/simple.dart';
import 'api/stream.dart';
import 'api/stream_misc.dart';
import 'api/structure.dart';
import 'api/tuple.dart';
import 'api/type_alias.dart';
import 'auxiliary/new_module_system/sub_module.dart';
import 'auxiliary/old_module_system/sub_module.dart';
import 'auxiliary/sample_types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.initApp();
    await api.myInitOne();
    await api.myInitTwo();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'frb_example_pure_dart_pde',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<BlobTwinNormal> boxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinNormal> funcTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint});

  Future<U8Array5> getArrayTwinNormal({dynamic hint});

  Future<PointTwinNormalArray2> getComplexArrayTwinNormal({dynamic hint});

  Future<double> lastNumberTwinNormal(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinNormalArray2> nestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint});

  Future<MessageIdTwinNormal> newMsgidTwinNormal(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinNormal> returnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint});

  Future<U8Array32> useMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint});

  Future<int> funcAsyncSimpleAddTwinNormal(
      {required int a, required int b, dynamic hint});

  Future<void> funcAsyncVoidTwinNormal({dynamic hint});

  Future<String> simpleUseAsyncSpawn({required String arg, dynamic hint});

  Future<String> simpleUseAsyncSpawnBlocking(
      {required String arg, dynamic hint});

  Future<void> handleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint});

  Future<UserIdTwinNormal> nextUserIdTwinNormal(
      {required UserIdTwinNormal userId, dynamic hint});

  void benchmarkVoidSemiSerialize({dynamic hint});

  Future<void> structWithCommentsTwinNormalInstanceMethodTwinNormal(
      {required StructWithCommentsTwinNormal that, dynamic hint});

  Future<void> structWithCommentsTwinNormalStaticMethodTwinNormal(
      {dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinNormal({dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinNormal(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinNormal(
      {dynamic hint});

  Future<bool> checkInitDone({dynamic hint});

  Future<void> initApp({dynamic hint});

  Future<void> myInitOne({dynamic hint});

  Future<void> myInitTwo({dynamic hint});

  Future<void> rustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint});

  Future<void> rustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint});

  Future<void> rustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback, dynamic hint});

  Future<void> rustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback, dynamic hint});

  Future<void> rustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback, dynamic hint});

  Future<void> rustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint});

  Future<void> rustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint});

  Future<Object> rustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinNormal> createEnumDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinNormal> createNestedDartOpaqueTwinNormal(
      {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinNormal({required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinNormal({Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinNormal(
      {required Object opaque, dynamic hint});

  Future<Object> loopBackTwinNormal({required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint});

  String syncAcceptDartOpaqueTwinNormal({required Object opaque, dynamic hint});

  Object syncLoopbackTwinNormal({required Object opaque, dynamic hint});

  Object? syncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint});

  Object? syncOptionLoopbackTwinNormal({Object? opaque, dynamic hint});

  String unwrapDartOpaqueTwinNormal({required Object opaque, dynamic hint});

  Future<EnumSimpleTwinNormal> funcEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint});

  Future<EnumWithItemMixedTwinNormal> funcEnumWithItemMixedTwinNormal(
      {required EnumWithItemMixedTwinNormal arg, dynamic hint});

  Future<EnumWithItemStructTwinNormal> funcEnumWithItemStructTwinNormal(
      {required EnumWithItemStructTwinNormal arg, dynamic hint});

  Future<EnumWithItemTupleTwinNormal> funcEnumWithItemTupleTwinNormal(
      {required EnumWithItemTupleTwinNormal arg, dynamic hint});

  Future<WeekdaysTwinNormal> handleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint});

  Future<KitchenSinkTwinNormal> handleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint});

  Future<WeekdaysTwinNormal?> handleReturnEnumTwinNormal(
      {required String input, dynamic hint});

  Future<MeasureTwinNormal?> multiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint});

  Future<Uint8List> printNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint});

  Future<String> eventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint});

  Future<void> closeEventListenerTwinNormal({dynamic hint});

  Future<void> createEventTwinNormal(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinNormal> registerEventListenerTwinNormal({dynamic hint});

  Future<CustomStructTwinNormal> customStructTwinNormalNewTwinNormal(
      {required String message, dynamic hint});

  Future<void> customStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint});

  Future<int> customStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint});

  Future<void> customStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
      {dynamic hint});

  Future<int> customStructTwinNormalStaticReturnCustomStructOkTwinNormal(
      {dynamic hint});

  Future<SomeStructTwinNormal> someStructTwinNormalNewTwinNormal(
      {required int value, dynamic hint});

  Future<int> someStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint});

  Future<int> someStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint});

  Future<int> someStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
      {dynamic hint});

  Future<int> someStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
      {dynamic hint});

  Future<void> customEnumErrorPanicTwinNormal({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinNormal({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint});

  Future<int> funcReturnErrorTwinNormal({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinNormal({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinNormal({dynamic hint});

  Future<void> panicWithCustomResultTwinNormal({dynamic hint});

  Future<void> returnCustomNestedError1TwinNormal({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinNormal({dynamic hint});

  Future<void> returnCustomNestedError2TwinNormal({dynamic hint});

  Future<void> returnCustomStructErrorTwinNormal({dynamic hint});

  Future<int> returnCustomStructOkTwinNormal({dynamic hint});

  Future<int> returnErrCustomErrorTwinNormal({dynamic hint});

  Future<int> returnErrorVariantTwinNormal(
      {required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinNormal({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinNormal({dynamic hint});

  Future<void> throwAnyhowTwinNormal({dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinNormal({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinNormal({dynamic hint});

  Future<bool> useImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint});

  Future<AnotherMacroStructTwinNormal> anotherMacroStructTwinNormal(
      {dynamic hint});

  Future<MacroStruct> funcMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint});

  Future<Map<int, int>> funcHashMapI32I32TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<String, Uint8List>> funcHashMapStringBytesTwinNormal(
      {required Map<String, Uint8List> arg, dynamic hint});

  Future<Map<String, KitchenSinkTwinNormal>>
      funcHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg, dynamic hint});

  Future<Map<String, EnumSimpleTwinNormal>>
      funcHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg, dynamic hint});

  Future<Map<String, String>> funcHashMapStringStringTwinNormal(
      {required Map<String, String> arg, dynamic hint});

  Future<Map<String, MySize>> funcHashMapStringStructTwinNormal(
      {required Map<String, MySize> arg, dynamic hint});

  Future<Set<int>> funcHashSetI32TwinNormal(
      {required Set<int> arg, dynamic hint});

  Future<Set<String>> funcHashSetStringTwinNormal(
      {required Set<String> arg, dynamic hint});

  Future<String> concatenateWithTwinNormalConcatenateStaticTwinNormal(
      {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint});

  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint});

  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinNormal> concatenateWithTwinNormalNewTwinNormal(
      {required String a, dynamic hint});

  Future<String> concatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint});

  Future<int> sumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinNormalArray3> getSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinNormal> getSumStructTwinNormal({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinNormal({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinNormal(
      {dynamic hint});

  Future<int?> firstNumberTwinNormal({required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinNormal({required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinNormal({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinNormal({dynamic hint});

  Future<ApplicationMessage> getMessageTwinNormal({dynamic hint});

  Future<bool> isAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinNormal> mirrorStructStreamTwinNormal({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinNormal({dynamic hint});

  Future<Numbers> repeatNumberTwinNormal(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinNormal>
      testContainsMirroredSubStructTwinNormal({dynamic hint});

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinNormal(
      {dynamic hint});

  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinNormal(
      {dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinNormal({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinNormal(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinNormal(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinNormal({dynamic hint});

  Future<BigBuffersTwinNormal> handleBigBuffersTwinNormal({dynamic hint});

  Future<MyTreeNodeTwinNormal> handleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint});

  Future<MyNestedStructTwinNormal> handleNestedStructTwinNormal(
      {required MyNestedStructTwinNormal s, dynamic hint});

  Future<String> handleStringTwinNormal({required String s, dynamic hint});

  Future<MySize> handleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinNormal({required List<int> v, dynamic hint});

  Future<List<WeekdaysTwinNormal>> listOfPrimitiveEnumsTwinNormal(
      {required List<WeekdaysTwinNormal> weekdays, dynamic hint});

  Future<AbcTwinNormal> testAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint});

  Future<StructWithEnumTwinNormal> testStructWithEnumTwinNormal(
      {required StructWithEnumTwinNormal se, dynamic hint});

  Future<void> structInMiscNoTwinExampleASampleFunctionA(
      {required StructInMiscNoTwinExampleA that, dynamic hint});

  Future<void> structWithImplBlockInMultiFileMethodInA(
      {required StructWithImplBlockInMultiFile that, dynamic hint});

  Future<StructInMiscNoTwinExampleA>
      structInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that, dynamic hint});

  Future<void> structInMiscNoTwinExampleBSampleFunctionB(
      {required StructInMiscNoTwinExampleB that, dynamic hint});

  Future<void> structWithImplBlockInMultiFileMethodInB(
      {required StructWithImplBlockInMultiFile that, dynamic hint});

  Future<EmptyTwinNormal> emptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint});

  Future<void> funcReturnUnitTwinNormal({dynamic hint});

  Future<List<MySize>> handleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinNormal(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinNormal> handleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinNormal?> handleOptionalIncrementTwinNormal(
      {ExoticOptionalsTwinNormal? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinNormal?> handleOptionalStructTwinNormal(
      {String? document, dynamic hint});

  Future<OptVecsTwinNormal> handleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<VecOfPrimitivePackTwinNormal> handleVecOfPrimitiveTwinNormal(
      {required int n, dynamic hint});

  Future<int> primitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinNormal({required int myU32, dynamic hint});

  Future<BlobTwinRustAsync> boxedBlobTwinRustAsync(
      {required U8Array1600 blob, dynamic hint});

  Future<TestIdTwinRustAsync> funcTestIdTwinRustAsync(
      {required TestIdTwinRustAsync id, dynamic hint});

  Future<U8Array5> getArrayTwinRustAsync({dynamic hint});

  Future<PointTwinRustAsyncArray2> getComplexArrayTwinRustAsync({dynamic hint});

  Future<double> lastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint});

  Future<TestIdTwinRustAsyncArray2> nestedIdTwinRustAsync(
      {required TestIdTwinRustAsyncArray4 id, dynamic hint});

  Future<MessageIdTwinRustAsync> newMsgidTwinRustAsync(
      {required U8Array32 id, dynamic hint});

  Future<FeedIdTwinRustAsync> returnBoxedFeedIdTwinRustAsync(
      {required U8Array8 id, dynamic hint});

  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsync(
      {required FeedIdTwinRustAsync id, dynamic hint});

  Future<U8Array1600> useBoxedBlobTwinRustAsync(
      {required BlobTwinRustAsync blob, dynamic hint});

  Future<U8Array32> useMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint});

  BlobTwinSync boxedBlobTwinSync({required U8Array1600 blob, dynamic hint});

  TestIdTwinSync funcTestIdTwinSync({required TestIdTwinSync id, dynamic hint});

  U8Array5 getArrayTwinSync({dynamic hint});

  PointTwinSyncArray2 getComplexArrayTwinSync({dynamic hint});

  double lastNumberTwinSync({required F64Array16 array, dynamic hint});

  TestIdTwinSyncArray2 nestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint});

  MessageIdTwinSync newMsgidTwinSync({required U8Array32 id, dynamic hint});

  FeedIdTwinSync returnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint});

  U8Array8 returnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint});

  U8Array1600 useBoxedBlobTwinSync({required BlobTwinSync blob, dynamic hint});

  U8Array32 useMsgidTwinSync({required MessageIdTwinSync id, dynamic hint});

  Future<void> handleCustomizedStructTwinRustAsync(
      {required CustomizedTwinRustAsync val, dynamic hint});

  Future<UserIdTwinRustAsync> nextUserIdTwinRustAsync(
      {required UserIdTwinRustAsync userId, dynamic hint});

  void handleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint});

  UserIdTwinSync nextUserIdTwinSync(
      {required UserIdTwinSync userId, dynamic hint});

  Future<BasicGeneralEnumTwinNormal>
      exampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinNormal>
      exampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg, dynamic hint});

  Future<BasicStructTwinNormal> exampleBasicTypeBasicStructTwinNormalTwinNormal(
      {required BasicStructTwinNormal arg, dynamic hint});

  Future<bool> exampleBasicTypeBoolTwinNormal(
      {required bool arg, dynamic hint});

  Future<Uint8List> exampleBasicTypeBytesTwinNormal(
      {required List<int> arg, dynamic hint});

  Future<double> exampleBasicTypeF32TwinNormal(
      {required double arg, dynamic hint});

  Future<double> exampleBasicTypeF64TwinNormal(
      {required double arg, dynamic hint});

  Future<int> exampleBasicTypeI16TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeI32TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeI64TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeI8TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeIsizeTwinNormal({required int arg, dynamic hint});

  Future<String> exampleBasicTypeStringTwinNormal(
      {required String arg, dynamic hint});

  Future<int> exampleBasicTypeU16TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeU32TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeU64TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeU8TwinNormal({required int arg, dynamic hint});

  Future<int> exampleBasicTypeUsizeTwinNormal({required int arg, dynamic hint});

  Future<List<BasicGeneralEnumTwinNormal>>
      exampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg, dynamic hint});

  Future<List<BasicPrimitiveEnumTwinNormal>>
      exampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg, dynamic hint});

  Future<List<BasicStructTwinNormal>>
      exampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg, dynamic hint});

  Future<List<bool>> exampleBasicListTypeBoolTwinNormal(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> exampleBasicListTypeF32TwinNormal(
      {required List<double> arg, dynamic hint});

  Future<Float64List> exampleBasicListTypeF64TwinNormal(
      {required List<double> arg, dynamic hint});

  Future<Int16List> exampleBasicListTypeI16TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<Int32List> exampleBasicListTypeI32TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<Int64List> exampleBasicListTypeI64TwinNormal(
      {required Int64List arg, dynamic hint});

  Future<Int8List> exampleBasicListTypeI8TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<List<String>> exampleBasicListTypeStringTwinNormal(
      {required List<String> arg, dynamic hint});

  Future<Uint16List> exampleBasicListTypeU16TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<Uint32List> exampleBasicListTypeU32TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<Uint64List> exampleBasicListTypeU64TwinNormal(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> exampleBasicListTypeU8TwinNormal(
      {required List<int> arg, dynamic hint});

  Future<List<BasicGeneralEnumTwinRustAsync>>
      exampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg, dynamic hint});

  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      exampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg, dynamic hint});

  Future<List<BasicStructTwinRustAsync>>
      exampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg, dynamic hint});

  Future<List<bool>> exampleBasicListTypeBoolTwinRustAsync(
      {required List<bool> arg, dynamic hint});

  Future<Float32List> exampleBasicListTypeF32TwinRustAsync(
      {required List<double> arg, dynamic hint});

  Future<Float64List> exampleBasicListTypeF64TwinRustAsync(
      {required List<double> arg, dynamic hint});

  Future<Int16List> exampleBasicListTypeI16TwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<Int32List> exampleBasicListTypeI32TwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<Int64List> exampleBasicListTypeI64TwinRustAsync(
      {required Int64List arg, dynamic hint});

  Future<Int8List> exampleBasicListTypeI8TwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<List<String>> exampleBasicListTypeStringTwinRustAsync(
      {required List<String> arg, dynamic hint});

  Future<Uint16List> exampleBasicListTypeU16TwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<Uint32List> exampleBasicListTypeU32TwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<Uint64List> exampleBasicListTypeU64TwinRustAsync(
      {required Uint64List arg, dynamic hint});

  Future<Uint8List> exampleBasicListTypeU8TwinRustAsync(
      {required List<int> arg, dynamic hint});

  List<BasicGeneralEnumTwinSync>
      exampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg, dynamic hint});

  List<BasicPrimitiveEnumTwinSync>
      exampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg, dynamic hint});

  List<BasicStructTwinSync> exampleBasicListTypeBasicStructTwinSyncTwinSync(
      {required List<BasicStructTwinSync> arg, dynamic hint});

  List<bool> exampleBasicListTypeBoolTwinSync(
      {required List<bool> arg, dynamic hint});

  Float32List exampleBasicListTypeF32TwinSync(
      {required List<double> arg, dynamic hint});

  Float64List exampleBasicListTypeF64TwinSync(
      {required List<double> arg, dynamic hint});

  Int16List exampleBasicListTypeI16TwinSync(
      {required List<int> arg, dynamic hint});

  Int32List exampleBasicListTypeI32TwinSync(
      {required List<int> arg, dynamic hint});

  Int64List exampleBasicListTypeI64TwinSync(
      {required Int64List arg, dynamic hint});

  Int8List exampleBasicListTypeI8TwinSync(
      {required List<int> arg, dynamic hint});

  List<String> exampleBasicListTypeStringTwinSync(
      {required List<String> arg, dynamic hint});

  Uint16List exampleBasicListTypeU16TwinSync(
      {required List<int> arg, dynamic hint});

  Uint32List exampleBasicListTypeU32TwinSync(
      {required List<int> arg, dynamic hint});

  Uint64List exampleBasicListTypeU64TwinSync(
      {required Uint64List arg, dynamic hint});

  Uint8List exampleBasicListTypeU8TwinSync(
      {required List<int> arg, dynamic hint});

  Future<Map<int, BasicGeneralEnumTwinNormal>>
      exampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg, dynamic hint});

  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      exampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg, dynamic hint});

  Future<Map<int, BasicStructTwinNormal>>
      exampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg, dynamic hint});

  Future<Map<int, bool>> exampleBasicMapTypeBoolTwinNormal(
      {required Map<int, bool> arg, dynamic hint});

  Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinNormal(
      {required Map<int, Uint8List> arg, dynamic hint});

  Future<Map<int, double>> exampleBasicMapTypeF32TwinNormal(
      {required Map<int, double> arg, dynamic hint});

  Future<Map<int, double>> exampleBasicMapTypeF64TwinNormal(
      {required Map<int, double> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI16TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI32TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI64TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI8TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeIsizeTwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, String>> exampleBasicMapTypeStringTwinNormal(
      {required Map<int, String> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU16TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU32TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU64TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU8TwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeUsizeTwinNormal(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      exampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg, dynamic hint});

  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      exampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg,
          dynamic hint});

  Future<Map<int, BasicStructTwinRustAsync>>
      exampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg, dynamic hint});

  Future<Map<int, bool>> exampleBasicMapTypeBoolTwinRustAsync(
      {required Map<int, bool> arg, dynamic hint});

  Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinRustAsync(
      {required Map<int, Uint8List> arg, dynamic hint});

  Future<Map<int, double>> exampleBasicMapTypeF32TwinRustAsync(
      {required Map<int, double> arg, dynamic hint});

  Future<Map<int, double>> exampleBasicMapTypeF64TwinRustAsync(
      {required Map<int, double> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI16TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI64TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeI8TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeIsizeTwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, String>> exampleBasicMapTypeStringTwinRustAsync(
      {required Map<int, String> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU16TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU64TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeU8TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<int, int>> exampleBasicMapTypeUsizeTwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, BasicGeneralEnumTwinSync>
      exampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg, dynamic hint});

  Map<int, BasicPrimitiveEnumTwinSync>
      exampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg, dynamic hint});

  Map<int, BasicStructTwinSync> exampleBasicMapTypeBasicStructTwinSyncTwinSync(
      {required Map<int, BasicStructTwinSync> arg, dynamic hint});

  Map<int, bool> exampleBasicMapTypeBoolTwinSync(
      {required Map<int, bool> arg, dynamic hint});

  Map<int, Uint8List> exampleBasicMapTypeBytesTwinSync(
      {required Map<int, Uint8List> arg, dynamic hint});

  Map<int, double> exampleBasicMapTypeF32TwinSync(
      {required Map<int, double> arg, dynamic hint});

  Map<int, double> exampleBasicMapTypeF64TwinSync(
      {required Map<int, double> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeI16TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeI32TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeI64TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeI8TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeIsizeTwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, String> exampleBasicMapTypeStringTwinSync(
      {required Map<int, String> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeU16TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeU32TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeU64TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeU8TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<int, int> exampleBasicMapTypeUsizeTwinSync(
      {required Map<int, int> arg, dynamic hint});

  Future<BasicGeneralEnumTwinNormal?>
      exampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinNormal?>
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg, dynamic hint});

  Future<BasicStructTwinNormal?>
      exampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg, dynamic hint});

  Future<bool?> exampleBasicOptionalTypeBoolTwinNormal(
      {bool? arg, dynamic hint});

  Future<Uint8List?> exampleBasicOptionalTypeBytesTwinNormal(
      {Uint8List? arg, dynamic hint});

  Future<double?> exampleBasicOptionalTypeF32TwinNormal(
      {double? arg, dynamic hint});

  Future<double?> exampleBasicOptionalTypeF64TwinNormal(
      {double? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI16TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI32TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI64TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI8TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeIsizeTwinNormal(
      {int? arg, dynamic hint});

  Future<String?> exampleBasicOptionalTypeStringTwinNormal(
      {String? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU16TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU32TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU64TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU8TwinNormal({int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeUsizeTwinNormal(
      {int? arg, dynamic hint});

  Future<BasicGeneralEnumTwinRustAsync?>
      exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinRustAsync?>
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint});

  Future<BasicStructTwinRustAsync?>
      exampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg, dynamic hint});

  Future<bool?> exampleBasicOptionalTypeBoolTwinRustAsync(
      {bool? arg, dynamic hint});

  Future<Uint8List?> exampleBasicOptionalTypeBytesTwinRustAsync(
      {Uint8List? arg, dynamic hint});

  Future<double?> exampleBasicOptionalTypeF32TwinRustAsync(
      {double? arg, dynamic hint});

  Future<double?> exampleBasicOptionalTypeF64TwinRustAsync(
      {double? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI16TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI32TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI64TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeI8TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeIsizeTwinRustAsync(
      {int? arg, dynamic hint});

  Future<String?> exampleBasicOptionalTypeStringTwinRustAsync(
      {String? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU16TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU32TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU64TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeU8TwinRustAsync(
      {int? arg, dynamic hint});

  Future<int?> exampleBasicOptionalTypeUsizeTwinRustAsync(
      {int? arg, dynamic hint});

  BasicGeneralEnumTwinSync?
      exampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg, dynamic hint});

  BasicPrimitiveEnumTwinSync?
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg, dynamic hint});

  BasicStructTwinSync? exampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
      {BasicStructTwinSync? arg, dynamic hint});

  bool? exampleBasicOptionalTypeBoolTwinSync({bool? arg, dynamic hint});

  Uint8List? exampleBasicOptionalTypeBytesTwinSync(
      {Uint8List? arg, dynamic hint});

  double? exampleBasicOptionalTypeF32TwinSync({double? arg, dynamic hint});

  double? exampleBasicOptionalTypeF64TwinSync({double? arg, dynamic hint});

  int? exampleBasicOptionalTypeI16TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeI32TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeI64TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeI8TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeIsizeTwinSync({int? arg, dynamic hint});

  String? exampleBasicOptionalTypeStringTwinSync({String? arg, dynamic hint});

  int? exampleBasicOptionalTypeU16TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeU32TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeU64TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeU8TwinSync({int? arg, dynamic hint});

  int? exampleBasicOptionalTypeUsizeTwinSync({int? arg, dynamic hint});

  Future<BasicGeneralEnumTwinRustAsync>
      exampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg, dynamic hint});

  Future<BasicPrimitiveEnumTwinRustAsync>
      exampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg, dynamic hint});

  Future<BasicStructTwinRustAsync>
      exampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg, dynamic hint});

  Future<bool> exampleBasicTypeBoolTwinRustAsync(
      {required bool arg, dynamic hint});

  Future<Uint8List> exampleBasicTypeBytesTwinRustAsync(
      {required List<int> arg, dynamic hint});

  Future<double> exampleBasicTypeF32TwinRustAsync(
      {required double arg, dynamic hint});

  Future<double> exampleBasicTypeF64TwinRustAsync(
      {required double arg, dynamic hint});

  Future<int> exampleBasicTypeI16TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeI32TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeI64TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeI8TwinRustAsync({required int arg, dynamic hint});

  Future<int> exampleBasicTypeIsizeTwinRustAsync(
      {required int arg, dynamic hint});

  Future<String> exampleBasicTypeStringTwinRustAsync(
      {required String arg, dynamic hint});

  Future<int> exampleBasicTypeU16TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeU32TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeU64TwinRustAsync(
      {required int arg, dynamic hint});

  Future<int> exampleBasicTypeU8TwinRustAsync({required int arg, dynamic hint});

  Future<int> exampleBasicTypeUsizeTwinRustAsync(
      {required int arg, dynamic hint});

  BasicGeneralEnumTwinSync exampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
      {required BasicGeneralEnumTwinSync arg, dynamic hint});

  BasicPrimitiveEnumTwinSync exampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
      {required BasicPrimitiveEnumTwinSync arg, dynamic hint});

  BasicStructTwinSync exampleBasicTypeBasicStructTwinSyncTwinSync(
      {required BasicStructTwinSync arg, dynamic hint});

  bool exampleBasicTypeBoolTwinSync({required bool arg, dynamic hint});

  Uint8List exampleBasicTypeBytesTwinSync(
      {required List<int> arg, dynamic hint});

  double exampleBasicTypeF32TwinSync({required double arg, dynamic hint});

  double exampleBasicTypeF64TwinSync({required double arg, dynamic hint});

  int exampleBasicTypeI16TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeI32TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeI64TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeI8TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeIsizeTwinSync({required int arg, dynamic hint});

  String exampleBasicTypeStringTwinSync({required String arg, dynamic hint});

  int exampleBasicTypeU16TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeU32TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeU64TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeU8TwinSync({required int arg, dynamic hint});

  int exampleBasicTypeUsizeTwinSync({required int arg, dynamic hint});

  Future<void> benchmarkBinaryTreeInputJsonTwinNormal(
      {required String raw, dynamic hint});

  Future<void> benchmarkBinaryTreeInputProtobufTwinNormal(
      {required List<int> raw, dynamic hint});

  Future<void> benchmarkBinaryTreeInputTwinNormal(
      {required BenchmarkBinaryTreeTwinNormal tree, dynamic hint});

  Future<String> benchmarkBinaryTreeOutputJsonTwinNormal(
      {required int depth, dynamic hint});

  Future<Uint8List> benchmarkBinaryTreeOutputProtobufTwinNormal(
      {required int depth, dynamic hint});

  Future<BenchmarkBinaryTreeTwinNormal> benchmarkBinaryTreeOutputTwinNormal(
      {required int depth, dynamic hint});

  Future<void> benchmarkBlobInputJsonTwinNormal(
      {required String raw, dynamic hint});

  Future<void> benchmarkBlobInputProtobufTwinNormal(
      {required List<int> raw, dynamic hint});

  Future<void> benchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob, dynamic hint});

  Future<String> benchmarkBlobOutputJsonTwinNormal(
      {required int size, dynamic hint});

  Future<Uint8List> benchmarkBlobOutputProtobufTwinNormal(
      {required int size, dynamic hint});

  Future<BenchmarkBlobTwinNormal> benchmarkBlobOutputTwinNormal(
      {required int size, dynamic hint});

  Future<int> benchmarkInputBytesTwinNormal(
      {required List<int> bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinNormal(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinNormal({dynamic hint});

  Future<void> benchmarkBinaryTreeInputJsonTwinRustAsync(
      {required String raw, dynamic hint});

  Future<void> benchmarkBinaryTreeInputProtobufTwinRustAsync(
      {required List<int> raw, dynamic hint});

  Future<void> benchmarkBinaryTreeInputTwinRustAsync(
      {required BenchmarkBinaryTreeTwinRustAsync tree, dynamic hint});

  Future<String> benchmarkBinaryTreeOutputJsonTwinRustAsync(
      {required int depth, dynamic hint});

  Future<Uint8List> benchmarkBinaryTreeOutputProtobufTwinRustAsync(
      {required int depth, dynamic hint});

  Future<BenchmarkBinaryTreeTwinRustAsync>
      benchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth, dynamic hint});

  Future<void> benchmarkBlobInputJsonTwinRustAsync(
      {required String raw, dynamic hint});

  Future<void> benchmarkBlobInputProtobufTwinRustAsync(
      {required List<int> raw, dynamic hint});

  Future<void> benchmarkBlobInputTwinRustAsync(
      {required BenchmarkBlobTwinRustAsync blob, dynamic hint});

  Future<String> benchmarkBlobOutputJsonTwinRustAsync(
      {required int size, dynamic hint});

  Future<Uint8List> benchmarkBlobOutputProtobufTwinRustAsync(
      {required int size, dynamic hint});

  Future<BenchmarkBlobTwinRustAsync> benchmarkBlobOutputTwinRustAsync(
      {required int size, dynamic hint});

  Future<int> benchmarkInputBytesTwinRustAsync(
      {required List<int> bytes, dynamic hint});

  Future<Uint8List> benchmarkOutputBytesTwinRustAsync(
      {required int size, dynamic hint});

  Future<void> benchmarkVoidTwinRustAsync({dynamic hint});

  void benchmarkBinaryTreeInputJsonTwinSync(
      {required String raw, dynamic hint});

  void benchmarkBinaryTreeInputProtobufTwinSync(
      {required List<int> raw, dynamic hint});

  void benchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree, dynamic hint});

  String benchmarkBinaryTreeOutputJsonTwinSync(
      {required int depth, dynamic hint});

  Uint8List benchmarkBinaryTreeOutputProtobufTwinSync(
      {required int depth, dynamic hint});

  BenchmarkBinaryTreeTwinSync benchmarkBinaryTreeOutputTwinSync(
      {required int depth, dynamic hint});

  void benchmarkBlobInputJsonTwinSync({required String raw, dynamic hint});

  void benchmarkBlobInputProtobufTwinSync(
      {required List<int> raw, dynamic hint});

  void benchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob, dynamic hint});

  String benchmarkBlobOutputJsonTwinSync({required int size, dynamic hint});

  Uint8List benchmarkBlobOutputProtobufTwinSync(
      {required int size, dynamic hint});

  BenchmarkBlobTwinSync benchmarkBlobOutputTwinSync(
      {required int size, dynamic hint});

  int benchmarkInputBytesTwinSync({required List<int> bytes, dynamic hint});

  Uint8List benchmarkOutputBytesTwinSync({required int size, dynamic hint});

  void benchmarkVoidTwinSync({dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
      {required StructWithCommentsTwinRustAsync that, dynamic hint});

  Future<void> structWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
      {dynamic hint});

  Future<void> functionWithCommentsSlashStarStarTwinRustAsync({dynamic hint});

  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsync(
      {dynamic hint});

  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsync(
      {dynamic hint});

  void structWithCommentsTwinSyncInstanceMethodTwinSync(
      {required StructWithCommentsTwinSync that, dynamic hint});

  void structWithCommentsTwinSyncStaticMethodTwinSync({dynamic hint});

  void functionWithCommentsSlashStarStarTwinSync({dynamic hint});

  void functionWithCommentsTripleSlashMultiLineTwinSync({dynamic hint});

  void functionWithCommentsTripleSlashSingleLineTwinSync({dynamic hint});

  Future<void> rustCallDartLoopbackTwinRustAsync(
      {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
              DemoStructForRustCallDartTwinRustAsync)
          callback,
      dynamic hint});

  Future<void> rustCallDartMultiTimesTwinRustAsync(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint});

  Future<void> rustCallDartOneArgTwinRustAsync(
      {required FutureOr<void> Function(String) callback, dynamic hint});

  Future<void> rustCallDartReturnTwinRustAsync(
      {required FutureOr<String> Function() callback, dynamic hint});

  Future<void> rustCallDartSimpleTwinRustAsync(
      {required FutureOr<void> Function() callback, dynamic hint});

  Future<void> rustCallDartTwoArgsTwinRustAsync(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinRustAsync)
          callback,
      dynamic hint});

  Future<void> rustCallDartWithDartOpaqueArgTwinRustAsync(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint});

  Future<Object> rustCallDartWithDartOpaqueResultTwinRustAsync(
      {required FutureOr<Object> Function() callback, dynamic hint});

  Future<String> asyncAcceptDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<List<Object>> cloneDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<EnumDartOpaqueTwinRustAsync> createEnumDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<DartOpaqueNestedTwinRustAsync> createNestedDartOpaqueTwinRustAsync(
      {required Object opaque1, required Object opaque2, dynamic hint});

  Future<void> dropStaticDartOpaqueTwinRustAsync(
      {required int id, dynamic hint});

  Future<void> getEnumDartOpaqueTwinRustAsync(
      {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void> getNestedDartOpaqueTwinRustAsync(
      {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<void> loopBackArrayGetTwinRustAsync(
      {required ObjectArray1 opaque, dynamic hint});

  Future<ObjectArray1> loopBackArrayTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> loopBackOptionGetTwinRustAsync({Object? opaque, dynamic hint});

  Future<Object?> loopBackOptionTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<Object> loopBackTwinRustAsync({required Object opaque, dynamic hint});

  Future<void> loopBackVecGetTwinRustAsync(
      {required List<Object> opaque, dynamic hint});

  Future<List<Object>> loopBackVecTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> panicUnwrapDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint});

  Future<void> setStaticDartOpaqueTwinRustAsync(
      {required int id, required Object opaque, dynamic hint});

  String asyncAcceptDartOpaqueTwinSync({required Object opaque, dynamic hint});

  List<Object> cloneDartOpaqueTwinSync({required Object opaque, dynamic hint});

  EnumDartOpaqueTwinSync createEnumDartOpaqueTwinSync(
      {required Object opaque, dynamic hint});

  DartOpaqueNestedTwinSync createNestedDartOpaqueTwinSync(
      {required Object opaque1, required Object opaque2, dynamic hint});

  void dropStaticDartOpaqueTwinSync({required int id, dynamic hint});

  void getEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint});

  void getNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint});

  void loopBackArrayGetTwinSync({required ObjectArray1 opaque, dynamic hint});

  ObjectArray1 loopBackArrayTwinSync({required Object opaque, dynamic hint});

  void loopBackOptionGetTwinSync({Object? opaque, dynamic hint});

  Object? loopBackOptionTwinSync({required Object opaque, dynamic hint});

  Object loopBackTwinSync({required Object opaque, dynamic hint});

  void loopBackVecGetTwinSync({required List<Object> opaque, dynamic hint});

  List<Object> loopBackVecTwinSync({required Object opaque, dynamic hint});

  void panicUnwrapDartOpaqueTwinSync({required Object opaque, dynamic hint});

  void setStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint});

  Future<EnumSimpleTwinRustAsync> funcEnumSimpleTwinRustAsync(
      {required EnumSimpleTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemMixedTwinRustAsync> funcEnumWithItemMixedTwinRustAsync(
      {required EnumWithItemMixedTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemStructTwinRustAsync> funcEnumWithItemStructTwinRustAsync(
      {required EnumWithItemStructTwinRustAsync arg, dynamic hint});

  Future<EnumWithItemTupleTwinRustAsync> funcEnumWithItemTupleTwinRustAsync(
      {required EnumWithItemTupleTwinRustAsync arg, dynamic hint});

  Future<WeekdaysTwinRustAsync> handleEnumParameterTwinRustAsync(
      {required WeekdaysTwinRustAsync weekday, dynamic hint});

  Future<KitchenSinkTwinRustAsync> handleEnumStructTwinRustAsync(
      {required KitchenSinkTwinRustAsync val, dynamic hint});

  Future<WeekdaysTwinRustAsync?> handleReturnEnumTwinRustAsync(
      {required String input, dynamic hint});

  Future<MeasureTwinRustAsync?> multiplyByTenTwinRustAsync(
      {required MeasureTwinRustAsync measure, dynamic hint});

  Future<Uint8List> printNoteTwinRustAsync(
      {required NoteTwinRustAsync note, dynamic hint});

  EnumSimpleTwinSync funcEnumSimpleTwinSync(
      {required EnumSimpleTwinSync arg, dynamic hint});

  EnumWithItemMixedTwinSync funcEnumWithItemMixedTwinSync(
      {required EnumWithItemMixedTwinSync arg, dynamic hint});

  EnumWithItemStructTwinSync funcEnumWithItemStructTwinSync(
      {required EnumWithItemStructTwinSync arg, dynamic hint});

  EnumWithItemTupleTwinSync funcEnumWithItemTupleTwinSync(
      {required EnumWithItemTupleTwinSync arg, dynamic hint});

  WeekdaysTwinSync handleEnumParameterTwinSync(
      {required WeekdaysTwinSync weekday, dynamic hint});

  KitchenSinkTwinSync handleEnumStructTwinSync(
      {required KitchenSinkTwinSync val, dynamic hint});

  WeekdaysTwinSync? handleReturnEnumTwinSync(
      {required String input, dynamic hint});

  MeasureTwinSync? multiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint});

  Uint8List printNoteTwinSync({required NoteTwinSync note, dynamic hint});

  Future<String> eventTwinRustAsyncAsStringTwinRustAsync(
      {required EventTwinRustAsync that, dynamic hint});

  Future<void> closeEventListenerTwinRustAsync({dynamic hint});

  Future<void> createEventTwinRustAsync(
      {required String address, required String payload, dynamic hint});

  Stream<EventTwinRustAsync> registerEventListenerTwinRustAsync({dynamic hint});

  Future<CustomStructTwinRustAsync> customStructTwinRustAsyncNewTwinRustAsync(
      {required String message, dynamic hint});

  Future<void>
      customStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<int>
      customStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint});

  Future<void>
      customStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint});

  Future<int> customStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
      {dynamic hint});

  Future<SomeStructTwinRustAsync> someStructTwinRustAsyncNewTwinRustAsync(
      {required int value, dynamic hint});

  Future<int> someStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int> someStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint});

  Future<int> someStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
      {dynamic hint});

  Future<int> someStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
      {dynamic hint});

  Future<void> customEnumErrorPanicTwinRustAsync({dynamic hint});

  Future<int> customEnumErrorReturnErrorTwinRustAsync({dynamic hint});

  Future<int> customEnumErrorReturnOkTwinRustAsync(
      {required int arg, dynamic hint});

  Future<void> customNestedErrorReturnErrorTwinRustAsync(
      {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint});

  Future<void> customStructErrorReturnErrorTwinRustAsync(
      {required CustomStructErrorTwinRustAsync arg, dynamic hint});

  Future<int> funcReturnErrorTwinRustAsync({dynamic hint});

  Future<int> funcTypeFalliblePanicTwinRustAsync({dynamic hint});

  Future<int> funcTypeInfalliblePanicTwinRustAsync({dynamic hint});

  Future<void> panicWithCustomResultTwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError1TwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError1Variant1TwinRustAsync({dynamic hint});

  Future<void> returnCustomNestedError2TwinRustAsync({dynamic hint});

  Future<void> returnCustomStructErrorTwinRustAsync({dynamic hint});

  Future<int> returnCustomStructOkTwinRustAsync({dynamic hint});

  Future<int> returnErrCustomErrorTwinRustAsync({dynamic hint});

  Future<int> returnErrorVariantTwinRustAsync(
      {required int variant, dynamic hint});

  Future<int> returnOkCustomErrorTwinRustAsync({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinRustAsync({dynamic hint});

  Future<void> throwAnyhowTwinRustAsync({dynamic hint});

  CustomStructTwinSync customStructTwinSyncNewTwinSync(
      {required String message, dynamic hint});

  void customStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
      {required CustomStructTwinSync that, dynamic hint});

  int customStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint});

  void customStructTwinSyncStaticReturnCustomStructErrorTwinSync(
      {dynamic hint});

  int customStructTwinSyncStaticReturnCustomStructOkTwinSync({dynamic hint});

  SomeStructTwinSync someStructTwinSyncNewTwinSync(
      {required int value, dynamic hint});

  int someStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int someStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint});

  int someStructTwinSyncStaticReturnErrCustomErrorTwinSync({dynamic hint});

  int someStructTwinSyncStaticReturnOkCustomErrorTwinSync({dynamic hint});

  void customEnumErrorPanicTwinSync({dynamic hint});

  int customEnumErrorReturnErrorTwinSync({dynamic hint});

  int customEnumErrorReturnOkTwinSync({required int arg, dynamic hint});

  void customNestedErrorReturnErrorTwinSync(
      {required CustomNestedErrorOuterTwinSync arg, dynamic hint});

  void customStructErrorReturnErrorTwinSync(
      {required CustomStructErrorTwinSync arg, dynamic hint});

  int funcReturnErrorTwinSync({dynamic hint});

  int funcTypeFalliblePanicTwinSync({dynamic hint});

  int funcTypeInfalliblePanicTwinSync({dynamic hint});

  void panicWithCustomResultTwinSync({dynamic hint});

  void returnCustomNestedError1TwinSync({dynamic hint});

  void returnCustomNestedError1Variant1TwinSync({dynamic hint});

  void returnCustomNestedError2TwinSync({dynamic hint});

  void returnCustomStructErrorTwinSync({dynamic hint});

  int returnCustomStructOkTwinSync({dynamic hint});

  int returnErrCustomErrorTwinSync({dynamic hint});

  int returnErrorVariantTwinSync({required int variant, dynamic hint});

  int returnOkCustomErrorTwinSync({dynamic hint});

  Stream<String> streamSinkThrowAnyhowTwinSync({dynamic hint});

  void throwAnyhowTwinSync({dynamic hint});

  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsync({dynamic hint});

  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsync({dynamic hint});

  Future<bool> useImportedEnumTwinRustAsync(
      {required MyEnum myEnum, dynamic hint});

  Future<bool> useImportedStructTwinRustAsync(
      {required MyStruct myStruct, dynamic hint});

  NewSimpleStruct callNewModuleSystemTwinSync({dynamic hint});

  OldSimpleStruct callOldModuleSystemTwinSync({dynamic hint});

  bool useImportedEnumTwinSync({required MyEnum myEnum, dynamic hint});

  bool useImportedStructTwinSync({required MyStruct myStruct, dynamic hint});

  Future<Map<int, int>> funcHashMapI32I32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint});

  Future<Map<String, Uint8List>> funcHashMapStringBytesTwinRustAsync(
      {required Map<String, Uint8List> arg, dynamic hint});

  Future<Map<String, KitchenSinkTwinRustAsync>>
      funcHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg, dynamic hint});

  Future<Map<String, EnumSimpleTwinRustAsync>>
      funcHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg, dynamic hint});

  Future<Map<String, String>> funcHashMapStringStringTwinRustAsync(
      {required Map<String, String> arg, dynamic hint});

  Future<Map<String, MySize>> funcHashMapStringStructTwinRustAsync(
      {required Map<String, MySize> arg, dynamic hint});

  Future<Set<int>> funcHashSetI32TwinRustAsync(
      {required Set<int> arg, dynamic hint});

  Future<Set<String>> funcHashSetStringTwinRustAsync(
      {required Set<String> arg, dynamic hint});

  Map<int, int> funcHashMapI32I32TwinSync(
      {required Map<int, int> arg, dynamic hint});

  Map<String, Uint8List> funcHashMapStringBytesTwinSync(
      {required Map<String, Uint8List> arg, dynamic hint});

  Map<String, KitchenSinkTwinSync> funcHashMapStringComplexEnumTwinSync(
      {required Map<String, KitchenSinkTwinSync> arg, dynamic hint});

  Map<String, EnumSimpleTwinSync> funcHashMapStringSimpleEnumTwinSync(
      {required Map<String, EnumSimpleTwinSync> arg, dynamic hint});

  Map<String, String> funcHashMapStringStringTwinSync(
      {required Map<String, String> arg, dynamic hint});

  Map<String, MySize> funcHashMapStringStructTwinSync(
      {required Map<String, MySize> arg, dynamic hint});

  Set<int> funcHashSetI32TwinSync({required Set<int> arg, dynamic hint});

  Set<String> funcHashSetStringTwinSync(
      {required Set<String> arg, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
      {required String a, required String b, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncConcatenateTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that,
      required String b,
      dynamic hint});

  Stream<int>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint});

  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint});

  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint});

  Future<ConcatenateWithTwinRustAsync>
      concatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint});

  Future<String> concatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint});

  Future<int> sumWithTwinRustAsyncSumTwinRustAsync(
      {required SumWithTwinRustAsync that,
      required int y,
      required int z,
      dynamic hint});

  Future<SumWithTwinRustAsyncArray3> getSumArrayTwinRustAsync(
      {required int a, required int b, required int c, dynamic hint});

  Future<SumWithTwinRustAsync> getSumStructTwinRustAsync({dynamic hint});

  String concatenateWithTwinSyncConcatenateStaticTwinSync(
      {required String a, required String b, dynamic hint});

  String concatenateWithTwinSyncConcatenateTwinSync(
      {required ConcatenateWithTwinSync that, required String b, dynamic hint});

  Stream<int>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint});

  Stream<Log2TwinSync>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint});

  Stream<int> concatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint});

  Stream<Log2TwinSync> concatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
      {required ConcatenateWithTwinSync that,
      required int key,
      required int max,
      dynamic hint});

  ConcatenateWithTwinSync concatenateWithTwinSyncNewTwinSync(
      {required String a, dynamic hint});

  String concatenateWithTwinSyncSimpleGetterTwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint});

  int sumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint});

  SumWithTwinSyncArray3 getSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint});

  SumWithTwinSync getSumStructTwinSync({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinRustAsync({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsync(
      {dynamic hint});

  Future<int?> firstNumberTwinRustAsync({required Numbers nums, dynamic hint});

  Future<int?> firstSequenceTwinRustAsync(
      {required Sequences seqs, dynamic hint});

  Future<ApplicationSettings> getAppSettingsTwinRustAsync({dynamic hint});

  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsync(
      {dynamic hint});

  Future<ApplicationMessage> getMessageTwinRustAsync({dynamic hint});

  Future<bool> isAppEmbeddedTwinRustAsync(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinRustAsync> mirrorStructStreamTwinRustAsync(
      {dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsync({dynamic hint});

  Future<Numbers> repeatNumberTwinRustAsync(
      {required int num, required int times, dynamic hint});

  Future<Sequences> repeatSequenceTwinRustAsync(
      {required int seq, required int times, dynamic hint});

  Future<ContainsMirroredSubStructTwinRustAsync>
      testContainsMirroredSubStructTwinRustAsync({dynamic hint});

  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinRustAsync(
      {dynamic hint});

  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsync({dynamic hint});

  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsync({dynamic hint});

  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsync(
      {dynamic hint});

  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsync(
      {required bool nested, dynamic hint});

  Future<RawStringMirrored> testRawStringMirroredTwinRustAsync({dynamic hint});

  Stream<ApplicationSettings> appSettingsStreamTwinSync({dynamic hint});

  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSync(
      {dynamic hint});

  int? firstNumberTwinSync({required Numbers nums, dynamic hint});

  int? firstSequenceTwinSync({required Sequences seqs, dynamic hint});

  ApplicationSettings getAppSettingsTwinSync({dynamic hint});

  ApplicationSettings getFallibleAppSettingsTwinSync({dynamic hint});

  ApplicationMessage getMessageTwinSync({dynamic hint});

  bool isAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint});

  Stream<MirrorStructTwinSync> mirrorStructStreamTwinSync({dynamic hint});

  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSync({dynamic hint});

  Numbers repeatNumberTwinSync(
      {required int num, required int times, dynamic hint});

  Sequences repeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint});

  ContainsMirroredSubStructTwinSync testContainsMirroredSubStructTwinSync(
      {dynamic hint});

  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSync(
      {dynamic hint});

  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSync(
      {dynamic hint});

  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSync(
      {dynamic hint});

  NestedRawStringMirrored testNestedRawStringMirroredTwinSync({dynamic hint});

  RawStringEnumMirrored testRawStringEnumMirroredTwinSync(
      {required bool nested, dynamic hint});

  RawStringMirrored testRawStringMirroredTwinSync({dynamic hint});

  Future<BigBuffersTwinRustAsync> handleBigBuffersTwinRustAsync({dynamic hint});

  Future<MyTreeNodeTwinRustAsync> handleComplexStructTwinRustAsync(
      {required MyTreeNodeTwinRustAsync s, dynamic hint});

  Future<MyNestedStructTwinRustAsync> handleNestedStructTwinRustAsync(
      {required MyNestedStructTwinRustAsync s, dynamic hint});

  Future<String> handleStringTwinRustAsync({required String s, dynamic hint});

  Future<MySize> handleStructTwinRustAsync(
      {required MySize arg, required MySize boxed, dynamic hint});

  Future<Uint8List> handleVecU8TwinRustAsync(
      {required List<int> v, dynamic hint});

  Future<List<WeekdaysTwinRustAsync>> listOfPrimitiveEnumsTwinRustAsync(
      {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint});

  Future<AbcTwinRustAsync> testAbcEnumTwinRustAsync(
      {required AbcTwinRustAsync abc, dynamic hint});

  Future<StructWithEnumTwinRustAsync> testStructWithEnumTwinRustAsync(
      {required StructWithEnumTwinRustAsync se, dynamic hint});

  BigBuffersTwinSync handleBigBuffersTwinSync({dynamic hint});

  MyTreeNodeTwinSync handleComplexStructTwinSync(
      {required MyTreeNodeTwinSync s, dynamic hint});

  MyNestedStructTwinSync handleNestedStructTwinSync(
      {required MyNestedStructTwinSync s, dynamic hint});

  String handleStringTwinSync({required String s, dynamic hint});

  MySize handleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint});

  Uint8List handleVecU8TwinSync({required List<int> v, dynamic hint});

  List<WeekdaysTwinSync> listOfPrimitiveEnumsTwinSync(
      {required List<WeekdaysTwinSync> weekdays, dynamic hint});

  AbcTwinSync testAbcEnumTwinSync({required AbcTwinSync abc, dynamic hint});

  StructWithEnumTwinSync testStructWithEnumTwinSync(
      {required StructWithEnumTwinSync se, dynamic hint});

  Future<EmptyTwinRustAsync> emptyStructTwinRustAsync(
      {required EmptyTwinRustAsync empty, dynamic hint});

  Future<void> funcReturnUnitTwinRustAsync({dynamic hint});

  Future<List<MySize>> handleListOfStructTwinRustAsync(
      {required List<MySize> l, dynamic hint});

  Future<List<String>> handleStringListTwinRustAsync(
      {required List<String> names, dynamic hint});

  EmptyTwinSync emptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint});

  void funcReturnUnitTwinSync({dynamic hint});

  List<MySize> handleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint});

  List<String> handleStringListTwinSync(
      {required List<String> names, dynamic hint});

  Future<NewTypeIntTwinRustAsync> handleNewtypeTwinRustAsync(
      {required NewTypeIntTwinRustAsync arg, dynamic hint});

  NewTypeIntTwinSync handleNewtypeTwinSync(
      {required NewTypeIntTwinSync arg, dynamic hint});

  Future<int?> primitiveOptionalTypesTwinRustAsync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  int? primitiveOptionalTypesTwinSync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint});

  Future<double> handleIncrementBoxedOptionalTwinRustAsync(
      {double? opt, dynamic hint});

  Future<String> handleOptionBoxArgumentsTwinRustAsync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsync? structbox,
      dynamic hint});

  Future<ExoticOptionalsTwinRustAsync?> handleOptionalIncrementTwinRustAsync(
      {ExoticOptionalsTwinRustAsync? opt, dynamic hint});

  Future<double?> handleOptionalReturnTwinRustAsync(
      {required double left, required double right, dynamic hint});

  Future<ElementTwinRustAsync?> handleOptionalStructTwinRustAsync(
      {String? document, dynamic hint});

  Future<OptVecsTwinRustAsync> handleVecOfOptsTwinRustAsync(
      {required OptVecsTwinRustAsync opt, dynamic hint});

  double handleIncrementBoxedOptionalTwinSync({double? opt, dynamic hint});

  String handleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint});

  ExoticOptionalsTwinSync? handleOptionalIncrementTwinSync(
      {ExoticOptionalsTwinSync? opt, dynamic hint});

  double? handleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint});

  ElementTwinSync? handleOptionalStructTwinSync(
      {String? document, dynamic hint});

  OptVecsTwinSync handleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint});

  Future<VecOfPrimitivePackTwinRustAsync> handleVecOfPrimitiveTwinRustAsync(
      {required int n, dynamic hint});

  VecOfPrimitivePackTwinSync handleVecOfPrimitiveTwinSync(
      {required int n, dynamic hint});

  Future<int> primitiveTypesTwinRustAsync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  Future<int> primitiveU32TwinRustAsync({required int myU32, dynamic hint});

  int primitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint});

  int primitiveU32TwinSync({required int myU32, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      testMoreThanJustOneRawStringStructTwinRustAsync({dynamic hint});

  Future<RawStringItemStructTwinRustAsync> testRawStringItemStructTwinRustAsync(
      {dynamic hint});

  MoreThanJustOneRawStringStructTwinSync
      testMoreThanJustOneRawStringStructTwinSync({dynamic hint});

  RawStringItemStructTwinSync testRawStringItemStructTwinSync({dynamic hint});

  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint});

  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint});

  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint});

  Future<int> nonCloneSimpleTwinMoiInstanceMethodGetterTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint});

  Future<NonCloneSimpleTwinMoi>
      nonCloneSimpleTwinMoiInstanceMethodReturnOwnTwinMoi(
          {required NonCloneSimpleTwinMoi that, dynamic hint});

  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewCustomNameTwinMoi(
      {dynamic hint});

  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewTwinMoi({dynamic hint});

  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewWithResultTwinMoi(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinMoiStaticMethodArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint});

  Future<void> nonCloneSimpleTwinMoiStaticMethodArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint});

  Future<void> nonCloneSimpleTwinMoiStaticMethodArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint});

  Future<NonCloneSimpleTwinMoi>
      nonCloneSimpleTwinMoiStaticMethodReturnOwnTwinMoi({dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, required int expect, dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<NonCloneSimpleTwinMoi> rustAutoOpaqueArgOwnAndReturnOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, required int expect, dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi a,
      required NonCloneSimpleTwinMoi b,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi borrow,
      required NonCloneSimpleTwinMoi mutBorrow,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinMoi(
      {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinMoi({dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinMoi(
      {required NonCloneSimpleTwinMoi a, required String b, dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinMoi(
      {required BoxMyTraitTwinMoi arg, dynamic hint});

  Future<BoxMyTraitTwinMoi> rustAutoOpaquePlusSignReturnTwinMoi({dynamic hint});

  Future<OpaqueOneTwinMoiOpaqueTwoTwinMoi>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinMoi({dynamic hint});

  Future<OpaqueTwoTwinMoi> rustAutoOpaqueReturnOpaqueTwoTwinMoi({dynamic hint});

  Future<NonCloneSimpleTwinMoi> rustAutoOpaqueReturnOwnTwinMoi(
      {required int initial, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinMoi>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinMoi(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint});

  Future<BoxHelloTraitTwinMoi> rustAutoOpaqueTraitObjectReturnOwnOneTwinMoi(
      {dynamic hint});

  Future<BoxHelloTraitTwinMoi> rustAutoOpaqueTraitObjectReturnOwnTwoTwinMoi(
      {dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinMoi(
      {required NonCloneSimpleTwinMoi a,
      required NonCloneSimpleTwinMoi b,
      dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<int> nonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync({dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewTwinRustAsync({dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync({dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync(
          {dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<NonCloneSimpleTwinRustAsync>
      rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required NonCloneSimpleTwinRustAsync b,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync borrow,
      required NonCloneSimpleTwinRustAsync mutBorrow,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinRustAsync(
      {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsync(
      {dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required String b,
      dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinRustAsync(
      {required BoxMyTraitTwinRustAsync arg, dynamic hint});

  Future<BoxMyTraitTwinRustAsync> rustAutoOpaquePlusSignReturnTwinRustAsync(
      {dynamic hint});

  Future<OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync({dynamic hint});

  Future<OpaqueTwoTwinRustAsync> rustAutoOpaqueReturnOpaqueTwoTwinRustAsync(
      {dynamic hint});

  Future<NonCloneSimpleTwinRustAsync> rustAutoOpaqueReturnOwnTwinRustAsync(
      {required int initial, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsync(
      {required StructWithGoodAndOpaqueFieldTwinRustAsync arg, dynamic hint});

  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg,
          dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
      {required StructWithGoodAndOpaqueFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint});

  Future<BoxHelloTraitTwinRustAsync>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync({dynamic hint});

  Future<BoxHelloTraitTwinRustAsync>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync({dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required NonCloneSimpleTwinRustAsync b,
      dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgMutBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint});

  Future<int>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodGetterTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodReturnOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewCustomNameTwinRustAsyncMoi(
          {dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewTwinRustAsyncMoi({dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewWithResultTwinRustAsyncMoi(
          {dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodArgBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint});

  Future<void>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodArgMutBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint});

  Future<void> nonCloneSimpleTwinRustAsyncMoiStaticMethodArgOwnTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodReturnOwnTwinRustAsyncMoi(
          {dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required NonCloneSimpleTwinRustAsyncMoi b,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi borrow,
      required NonCloneSimpleTwinRustAsyncMoi mutBorrow,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinRustAsyncMoi(
      {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncMoi(
      {dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required String b,
      dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncMoi(
      {required BoxMyTraitTwinRustAsyncMoi arg, dynamic hint});

  Future<BoxMyTraitTwinRustAsyncMoi>
      rustAutoOpaquePlusSignReturnTwinRustAsyncMoi({dynamic hint});

  Future<OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncMoi({dynamic hint});

  Future<OpaqueTwoTwinRustAsyncMoi>
      rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncMoi({dynamic hint});

  Future<NonCloneSimpleTwinRustAsyncMoi>
      rustAutoOpaqueReturnOwnTwinRustAsyncMoi(
          {required int initial, dynamic hint});

  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncMoi(
          {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
          dynamic hint});

  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncMoi(
          {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
          dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
      dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinRustAsyncMoi>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncMoi(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint});

  Future<BoxHelloTraitTwinRustAsyncMoi>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncMoi({dynamic hint});

  Future<BoxHelloTraitTwinRustAsyncMoi>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncMoi({dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required NonCloneSimpleTwinRustAsyncMoi b,
      dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  void nonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  int nonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint});

  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewCustomNameTwinSync(
      {dynamic hint});

  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewTwinSync({dynamic hint});

  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewWithResultTwinSync(
      {dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint});

  void nonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint});

  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync(
      {dynamic hint});

  void rustAutoOpaqueArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg, required int expect, dynamic hint});

  void rustAutoOpaqueArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg,
      required int expect,
      required int adder,
      dynamic hint});

  NonCloneSimpleTwinSync rustAutoOpaqueArgOwnAndReturnOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint});

  void rustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, required int expect, dynamic hint});

  int rustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint});

  int rustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow,
      dynamic hint});

  void rustAutoOpaqueCallableArgTwinSync(
      {required BoxFnStringString arg, dynamic hint});

  BoxFnStringString rustAutoOpaqueCallableReturnTwinSync({dynamic hint});

  void rustAutoOpaqueNormalAndOpaqueArgTwinSync(
      {required NonCloneSimpleTwinSync a, required String b, dynamic hint});

  void rustAutoOpaquePlusSignArgTwinSync(
      {required BoxMyTraitTwinSync arg, dynamic hint});

  BoxMyTraitTwinSync rustAutoOpaquePlusSignReturnTwinSync({dynamic hint});

  OpaqueOneTwinSyncOpaqueTwoTwinSync
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinSync({dynamic hint});

  OpaqueTwoTwinSync rustAutoOpaqueReturnOpaqueTwoTwinSync({dynamic hint});

  NonCloneSimpleTwinSync rustAutoOpaqueReturnOwnTwinSync(
      {required int initial, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint});

  StructWithGoodAndOpaqueFieldTwinSync
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint});

  void rustAutoOpaqueTraitObjectArgBorrowTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgOwnTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint});

  BoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
      {dynamic hint});

  BoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
      {dynamic hint});

  void rustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint});

  void nonCloneSimpleTwinSyncMoiInstanceMethodArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint});

  void nonCloneSimpleTwinSyncMoiInstanceMethodArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint});

  void nonCloneSimpleTwinSyncMoiInstanceMethodArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint});

  int nonCloneSimpleTwinSyncMoiInstanceMethodGetterTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint});

  NonCloneSimpleTwinSyncMoi
      nonCloneSimpleTwinSyncMoiInstanceMethodReturnOwnTwinSyncMoi(
          {required NonCloneSimpleTwinSyncMoi that, dynamic hint});

  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewCustomNameTwinSyncMoi(
      {dynamic hint});

  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewTwinSyncMoi(
      {dynamic hint});

  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewWithResultTwinSyncMoi(
      {dynamic hint});

  void nonCloneSimpleTwinSyncMoiStaticMethodArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint});

  void nonCloneSimpleTwinSyncMoiStaticMethodArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint});

  void nonCloneSimpleTwinSyncMoiStaticMethodArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint});

  NonCloneSimpleTwinSyncMoi
      nonCloneSimpleTwinSyncMoiStaticMethodReturnOwnTwinSyncMoi({dynamic hint});

  void rustAutoOpaqueArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      dynamic hint});

  void rustAutoOpaqueArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      required int adder,
      dynamic hint});

  NonCloneSimpleTwinSyncMoi rustAutoOpaqueArgOwnAndReturnOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint});

  void rustAutoOpaqueArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      dynamic hint});

  int rustAutoOpaqueBorrowAndBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a,
      required NonCloneSimpleTwinSyncMoi b,
      dynamic hint});

  int rustAutoOpaqueBorrowAndMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi borrow,
      required NonCloneSimpleTwinSyncMoi mutBorrow,
      dynamic hint});

  void rustAutoOpaqueCallableArgTwinSyncMoi(
      {required BoxFnStringString arg, dynamic hint});

  BoxFnStringString rustAutoOpaqueCallableReturnTwinSyncMoi({dynamic hint});

  void rustAutoOpaqueNormalAndOpaqueArgTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a, required String b, dynamic hint});

  void rustAutoOpaquePlusSignArgTwinSyncMoi(
      {required BoxMyTraitTwinSyncMoi arg, dynamic hint});

  BoxMyTraitTwinSyncMoi rustAutoOpaquePlusSignReturnTwinSyncMoi({dynamic hint});

  OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncMoi({dynamic hint});

  OpaqueTwoTwinSyncMoi rustAutoOpaqueReturnOpaqueTwoTwinSyncMoi({dynamic hint});

  NonCloneSimpleTwinSyncMoi rustAutoOpaqueReturnOwnTwinSyncMoi(
      {required int initial, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint});

  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint});

  StructWithGoodAndOpaqueFieldTwinSyncMoi
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncMoi(
          {dynamic hint});

  void rustAutoOpaqueTraitObjectArgBorrowTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint});

  void rustAutoOpaqueTraitObjectArgOwnTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint});

  BoxHelloTraitTwinSyncMoi rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncMoi(
      {dynamic hint});

  BoxHelloTraitTwinSyncMoi rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncMoi(
      {dynamic hint});

  void rustAutoOpaqueTwoArgsTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a,
      required NonCloneSimpleTwinSyncMoi b,
      dynamic hint});

  FrbOpaqueSyncReturnTwinMoi frbSyncGeneratorTestTwinMoi({dynamic hint});

  NonCloneDataTwinMoi syncCreateNonCloneTwinMoi({dynamic hint});

  HideDataAnotherTwinMoi syncCreateOpaqueTwinMoi({dynamic hint});

  HideDataAnotherTwinMoi? syncOptionRustOpaqueTwinMoi({dynamic hint});

  Future<EnumOpaqueTwinMoiArray5> createArrayOpaqueEnumTwinMoi({dynamic hint});

  Future<OpaqueNestedTwinMoi> createNestedOpaqueTwinMoi({dynamic hint});

  Future<HideDataTwinMoi> createOpaqueTwinMoi({dynamic hint});

  Future<HideDataTwinMoi?> createOptionOpaqueTwinMoi(
      {HideDataTwinMoi? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinMoi> frbGeneratorTestTwinMoi({dynamic hint});

  Future<void> opaqueArrayRunTwinMoi(
      {required HideDataTwinMoiArray2 data, dynamic hint});

  Future<HideDataTwinMoiArray2> opaqueArrayTwinMoi({dynamic hint});

  Future<void> opaqueVecRunTwinMoi(
      {required List<HideDataTwinMoi> data, dynamic hint});

  Future<List<HideDataTwinMoi>> opaqueVecTwinMoi({dynamic hint});

  Future<String> runEnumOpaqueTwinMoi(
      {required EnumOpaqueTwinMoi opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinMoi(
      {required OpaqueNestedTwinMoi opaque, dynamic hint});

  Future<String> runNonCloneTwinMoi(
      {required NonCloneDataTwinMoi clone, dynamic hint});

  Future<String> runOpaqueTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint});

  Future<EnumOpaqueTwinRustAsyncArray5> createArrayOpaqueEnumTwinRustAsync(
      {dynamic hint});

  Future<OpaqueNestedTwinRustAsync> createNestedOpaqueTwinRustAsync(
      {dynamic hint});

  Future<HideDataTwinRustAsync> createOpaqueTwinRustAsync({dynamic hint});

  Future<HideDataTwinRustAsync?> createOptionOpaqueTwinRustAsync(
      {HideDataTwinRustAsync? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinRustAsync> frbGeneratorTestTwinRustAsync(
      {dynamic hint});

  Future<void> opaqueArrayRunTwinRustAsync(
      {required HideDataTwinRustAsyncArray2 data, dynamic hint});

  Future<HideDataTwinRustAsyncArray2> opaqueArrayTwinRustAsync({dynamic hint});

  Future<void> opaqueVecRunTwinRustAsync(
      {required List<HideDataTwinRustAsync> data, dynamic hint});

  Future<List<HideDataTwinRustAsync>> opaqueVecTwinRustAsync({dynamic hint});

  Future<String> runEnumOpaqueTwinRustAsync(
      {required EnumOpaqueTwinRustAsync opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinRustAsync(
      {required OpaqueNestedTwinRustAsync opaque, dynamic hint});

  Future<String> runNonCloneTwinRustAsync(
      {required NonCloneDataTwinRustAsync clone, dynamic hint});

  Future<String> runOpaqueTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint});

  Future<EnumOpaqueTwinRustAsyncMoiArray5>
      createArrayOpaqueEnumTwinRustAsyncMoi({dynamic hint});

  Future<OpaqueNestedTwinRustAsyncMoi> createNestedOpaqueTwinRustAsyncMoi(
      {dynamic hint});

  Future<HideDataTwinRustAsyncMoi> createOpaqueTwinRustAsyncMoi({dynamic hint});

  Future<HideDataTwinRustAsyncMoi?> createOptionOpaqueTwinRustAsyncMoi(
      {HideDataTwinRustAsyncMoi? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinRustAsyncMoi> frbGeneratorTestTwinRustAsyncMoi(
      {dynamic hint});

  Future<void> opaqueArrayRunTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoiArray2 data, dynamic hint});

  Future<HideDataTwinRustAsyncMoiArray2> opaqueArrayTwinRustAsyncMoi(
      {dynamic hint});

  Future<void> opaqueVecRunTwinRustAsyncMoi(
      {required List<HideDataTwinRustAsyncMoi> data, dynamic hint});

  Future<List<HideDataTwinRustAsyncMoi>> opaqueVecTwinRustAsyncMoi(
      {dynamic hint});

  Future<String> runEnumOpaqueTwinRustAsyncMoi(
      {required EnumOpaqueTwinRustAsyncMoi opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinRustAsyncMoi(
      {required OpaqueNestedTwinRustAsyncMoi opaque, dynamic hint});

  Future<String> runNonCloneTwinRustAsyncMoi(
      {required NonCloneDataTwinRustAsyncMoi clone, dynamic hint});

  Future<String> runOpaqueTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint});

  EnumOpaqueTwinSyncArray5 createArrayOpaqueEnumTwinSync({dynamic hint});

  OpaqueNestedTwinSync createNestedOpaqueTwinSync({dynamic hint});

  HideDataTwinSync createOpaqueTwinSync({dynamic hint});

  HideDataTwinSync? createOptionOpaqueTwinSync(
      {HideDataTwinSync? opaque, dynamic hint});

  FrbOpaqueReturnTwinSync frbGeneratorTestTwinSync({dynamic hint});

  void opaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data, dynamic hint});

  HideDataTwinSyncArray2 opaqueArrayTwinSync({dynamic hint});

  void opaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data, dynamic hint});

  List<HideDataTwinSync> opaqueVecTwinSync({dynamic hint});

  String runEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint});

  void runNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint});

  String runNonCloneTwinSync(
      {required NonCloneDataTwinSync clone, dynamic hint});

  String runOpaqueTwinSync({required HideDataTwinSync opaque, dynamic hint});

  String runOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque, dynamic hint});

  String unwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint});

  EnumOpaqueTwinSyncMoiArray5 createArrayOpaqueEnumTwinSyncMoi({dynamic hint});

  OpaqueNestedTwinSyncMoi createNestedOpaqueTwinSyncMoi({dynamic hint});

  HideDataTwinSyncMoi createOpaqueTwinSyncMoi({dynamic hint});

  HideDataTwinSyncMoi? createOptionOpaqueTwinSyncMoi(
      {HideDataTwinSyncMoi? opaque, dynamic hint});

  FrbOpaqueReturnTwinSyncMoi frbGeneratorTestTwinSyncMoi({dynamic hint});

  void opaqueArrayRunTwinSyncMoi(
      {required HideDataTwinSyncMoiArray2 data, dynamic hint});

  HideDataTwinSyncMoiArray2 opaqueArrayTwinSyncMoi({dynamic hint});

  void opaqueVecRunTwinSyncMoi(
      {required List<HideDataTwinSyncMoi> data, dynamic hint});

  List<HideDataTwinSyncMoi> opaqueVecTwinSyncMoi({dynamic hint});

  String runEnumOpaqueTwinSyncMoi(
      {required EnumOpaqueTwinSyncMoi opaque, dynamic hint});

  void runNestedOpaqueTwinSyncMoi(
      {required OpaqueNestedTwinSyncMoi opaque, dynamic hint});

  String runNonCloneTwinSyncMoi(
      {required NonCloneDataTwinSyncMoi clone, dynamic hint});

  String runOpaqueTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint});

  String runOpaqueWithDelayTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint});

  String unwrapRustOpaqueTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint});

  Future<int> simpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint});

  int simpleAdderTwinSync({required int a, required int b, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinRustAsync({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinRustAsync({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinRustAsync(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinRustAsync> handleStreamOfStructTwinRustAsync(
      {dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt1TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt2TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinRustAsync> handleStreamSinkAt3TwinRustAsync(
      {required int key, required int max, dynamic hint});

  Future<StructWithOneFieldTwinRustAsync> funcStructWithOneFieldTwinRustAsync(
      {required StructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithTwoFieldTwinRustAsync> funcStructWithTwoFieldTwinRustAsync(
      {required StructWithTwoFieldTwinRustAsync arg, dynamic hint});

  Future<StructWithZeroFieldTwinRustAsync> funcStructWithZeroFieldTwinRustAsync(
      {required StructWithZeroFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinRustAsync>
      funcTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinRustAsync>
      funcTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint});

  StructWithOneFieldTwinSync funcStructWithOneFieldTwinSync(
      {required StructWithOneFieldTwinSync arg, dynamic hint});

  StructWithTwoFieldTwinSync funcStructWithTwoFieldTwinSync(
      {required StructWithTwoFieldTwinSync arg, dynamic hint});

  StructWithZeroFieldTwinSync funcStructWithZeroFieldTwinSync(
      {required StructWithZeroFieldTwinSync arg, dynamic hint});

  TupleStructWithOneFieldTwinSync funcTupleStructWithOneFieldTwinSync(
      {required TupleStructWithOneFieldTwinSync arg, dynamic hint});

  TupleStructWithTwoFieldTwinSync funcTupleStructWithTwoFieldTwinSync(
      {required TupleStructWithTwoFieldTwinSync arg, dynamic hint});

  Future<void> testTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinRustAsync(
      {(String, int)? value, dynamic hint});

  void testTuple2TwinSync({required List<(String, int)> value, dynamic hint});

  (String, int) testTupleTwinSync({(String, int)? value, dynamic hint});

  Future<int> handleTypeAliasIdTwinRustAsync(
      {required int input, dynamic hint});

  Future<TestModelTwinRustAsync> handleTypeAliasModelTwinRustAsync(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinRustAsync(
      {required int input, dynamic hint});

  int handleTypeAliasIdTwinSync({required int input, dynamic hint});

  TestModelTwinSync handleTypeAliasModelTwinSync(
      {required int input, dynamic hint});

  int handleTypeNestAliasIdTwinSync({required int input, dynamic hint});

  Future<MoreThanJustOneRawStringStructTwinNormal>
      testMoreThanJustOneRawStringStructTwinNormal({dynamic hint});

  Future<RawStringItemStructTwinNormal> testRawStringItemStructTwinNormal(
      {dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<int> nonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewCustomNameTwinNormal({dynamic hint});

  Future<NonCloneSimpleTwinNormal> nonCloneSimpleTwinNormalNewTwinNormal(
      {dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewWithResultTwinNormal({dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> nonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal({dynamic hint});

  Future<void> rustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<void> rustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint});

  Future<NonCloneSimpleTwinNormal> rustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint});

  Future<void> rustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint});

  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow,
      dynamic hint});

  Future<void> rustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg, dynamic hint});

  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinNormal(
      {dynamic hint});

  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b, dynamic hint});

  Future<void> rustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg, dynamic hint});

  Future<BoxMyTraitTwinNormal> rustAutoOpaquePlusSignReturnTwinNormal(
      {dynamic hint});

  Future<OpaqueOneTwinNormalOpaqueTwoTwinNormal>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal({dynamic hint});

  Future<OpaqueTwoTwinNormal> rustAutoOpaqueReturnOpaqueTwoTwinNormal(
      {dynamic hint});

  Future<NonCloneSimpleTwinNormal> rustAutoOpaqueReturnOwnTwinNormal(
      {required int initial, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint});

  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint});

  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint});

  Future<BoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinNormal({dynamic hint});

  Future<BoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal({dynamic hint});

  Future<void> rustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint});

  Future<EnumOpaqueTwinNormalArray5> createArrayOpaqueEnumTwinNormal(
      {dynamic hint});

  Future<OpaqueNestedTwinNormal> createNestedOpaqueTwinNormal({dynamic hint});

  Future<HideDataTwinNormal> createOpaqueTwinNormal({dynamic hint});

  Future<HideDataTwinNormal?> createOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque, dynamic hint});

  Future<FrbOpaqueReturnTwinNormal> frbGeneratorTestTwinNormal({dynamic hint});

  Future<void> opaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data, dynamic hint});

  Future<HideDataTwinNormalArray2> opaqueArrayTwinNormal({dynamic hint});

  Future<void> opaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data, dynamic hint});

  Future<List<HideDataTwinNormal>> opaqueVecTwinNormal({dynamic hint});

  Future<String> runEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint});

  Future<void> runNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint});

  Future<String> runNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone, dynamic hint});

  Future<String> runOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  Future<String> runOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  Future<String> unwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint});

  FrbOpaqueSyncReturnTwinNormal frbSyncGeneratorTestTwinNormal({dynamic hint});

  NonCloneDataTwinNormal syncCreateNonCloneTwinNormal({dynamic hint});

  HideDataAnotherTwinNormal syncCreateOpaqueTwinNormal({dynamic hint});

  HideDataAnotherTwinNormal? syncOptionRustOpaqueTwinNormal({dynamic hint});

  Future<int> simpleAdderTwinNormal(
      {required int a, required int b, dynamic hint});

  Stream<String> funcStreamReturnErrorTwinNormal({dynamic hint});

  Stream<String> funcStreamReturnPanicTwinNormal({dynamic hint});

  Stream<int> funcStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint});

  Stream<MyStreamEntryTwinNormal> handleStreamOfStructTwinNormal(
      {dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<LogTwinNormal> handleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint});

  Stream<String> funcStreamRealisticTwinNormal(
      {required String arg, dynamic hint});

  Future<StructWithOneFieldTwinNormal> funcStructWithOneFieldTwinNormal(
      {required StructWithOneFieldTwinNormal arg, dynamic hint});

  Future<StructWithTwoFieldTwinNormal> funcStructWithTwoFieldTwinNormal(
      {required StructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<StructWithZeroFieldTwinNormal> funcStructWithZeroFieldTwinNormal(
      {required StructWithZeroFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithOneFieldTwinNormal>
      funcTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint});

  Future<TupleStructWithTwoFieldTwinNormal>
      funcTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint});

  Future<void> testTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint});

  Future<(String, int)> testTupleTwinNormal(
      {(String, int)? value, dynamic hint});

  Future<int> handleTypeAliasIdTwinNormal({required int input, dynamic hint});

  Future<TestModelTwinNormal> handleTypeAliasModelTwinNormal(
      {required int input, dynamic hint});

  Future<int> handleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxFnStringStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleAPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleBPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFilePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinMoiOpaqueTwoTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinMoiOpaqueTwoTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinMoiOpaqueTwoTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSyncOpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncOpaqueTwoTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncOpaqueTwoTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormalOpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormalOpaqueTwoTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormalOpaqueTwoTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataAnotherTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_HideDataTwinSyncMoiPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I16;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I16;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I16Ptr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_I32Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncMoiPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncMoi;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncMoiPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<BlobTwinNormal> boxedBlobTwinNormal(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinNormalConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinNormal> funcTestIdTwinNormal(
      {required TestIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_normal",
        argNames: [],
      );

  @override
  Future<PointTwinNormalArray2> getComplexArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_normal",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinNormal(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinNormalConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_normal",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinNormalArray2> nestedIdTwinNormal(
      {required TestIdTwinNormalArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_normal_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinNormal> newMsgidTwinNormal(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinNormal> returnBoxedFeedIdTwinNormal(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinNormal(
      {required FeedIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinNormal(
      {required BlobTwinNormal blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinNormal(
      {required MessageIdTwinNormal id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_normal(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<int> funcAsyncSimpleAddTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncSimpleAddTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncSimpleAddTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_async_simple_add_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<void> funcAsyncVoidTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncAsyncVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncAsyncVoidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_async_void_twin_normal",
        argNames: [],
      );

  @override
  Future<String> simpleUseAsyncSpawn({required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSimpleUseAsyncSpawnConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleUseAsyncSpawnConstMeta => const TaskConstMeta(
        debugName: "simple_use_async_spawn",
        argNames: ["arg"],
      );

  @override
  Future<String> simpleUseAsyncSpawnBlocking(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSimpleUseAsyncSpawnBlockingConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleUseAsyncSpawnBlockingConstMeta =>
      const TaskConstMeta(
        debugName: "simple_use_async_spawn_blocking",
        argNames: ["arg"],
      );

  @override
  Future<void> handleCustomizedStructTwinNormal(
      {required CustomizedTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinNormal> nextUserIdTwinNormal(
      {required UserIdTwinNormal userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_normal(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinNormalConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinNormalConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_normal",
        argNames: ["userId"],
      );

  @override
  void benchmarkVoidSemiSerialize({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidSemiSerializeConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidSemiSerializeConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_semi_serialize",
        argNames: [],
      );

  @override
  Future<void> structWithCommentsTwinNormalInstanceMethodTwinNormal(
      {required StructWithCommentsTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_normal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinNormalInstanceMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinNormal_instance_method_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> structWithCommentsTwinNormalStaticMethodTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinNormalStaticMethodTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithCommentsTwinNormal_static_method_twin_normal",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_normal",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_normal",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_normal",
            argNames: [],
          );

  @override
  Future<bool> checkInitDone({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCheckInitDoneConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCheckInitDoneConstMeta => const TaskConstMeta(
        debugName: "check_init_done",
        argNames: [],
      );

  @override
  Future<void> initApp({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitAppConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<void> myInitOne({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kMyInitOneConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMyInitOneConstMeta => const TaskConstMeta(
        debugName: "my_init_one",
        argNames: [],
      );

  @override
  Future<void> myInitTwo({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kMyInitTwoConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMyInitTwoConstMeta => const TaskConstMeta(
        debugName: "my_init_two",
        argNames: [],
      );

  @override
  Future<void> rustCallDartLoopbackTwinNormal(
      {required FutureOr<DemoStructForRustCallDartTwinNormal> Function(
              DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartLoopbackTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_loopback_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartMultiTimesTwinNormal(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartMultiTimesTwinNormalConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartMultiTimesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_multi_times_twin_normal",
        argNames: ["callback", "numTimes"],
      );

  @override
  Future<void> rustCallDartOneArgTwinNormal(
      {required FutureOr<void> Function(String) callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartOneArgTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartOneArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_one_arg_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartReturnTwinNormal(
      {required FutureOr<String> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartReturnTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_return_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartSimpleTwinNormal(
      {required FutureOr<void> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartSimpleTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartSimpleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_simple_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartTwoArgsTwinNormal(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinNormal)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartTwoArgsTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartTwoArgsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_two_args_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartWithDartOpaqueArgTwinNormal(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartWithDartOpaqueArgTwinNormalConstMeta,
      argValues: [input, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartWithDartOpaqueArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_with_dart_opaque_arg_twin_normal",
        argNames: ["input", "callback"],
      );

  @override
  Future<Object> rustCallDartWithDartOpaqueResultTwinNormal(
      {required FutureOr<Object> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartWithDartOpaqueResultTwinNormalConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartWithDartOpaqueResultTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_with_dart_opaque_result_twin_normal",
        argNames: ["callback"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 53, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinNormal> createEnumDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinNormal> createNestedDartOpaqueTwinNormal(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_normal",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinNormal({required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_normal",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinNormal(
      {required EnumDartOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinNormal(
      {required DartOpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinNormal(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinNormal({Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinNormal(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinNormalConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinNormal(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinNormalConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_normal",
        argNames: ["id", "opaque"],
      );

  @override
  String syncAcceptDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kSyncAcceptDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncAcceptDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_accept_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object syncLoopbackTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncLoopbackTwinNormalConstMeta => const TaskConstMeta(
        debugName: "sync_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionDartOpaqueTwinNormal(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSyncOptionDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionDartOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Object? syncOptionLoopbackTwinNormal({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kSyncOptionLoopbackTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionLoopbackTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_loopback_twin_normal",
        argNames: ["opaque"],
      );

  @override
  String unwrapDartOpaqueTwinNormal({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kUnwrapDartOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapDartOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "unwrap_dart_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<EnumSimpleTwinNormal> funcEnumSimpleTwinNormal(
      {required EnumSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinNormal> funcEnumWithItemMixedTwinNormal(
      {required EnumWithItemMixedTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinNormal> funcEnumWithItemStructTwinNormal(
      {required EnumWithItemStructTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinNormal> funcEnumWithItemTupleTwinNormal(
      {required EnumWithItemTupleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinNormal> handleEnumParameterTwinNormal(
      {required WeekdaysTwinNormal weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_normal(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinNormalConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_normal",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinNormal> handleEnumStructTwinNormal(
      {required KitchenSinkTwinNormal val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_normal(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinNormalConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_enum_struct_twin_normal",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinNormal?> handleReturnEnumTwinNormal(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_return_enum_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinNormal?> multiplyByTenTwinNormal(
      {required MeasureTwinNormal measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_normal(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinNormalConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinNormalConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_normal",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinNormal(
      {required NoteTwinNormal note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_normal(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinNormalConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinNormalConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_normal",
        argNames: ["note"],
      );

  @override
  Future<String> eventTwinNormalAsStringTwinNormal(
      {required EventTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinNormalAsStringTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinNormalAsStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinNormal_as_string_twin_normal",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "close_event_listener_twin_normal",
        argNames: [],
      );

  @override
  Future<void> createEventTwinNormal(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinNormalConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinNormalConstMeta => const TaskConstMeta(
        debugName: "create_event_twin_normal",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinNormal> registerEventListenerTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_event_twin_normal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_normal",
        argNames: [],
      );

  @override
  Future<CustomStructTwinNormal> customStructTwinNormalNewTwinNormal(
      {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 96, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinNormalNewTwinNormalConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinNormal_new_twin_normal",
        argNames: ["message"],
      );

  @override
  Future<void> customStructTwinNormalNonstaticReturnCustomStructErrorTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 99, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalNonstaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_nonstatic_return_custom_struct_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> customStructTwinNormalNonstaticReturnCustomStructOkTwinNormal(
      {required CustomStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 100, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalNonstaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_nonstatic_return_custom_struct_ok_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> customStructTwinNormalStaticReturnCustomStructErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 97, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalStaticReturnCustomStructErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_static_return_custom_struct_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> customStructTwinNormalStaticReturnCustomStructOkTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 98, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta:
          kCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinNormalStaticReturnCustomStructOkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinNormal_static_return_custom_struct_ok_twin_normal",
            argNames: [],
          );

  @override
  Future<SomeStructTwinNormal> someStructTwinNormalNewTwinNormal(
      {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 91, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinNormalNewTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinNormal_new_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<int> someStructTwinNormalNonStaticReturnErrCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 94, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalNonStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_non_static_return_err_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinNormalNonStaticReturnOkCustomErrorTwinNormal(
      {required SomeStructTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 95, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalNonStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_non_static_return_ok_custom_error_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinNormalStaticReturnErrCustomErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 92, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalStaticReturnErrCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_static_return_err_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<int> someStructTwinNormalStaticReturnOkCustomErrorTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 93, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta:
          kSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinNormalStaticReturnOkCustomErrorTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinNormal_static_return_ok_custom_error_twin_normal",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 77, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_normal,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinNormal(
      {required CustomNestedErrorOuterTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 78, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_normal,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinNormal(
      {required CustomStructErrorTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 79, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_normal,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_normal",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 89, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kPanicWithCustomResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 83, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kReturnCustomNestedError1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 84, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_normal,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError2TwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 85, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_normal,
      ),
      constMeta: kReturnCustomNestedError2TwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_normal",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 86, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kReturnCustomStructErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 87, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_normal,
      ),
      constMeta: kReturnCustomStructOkTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 80, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnErrCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinNormal(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 82, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnErrorVariantTwinNormalConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_normal",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 81, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_normal,
      ),
      constMeta: kReturnOkCustomErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_normal",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 90, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 88, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinNormalConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_normal",
        argNames: [],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 104, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_normal",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 103, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_normal",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinNormal(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 102, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinNormalConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_normal",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinNormal(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 101, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinNormalConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_normal",
        argNames: ["myStruct"],
      );

  @override
  Future<AnotherMacroStructTwinNormal> anotherMacroStructTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 106, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_another_macro_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kAnotherMacroStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAnotherMacroStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "another_macro_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<MacroStruct> funcMacroStructTwinNormal(
      {required MacroStruct arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_macro_struct(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 105, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_macro_struct,
        decodeErrorData: null,
      ),
      constMeta: kFuncMacroStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncMacroStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_macro_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> funcHashMapI32I32TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 107, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapI32I32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapI32I32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_i32_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, Uint8List>> funcHashMapStringBytesTwinNormal(
      {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 111, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_bytes_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, KitchenSinkTwinNormal>>
      funcHashMapStringComplexEnumTwinNormal(
          {required Map<String, KitchenSinkTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 114, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringComplexEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringComplexEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_complex_enum_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, EnumSimpleTwinNormal>>
      funcHashMapStringSimpleEnumTwinNormal(
          {required Map<String, EnumSimpleTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 113, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringSimpleEnumTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringSimpleEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_simple_enum_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, String>> funcHashMapStringStringTwinNormal(
      {required Map<String, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 109, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, MySize>> funcHashMapStringStructTwinNormal(
      {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 112, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStructTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_struct_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Set<int>> funcHashSetI32TwinNormal(
      {required Set<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 108, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetI32TwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_hash_set_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Set<String>> funcHashSetStringTwinNormal(
      {required Set<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 110, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String> concatenateWithTwinNormalConcatenateStaticTwinNormal(
      {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 119, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalConcatenateStaticTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_concatenate_static_twin_normal",
            argNames: ["a", "b"],
          );

  @override
  Future<String> concatenateWithTwinNormalConcatenateTwinNormal(
      {required ConcatenateWithTwinNormal that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 118, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalConcatenateTwinNormalConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinNormalConcatenateTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinNormal_concatenate_twin_normal",
        argNames: ["that", "b"],
      );

  @override
  Stream<int>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormal(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 124, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStaticStreamSinkSingleArgTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_static_stream_sink_single_arg_twin_normal",
            argNames: [],
          );

  @override
  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormal(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 123, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStaticStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_static_stream_sink_twin_normal",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 122, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStreamSinkAt1TwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_stream_sink_at_1_twin_normal",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinNormal>
      concatenateWithTwinNormalHandleSomeStreamSinkTwinNormal(
          {required ConcatenateWithTwinNormal that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 121, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinNormalHandleSomeStreamSinkTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinNormal_handle_some_stream_sink_twin_normal",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinNormal> concatenateWithTwinNormalNewTwinNormal(
      {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 117, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalNewTwinNormalConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinNormal_new_twin_normal",
        argNames: ["a"],
      );

  @override
  Future<String> concatenateWithTwinNormalSimpleGetterTwinNormal(
      {required ConcatenateWithTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_normal(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 120, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinNormalSimpleGetterTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinNormal_simple_getter_twin_normal",
        argNames: ["that"],
      );

  @override
  Future<int> sumWithTwinNormalSumTwinNormal(
      {required SumWithTwinNormal that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_normal(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 125, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinNormalSumTwinNormalConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinNormalSumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinNormal_sum_twin_normal",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinNormalArray3> getSumArrayTwinNormal(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 116, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinNormalConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_normal",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinNormal> getSumStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 115, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_normal",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 129, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_normal",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinNormal(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 130, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_normal",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinNormal({required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 136, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinNormalConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_normal",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinNormal(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 137, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinNormalConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinNormalConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_normal",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 126, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 127, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_normal",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 133, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinNormalConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_normal",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinNormal(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 128, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinNormalConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinNormalConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_normal",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinNormal> mirrorStructStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 131, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_mirror_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_normal",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 132, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_normal",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinNormal(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 134, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinNormalConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinNormalConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_normal",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinNormal(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 135, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinNormalConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinNormalConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_normal",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinNormal>
      testContainsMirroredSubStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 144, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 142, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>> testListOfNestedEnumsMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 143, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 141, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 139, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinNormal(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 140, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinNormalConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_normal",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 138, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_normal",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinNormal> handleBigBuffersTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 148, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_big_buffers_twin_normal",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinNormal> handleComplexStructTwinNormal(
      {required MyTreeNodeTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 145, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinNormal> handleNestedStructTwinNormal(
      {required MyNestedStructTwinNormal s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_normal(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 147, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinNormal({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 151, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinNormalConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_normal",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinNormal(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 153, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinNormalConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_normal",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinNormal(
      {required List<int> v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 152, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinNormalConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_normal",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinNormal>> listOfPrimitiveEnumsTwinNormal(
      {required List<WeekdaysTwinNormal> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_normal(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 146, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinNormalConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_normal",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinNormal> testAbcEnumTwinNormal(
      {required AbcTwinNormal abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_normal(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 149, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinNormalConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_normal",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinNormal> testStructWithEnumTwinNormal(
      {required StructWithEnumTwinNormal se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_normal(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 150, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinNormalConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_normal",
        argNames: ["se"],
      );

  @override
  Future<void> structInMiscNoTwinExampleASampleFunctionA(
      {required StructInMiscNoTwinExampleA that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 154, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructInMiscNoTwinExampleASampleFunctionAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructInMiscNoTwinExampleASampleFunctionAConstMeta =>
      const TaskConstMeta(
        debugName: "StructInMiscNoTwinExampleA_sample_function_a",
        argNames: ["that"],
      );

  @override
  Future<void> structWithImplBlockInMultiFileMethodInA(
      {required StructWithImplBlockInMultiFile that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 155, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithImplBlockInMultiFileMethodInAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithImplBlockInMultiFileMethodInAConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithImplBlockInMultiFile_method_in_a",
        argNames: ["that"],
      );

  @override
  Future<StructInMiscNoTwinExampleA>
      structInMiscNoTwinExampleBGetStructInMiscNoTwinExampleA(
          {required StructInMiscNoTwinExampleB that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 156, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA,
        decodeErrorData: null,
      ),
      constMeta:
          kStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructInMiscNoTwinExampleBGetStructInMiscNoTwinExampleAConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructInMiscNoTwinExampleB_get_struct_in_misc_no_twin_example_a",
            argNames: ["that"],
          );

  @override
  Future<void> structInMiscNoTwinExampleBSampleFunctionB(
      {required StructInMiscNoTwinExampleB that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 157, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructInMiscNoTwinExampleBSampleFunctionBConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructInMiscNoTwinExampleBSampleFunctionBConstMeta =>
      const TaskConstMeta(
        debugName: "StructInMiscNoTwinExampleB_sample_function_b",
        argNames: ["that"],
      );

  @override
  Future<void> structWithImplBlockInMultiFileMethodInB(
      {required StructWithImplBlockInMultiFile that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 158, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithImplBlockInMultiFileMethodInBConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithImplBlockInMultiFileMethodInBConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithImplBlockInMultiFile_method_in_b",
        argNames: ["that"],
      );

  @override
  Future<EmptyTwinNormal> emptyStructTwinNormal(
      {required EmptyTwinNormal empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_normal(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 162, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinNormalConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinNormalConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_normal",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 159, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinNormalConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_normal",
        argNames: [],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinNormal(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 160, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinNormalConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_normal",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinNormal(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 161, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinNormalConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_string_list_twin_normal",
        argNames: ["names"],
      );

  @override
  Future<NewTypeIntTwinNormal> handleNewtypeTwinNormal(
      {required NewTypeIntTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 163, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinNormal(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 167, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinNormal(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinNormal? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_normal(structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 169, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinNormalConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_normal",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinNormal?> handleOptionalIncrementTwinNormal(
      {ExoticOptionalsTwinNormal? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 166, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinNormal(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 164, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinNormalConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_normal",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinNormal?> handleOptionalStructTwinNormal(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 165, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinNormalConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_normal",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinNormal> handleVecOfOptsTwinNormal(
      {required OptVecsTwinNormal opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_normal(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 168, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinNormalConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinNormalConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_normal",
        argNames: ["opt"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinNormal(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 170, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<VecOfPrimitivePackTwinNormal> handleVecOfPrimitiveTwinNormal(
      {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 171, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinNormalConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_normal",
        argNames: ["n"],
      );

  @override
  Future<int> primitiveTypesTwinNormal(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 172, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinNormalConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinNormalConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_normal",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinNormal({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 173, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinNormalConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinNormalConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_normal",
        argNames: ["myU32"],
      );

  @override
  Future<BlobTwinRustAsync> boxedBlobTwinRustAsync(
      {required U8Array1600 blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 178, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_rust_async",
        argNames: ["blob"],
      );

  @override
  Future<TestIdTwinRustAsync> funcTestIdTwinRustAsync(
      {required TestIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 182, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array5> getArrayTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 174, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<PointTwinRustAsyncArray2> getComplexArrayTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 175, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_complex_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<double> lastNumberTwinRustAsync(
      {required F64Array16 array, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 183, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinRustAsyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_rust_async",
        argNames: ["array"],
      );

  @override
  Future<TestIdTwinRustAsyncArray2> nestedIdTwinRustAsync(
      {required TestIdTwinRustAsyncArray4 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_rust_async_array_4(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 184, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<MessageIdTwinRustAsync> newMsgidTwinRustAsync(
      {required U8Array32 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 176, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<FeedIdTwinRustAsync> returnBoxedFeedIdTwinRustAsync(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 180, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array8> returnBoxedRawFeedIdTwinRustAsync(
      {required FeedIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 181, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<U8Array1600> useBoxedBlobTwinRustAsync(
      {required BlobTwinRustAsync blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 179, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_rust_async",
        argNames: ["blob"],
      );

  @override
  Future<U8Array32> useMsgidTwinRustAsync(
      {required MessageIdTwinRustAsync id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_rust_async(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 177, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_rust_async",
        argNames: ["id"],
      );

  @override
  BlobTwinSync boxedBlobTwinSync({required U8Array1600 blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_u_8_array_1600(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 189)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBoxedBlobTwinSyncConstMeta => const TaskConstMeta(
        debugName: "boxed_blob_twin_sync",
        argNames: ["blob"],
      );

  @override
  TestIdTwinSync funcTestIdTwinSync(
      {required TestIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_test_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 193)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTestIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTestIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_test_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array5 getArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 185)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_5,
        decodeErrorData: null,
      ),
      constMeta: kGetArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_array_twin_sync",
        argNames: [],
      );

  @override
  PointTwinSyncArray2 getComplexArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 186)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_point_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kGetComplexArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetComplexArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_complex_array_twin_sync",
        argNames: [],
      );

  @override
  double lastNumberTwinSync({required F64Array16 array, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64_array_16(array, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 194)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kLastNumberTwinSyncConstMeta,
      argValues: [array],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLastNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "last_number_twin_sync",
        argNames: ["array"],
      );

  @override
  TestIdTwinSyncArray2 nestedIdTwinSync(
      {required TestIdTwinSyncArray4 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_test_id_twin_sync_array_4(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 195)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_id_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kNestedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNestedIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "nested_id_twin_sync",
        argNames: ["id"],
      );

  @override
  MessageIdTwinSync newMsgidTwinSync({required U8Array32 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 187)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_message_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kNewMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNewMsgidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "new_msgid_twin_sync",
        argNames: ["id"],
      );

  @override
  FeedIdTwinSync returnBoxedFeedIdTwinSync(
      {required U8Array8 id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8_array_8(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 191)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_feed_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedFeedIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "return_boxed_feed_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array8 returnBoxedRawFeedIdTwinSync(
      {required FeedIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_feed_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 192)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_box_u_8_array_8,
        decodeErrorData: null,
      ),
      constMeta: kReturnBoxedRawFeedIdTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnBoxedRawFeedIdTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_boxed_raw_feed_id_twin_sync",
        argNames: ["id"],
      );

  @override
  U8Array1600 useBoxedBlobTwinSync({required BlobTwinSync blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 190)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_1600,
        decodeErrorData: null,
      ),
      constMeta: kUseBoxedBlobTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseBoxedBlobTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_boxed_blob_twin_sync",
        argNames: ["blob"],
      );

  @override
  U8Array32 useMsgidTwinSync({required MessageIdTwinSync id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_message_id_twin_sync(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 188)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8_array_32,
        decodeErrorData: null,
      ),
      constMeta: kUseMsgidTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseMsgidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_msgid_twin_sync",
        argNames: ["id"],
      );

  @override
  Future<void> handleCustomizedStructTwinRustAsync(
      {required CustomizedTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 197, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_rust_async",
        argNames: ["val"],
      );

  @override
  Future<UserIdTwinRustAsync> nextUserIdTwinRustAsync(
      {required UserIdTwinRustAsync userId, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_rust_async(userId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 198, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinRustAsyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_rust_async",
        argNames: ["userId"],
      );

  @override
  void handleCustomizedStructTwinSync(
      {required CustomizedTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_customized_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 201)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kHandleCustomizedStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleCustomizedStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_customized_struct_twin_sync",
        argNames: ["val"],
      );

  @override
  UserIdTwinSync nextUserIdTwinSync(
      {required UserIdTwinSync userId, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_user_id_twin_sync(userId, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 202)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_user_id_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kNextUserIdTwinSyncConstMeta,
      argValues: [userId],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNextUserIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "next_user_id_twin_sync",
        argNames: ["userId"],
      );

  @override
  Future<BasicGeneralEnumTwinNormal>
      exampleBasicTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required BasicGeneralEnumTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 220, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal>
      exampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required BasicPrimitiveEnumTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 219, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal> exampleBasicTypeBasicStructTwinNormalTwinNormal(
      {required BasicStructTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 221, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBasicStructTwinNormalTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_basic_struct_twin_normal_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<bool> exampleBasicTypeBoolTwinNormal(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 216, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> exampleBasicTypeBytesTwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 218, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bytes_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> exampleBasicTypeF32TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 214, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double> exampleBasicTypeF64TwinNormal(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 215, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI16TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 205, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI32TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 206, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI64TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 207, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI8TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 204, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeIsizeTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 212, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeIsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_isize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String> exampleBasicTypeStringTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 217, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU16TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 209, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU32TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 210, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU64TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 211, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU8TwinNormal({required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 208, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeUsizeTwinNormal(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 213, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeUsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_usize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<BasicGeneralEnumTwinNormal>>
      exampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required List<BasicGeneralEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 235, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinNormal>>
      exampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required List<BasicPrimitiveEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 234, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinNormal>>
      exampleBasicListTypeBasicStructTwinNormalTwinNormal(
          {required List<BasicStructTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 236, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>> exampleBasicListTypeBoolTwinNormal(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 232, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> exampleBasicListTypeF32TwinNormal(
      {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 230, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> exampleBasicListTypeF64TwinNormal(
      {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 231, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> exampleBasicListTypeI16TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 223, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> exampleBasicListTypeI32TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 224, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> exampleBasicListTypeI64TwinNormal(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 225, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> exampleBasicListTypeI8TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 222, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<String>> exampleBasicListTypeStringTwinNormal(
      {required List<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 233, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> exampleBasicListTypeU16TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 227, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> exampleBasicListTypeU32TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 228, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> exampleBasicListTypeU64TwinNormal(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 229, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> exampleBasicListTypeU8TwinNormal(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 226, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<List<BasicGeneralEnumTwinRustAsync>>
      exampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicGeneralEnumTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 250, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicPrimitiveEnumTwinRustAsync>>
      exampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required List<BasicPrimitiveEnumTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 249, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<BasicStructTwinRustAsync>>
      exampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required List<BasicStructTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 251, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<List<bool>> exampleBasicListTypeBoolTwinRustAsync(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 247, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Float32List> exampleBasicListTypeF32TwinRustAsync(
      {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 245, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Float64List> exampleBasicListTypeF64TwinRustAsync(
      {required List<double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 246, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int16List> exampleBasicListTypeI16TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 238, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int32List> exampleBasicListTypeI32TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 239, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int64List> exampleBasicListTypeI64TwinRustAsync(
      {required Int64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 240, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Int8List> exampleBasicListTypeI8TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 237, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<List<String>> exampleBasicListTypeStringTwinRustAsync(
      {required List<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 248, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint16List> exampleBasicListTypeU16TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 242, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint32List> exampleBasicListTypeU32TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 243, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint64List> exampleBasicListTypeU64TwinRustAsync(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 244, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> exampleBasicListTypeU8TwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 241, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  List<BasicGeneralEnumTwinSync>
      exampleBasicListTypeBasicGeneralEnumTwinSyncTwinSync(
          {required List<BasicGeneralEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 265)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<BasicPrimitiveEnumTwinSync>
      exampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required List<BasicPrimitiveEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 264)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicListTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_list_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  List<BasicStructTwinSync> exampleBasicListTypeBasicStructTwinSyncTwinSync(
      {required List<BasicStructTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 266)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeBasicStructTwinSyncTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_basic_struct_twin_sync_twin_sync",
        argNames: ["arg"],
      );

  @override
  List<bool> exampleBasicListTypeBoolTwinSync(
      {required List<bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 262)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  Float32List exampleBasicListTypeF32TwinSync(
      {required List<double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 260)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Float64List exampleBasicListTypeF64TwinSync(
      {required List<double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_f_64_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 261)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_f_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int16List exampleBasicListTypeI16TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 253)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int32List exampleBasicListTypeI32TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 254)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int64List exampleBasicListTypeI64TwinSync(
      {required Int64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 255)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Int8List exampleBasicListTypeI8TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_i_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 252)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_i_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  List<String> exampleBasicListTypeStringTwinSync(
      {required List<String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 263)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeStringTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint16List exampleBasicListTypeU16TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_16_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 257)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_16_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint32List exampleBasicListTypeU32TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_32_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 258)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_32_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint64List exampleBasicListTypeU64TwinSync(
      {required Uint64List arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_64_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 259)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint8List exampleBasicListTypeU8TwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 256)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicListTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicListTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_list_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, BasicGeneralEnumTwinNormal>>
      exampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormal(
          {required Map<int, BasicGeneralEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 283, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinNormal>>
      exampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {required Map<int, BasicPrimitiveEnumTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 282, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinNormal>>
      exampleBasicMapTypeBasicStructTwinNormalTwinNormal(
          {required Map<int, BasicStructTwinNormal> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 284, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>> exampleBasicMapTypeBoolTwinNormal(
      {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 279, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinNormal(
      {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 281, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bytes_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, double>> exampleBasicMapTypeF32TwinNormal(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 277, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, double>> exampleBasicMapTypeF64TwinNormal(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 278, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI16TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 268, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI32TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 269, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI64TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 270, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI8TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 267, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeIsizeTwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 275, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeIsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_isize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, String>> exampleBasicMapTypeStringTwinNormal(
      {required Map<int, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 280, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU16TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 272, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU32TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 273, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU64TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 274, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU8TwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 271, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeUsizeTwinNormal(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 276, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeUsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_usize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, BasicGeneralEnumTwinRustAsync>>
      exampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicGeneralEnumTwinRustAsync> arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 301, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicPrimitiveEnumTwinRustAsync>>
      exampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicPrimitiveEnumTwinRustAsync> arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 300, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, BasicStructTwinRustAsync>>
      exampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required Map<int, BasicStructTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 302, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<Map<int, bool>> exampleBasicMapTypeBoolTwinRustAsync(
      {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 297, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, Uint8List>> exampleBasicMapTypeBytesTwinRustAsync(
      {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 299, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bytes_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, double>> exampleBasicMapTypeF32TwinRustAsync(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 295, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, double>> exampleBasicMapTypeF64TwinRustAsync(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 296, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI16TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 286, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 287, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI64TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 288, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeI8TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 285, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeIsizeTwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 293, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeIsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_isize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, String>> exampleBasicMapTypeStringTwinRustAsync(
      {required Map<int, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 298, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU16TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 290, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 291, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU64TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 292, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeU8TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 289, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<int, int>> exampleBasicMapTypeUsizeTwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 294, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeUsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_usize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Map<int, BasicGeneralEnumTwinSync>
      exampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSync(
          {required Map<int, BasicGeneralEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 319)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicPrimitiveEnumTwinSync>
      exampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {required Map<int, BasicPrimitiveEnumTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 318)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicMapTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_map_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  Map<int, BasicStructTwinSync> exampleBasicMapTypeBasicStructTwinSyncTwinSync(
      {required Map<int, BasicStructTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 320)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBasicStructTwinSyncTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_basic_struct_twin_sync_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, bool> exampleBasicMapTypeBoolTwinSync(
      {required Map<int, bool> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 315)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, Uint8List> exampleBasicMapTypeBytesTwinSync(
      {required Map<int, Uint8List> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 317)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_bytes_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, double> exampleBasicMapTypeF32TwinSync(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 313)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, double> exampleBasicMapTypeF64TwinSync(
      {required Map<int, double> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 314)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeI16TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 304)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeI32TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 305)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeI64TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 306)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeI8TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 303)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeIsizeTwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 311)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeIsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_isize_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, String> exampleBasicMapTypeStringTwinSync(
      {required Map<int, String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 316)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeStringTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeU16TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 308)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeU32TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 309)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeU64TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 310)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeU8TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 307)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<int, int> exampleBasicMapTypeUsizeTwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 312)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicMapTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicMapTypeUsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_map_type_usize_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<BasicGeneralEnumTwinNormal?>
      exampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormal(
          {BasicGeneralEnumTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 337, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicGeneralEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinNormal?>
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormal(
          {BasicPrimitiveEnumTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 336, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicPrimitiveEnumTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinNormal?>
      exampleBasicOptionalTypeBasicStructTwinNormalTwinNormal(
          {BasicStructTwinNormal? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_normal(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 338, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicStructTwinNormalTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_normal_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<bool?> exampleBasicOptionalTypeBoolTwinNormal(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 333, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBoolTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBoolTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bool_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List?> exampleBasicOptionalTypeBytesTwinNormal(
      {Uint8List? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 335, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBytesTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bytes_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleBasicOptionalTypeF32TwinNormal(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 331, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleBasicOptionalTypeF64TwinNormal(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 332, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI16TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 322, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI32TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 323, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI64TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 324, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI8TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 321, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeIsizeTwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 329, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeIsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeIsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_isize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<String?> exampleBasicOptionalTypeStringTwinNormal(
      {String? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 334, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeStringTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeStringTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_string_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU16TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 326, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU16TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU16TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u16_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU32TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 327, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU32TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU32TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u32_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU64TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 328, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU64TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU64TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u64_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU8TwinNormal({int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 325, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU8TwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU8TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u8_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeUsizeTwinNormal(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 330, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeUsizeTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeUsizeTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_usize_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<BasicGeneralEnumTwinRustAsync?>
      exampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {BasicGeneralEnumTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 355, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync?>
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {BasicPrimitiveEnumTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 354, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync?>
      exampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsync(
          {BasicStructTwinRustAsync? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 356, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<bool?> exampleBasicOptionalTypeBoolTwinRustAsync(
      {bool? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 351, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List?> exampleBasicOptionalTypeBytesTwinRustAsync(
      {Uint8List? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 353, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bytes_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleBasicOptionalTypeF32TwinRustAsync(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 349, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double?> exampleBasicOptionalTypeF64TwinRustAsync(
      {double? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 350, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI16TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 340, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI32TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 341, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI64TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 342, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeI8TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 339, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeIsizeTwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 347, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeIsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_isize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<String?> exampleBasicOptionalTypeStringTwinRustAsync(
      {String? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 352, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU16TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 344, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU32TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 345, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU64TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 346, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeU8TwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 343, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int?> exampleBasicOptionalTypeUsizeTwinRustAsync(
      {int? arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 348, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeUsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_usize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  BasicGeneralEnumTwinSync?
      exampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSync(
          {BasicGeneralEnumTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 373)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync?
      exampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSync(
          {BasicPrimitiveEnumTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 372)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync? exampleBasicOptionalTypeBasicStructTwinSyncTwinSync(
      {BasicStructTwinSync? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 374)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicOptionalTypeBasicStructTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_optional_type_basic_struct_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  bool? exampleBasicOptionalTypeBoolTwinSync({bool? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 369)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint8List? exampleBasicOptionalTypeBytesTwinSync(
      {Uint8List? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 371)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_bytes_twin_sync",
        argNames: ["arg"],
      );

  @override
  double? exampleBasicOptionalTypeF32TwinSync({double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 367)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  double? exampleBasicOptionalTypeF64TwinSync({double? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 368)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeI16TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 358)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeI32TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 359)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeI64TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 360)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeI8TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 357)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeI8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeIsizeTwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 365)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeIsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_isize_twin_sync",
        argNames: ["arg"],
      );

  @override
  String? exampleBasicOptionalTypeStringTwinSync({String? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 370)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeStringTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeU16TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 362)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeU32TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 363)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeU64TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 364)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeU8TwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 361)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeU8TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int? exampleBasicOptionalTypeUsizeTwinSync({int? arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 366)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicOptionalTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicOptionalTypeUsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_optional_type_usize_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<BasicGeneralEnumTwinRustAsync>
      exampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsync(
          {required BasicGeneralEnumTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 391, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicGeneralEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicPrimitiveEnumTwinRustAsync>
      exampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsync(
          {required BasicPrimitiveEnumTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 390, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicPrimitiveEnumTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<BasicStructTwinRustAsync>
      exampleBasicTypeBasicStructTwinRustAsyncTwinRustAsync(
          {required BasicStructTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 392, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicStructTwinRustAsyncTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_struct_twin_rust_async_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<bool> exampleBasicTypeBoolTwinRustAsync(
      {required bool arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 387, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBoolTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBoolTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bool_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Uint8List> exampleBasicTypeBytesTwinRustAsync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 389, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bytes_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double> exampleBasicTypeF32TwinRustAsync(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 385, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<double> exampleBasicTypeF64TwinRustAsync(
      {required double arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 386, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI16TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 376, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI32TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 377, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI64TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 378, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeI8TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 375, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeIsizeTwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 383, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeIsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeIsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_isize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<String> exampleBasicTypeStringTwinRustAsync(
      {required String arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 388, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU16TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 380, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU16TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU16TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u16_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU32TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 381, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU64TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 382, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU64TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU64TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u64_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeU8TwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 379, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU8TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU8TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u8_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> exampleBasicTypeUsizeTwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 384, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeUsizeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeUsizeTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_usize_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  BasicGeneralEnumTwinSync exampleBasicTypeBasicGeneralEnumTwinSyncTwinSync(
      {required BasicGeneralEnumTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_general_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 409)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_general_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicGeneralEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_general_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicPrimitiveEnumTwinSync exampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSync(
      {required BasicPrimitiveEnumTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_basic_primitive_enum_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 408)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_primitive_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kExampleBasicTypeBasicPrimitiveEnumTwinSyncTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "example_basic_type_basic_primitive_enum_twin_sync_twin_sync",
            argNames: ["arg"],
          );

  @override
  BasicStructTwinSync exampleBasicTypeBasicStructTwinSyncTwinSync(
      {required BasicStructTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_basic_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 410)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_basic_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBasicStructTwinSyncTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_basic_struct_twin_sync_twin_sync",
        argNames: ["arg"],
      );

  @override
  bool exampleBasicTypeBoolTwinSync({required bool arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 405)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBoolTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBoolTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bool_twin_sync",
        argNames: ["arg"],
      );

  @override
  Uint8List exampleBasicTypeBytesTwinSync(
      {required List<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 407)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_bytes_twin_sync",
        argNames: ["arg"],
      );

  @override
  double exampleBasicTypeF32TwinSync({required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 403)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f32_twin_sync",
        argNames: ["arg"],
      );

  @override
  double exampleBasicTypeF64TwinSync({required double arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 404)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeF64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeF64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_f64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeI16TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 394)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeI32TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 395)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeI64TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 396)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_i64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeI8TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 393)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeI8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeI8TwinSyncConstMeta => const TaskConstMeta(
        debugName: "example_basic_type_i8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeIsizeTwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_isize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 401)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_isize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeIsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeIsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_isize_twin_sync",
        argNames: ["arg"],
      );

  @override
  String exampleBasicTypeStringTwinSync({required String arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 406)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeStringTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeU16TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_16(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 398)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_16,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU16TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU16TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u16_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeU32TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 399)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU32TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u32_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeU64TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 400)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU64TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU64TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_u64_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeU8TwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_8(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 397)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_8,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeU8TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeU8TwinSyncConstMeta => const TaskConstMeta(
        debugName: "example_basic_type_u8_twin_sync",
        argNames: ["arg"],
      );

  @override
  int exampleBasicTypeUsizeTwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_usize(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 402)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_usize,
        decodeErrorData: null,
      ),
      constMeta: kExampleBasicTypeUsizeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kExampleBasicTypeUsizeTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "example_basic_type_usize_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<void> benchmarkBinaryTreeInputJsonTwinNormal(
      {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 418, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputJsonTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_json_twin_normal",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBinaryTreeInputProtobufTwinNormal(
      {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 416, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputProtobufTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_protobuf_twin_normal",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBinaryTreeInputTwinNormal(
      {required BenchmarkBinaryTreeTwinNormal tree, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 414, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputTwinNormalConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_twin_normal",
        argNames: ["tree"],
      );

  @override
  Future<String> benchmarkBinaryTreeOutputJsonTwinNormal(
      {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 419, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputJsonTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_json_twin_normal",
        argNames: ["depth"],
      );

  @override
  Future<Uint8List> benchmarkBinaryTreeOutputProtobufTwinNormal(
      {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 417, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputProtobufTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_protobuf_twin_normal",
        argNames: ["depth"],
      );

  @override
  Future<BenchmarkBinaryTreeTwinNormal> benchmarkBinaryTreeOutputTwinNormal(
      {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 415, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputTwinNormalConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_twin_normal",
        argNames: ["depth"],
      );

  @override
  Future<void> benchmarkBlobInputJsonTwinNormal(
      {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 424, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputJsonTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputJsonTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_json_twin_normal",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBlobInputProtobufTwinNormal(
      {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 422, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputProtobufTwinNormalConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputProtobufTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_protobuf_twin_normal",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBlobInputTwinNormal(
      {required BenchmarkBlobTwinNormal blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_normal(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 420, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputTwinNormalConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_twin_normal",
        argNames: ["blob"],
      );

  @override
  Future<String> benchmarkBlobOutputJsonTwinNormal(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 425, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputJsonTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputJsonTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_json_twin_normal",
        argNames: ["size"],
      );

  @override
  Future<Uint8List> benchmarkBlobOutputProtobufTwinNormal(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 423, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputProtobufTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputProtobufTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_protobuf_twin_normal",
        argNames: ["size"],
      );

  @override
  Future<BenchmarkBlobTwinNormal> benchmarkBlobOutputTwinNormal(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 421, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_twin_normal",
        argNames: ["size"],
      );

  @override
  Future<int> benchmarkInputBytesTwinNormal(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 412, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinNormalConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_normal",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinNormal(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 413, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinNormalConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_normal",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 411, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinNormalConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_normal",
        argNames: [],
      );

  @override
  Future<void> benchmarkBinaryTreeInputJsonTwinRustAsync(
      {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 433, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputJsonTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_json_twin_rust_async",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBinaryTreeInputProtobufTwinRustAsync(
      {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 431, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputProtobufTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_protobuf_twin_rust_async",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBinaryTreeInputTwinRustAsync(
      {required BenchmarkBinaryTreeTwinRustAsync tree, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
            tree, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 429, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputTwinRustAsyncConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_twin_rust_async",
        argNames: ["tree"],
      );

  @override
  Future<String> benchmarkBinaryTreeOutputJsonTwinRustAsync(
      {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 434, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputJsonTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_json_twin_rust_async",
        argNames: ["depth"],
      );

  @override
  Future<Uint8List> benchmarkBinaryTreeOutputProtobufTwinRustAsync(
      {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 432, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputProtobufTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_protobuf_twin_rust_async",
        argNames: ["depth"],
      );

  @override
  Future<BenchmarkBinaryTreeTwinRustAsync>
      benchmarkBinaryTreeOutputTwinRustAsync(
          {required int depth, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 430, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_twin_rust_async",
        argNames: ["depth"],
      );

  @override
  Future<void> benchmarkBlobInputJsonTwinRustAsync(
      {required String raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 439, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputJsonTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputJsonTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_json_twin_rust_async",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBlobInputProtobufTwinRustAsync(
      {required List<int> raw, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 437, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputProtobufTwinRustAsyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputProtobufTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_protobuf_twin_rust_async",
        argNames: ["raw"],
      );

  @override
  Future<void> benchmarkBlobInputTwinRustAsync(
      {required BenchmarkBlobTwinRustAsync blob, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_rust_async(blob, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 435, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputTwinRustAsyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_twin_rust_async",
        argNames: ["blob"],
      );

  @override
  Future<String> benchmarkBlobOutputJsonTwinRustAsync(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 440, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputJsonTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputJsonTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_json_twin_rust_async",
        argNames: ["size"],
      );

  @override
  Future<Uint8List> benchmarkBlobOutputProtobufTwinRustAsync(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 438, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputProtobufTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_protobuf_twin_rust_async",
        argNames: ["size"],
      );

  @override
  Future<BenchmarkBlobTwinRustAsync> benchmarkBlobOutputTwinRustAsync(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 436, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_twin_rust_async",
        argNames: ["size"],
      );

  @override
  Future<int> benchmarkInputBytesTwinRustAsync(
      {required List<int> bytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 427, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinRustAsyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_rust_async",
        argNames: ["bytes"],
      );

  @override
  Future<Uint8List> benchmarkOutputBytesTwinRustAsync(
      {required int size, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 428, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinRustAsyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_rust_async",
        argNames: ["size"],
      );

  @override
  Future<void> benchmarkVoidTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 426, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_rust_async",
        argNames: [],
      );

  @override
  void benchmarkBinaryTreeInputJsonTwinSync(
      {required String raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 448)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputJsonTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_json_twin_sync",
        argNames: ["raw"],
      );

  @override
  void benchmarkBinaryTreeInputProtobufTwinSync(
      {required List<int> raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 446)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputProtobufTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_protobuf_twin_sync",
        argNames: ["raw"],
      );

  @override
  void benchmarkBinaryTreeInputTwinSync(
      {required BenchmarkBinaryTreeTwinSync tree, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
            tree, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 444)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeInputTwinSyncConstMeta,
      argValues: [tree],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeInputTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_input_twin_sync",
        argNames: ["tree"],
      );

  @override
  String benchmarkBinaryTreeOutputJsonTwinSync(
      {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 449)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputJsonTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_json_twin_sync",
        argNames: ["depth"],
      );

  @override
  Uint8List benchmarkBinaryTreeOutputProtobufTwinSync(
      {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 447)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputProtobufTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_protobuf_twin_sync",
        argNames: ["depth"],
      );

  @override
  BenchmarkBinaryTreeTwinSync benchmarkBinaryTreeOutputTwinSync(
      {required int depth, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(depth, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 445)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_binary_tree_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBinaryTreeOutputTwinSyncConstMeta,
      argValues: [depth],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBinaryTreeOutputTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_binary_tree_output_twin_sync",
        argNames: ["depth"],
      );

  @override
  void benchmarkBlobInputJsonTwinSync({required String raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 454)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputJsonTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputJsonTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_json_twin_sync",
        argNames: ["raw"],
      );

  @override
  void benchmarkBlobInputProtobufTwinSync(
      {required List<int> raw, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(raw, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 452)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputProtobufTwinSyncConstMeta,
      argValues: [raw],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputProtobufTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_input_protobuf_twin_sync",
        argNames: ["raw"],
      );

  @override
  void benchmarkBlobInputTwinSync(
      {required BenchmarkBlobTwinSync blob, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_benchmark_blob_twin_sync(blob, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 450)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobInputTwinSyncConstMeta,
      argValues: [blob],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobInputTwinSyncConstMeta => const TaskConstMeta(
        debugName: "benchmark_blob_input_twin_sync",
        argNames: ["blob"],
      );

  @override
  String benchmarkBlobOutputJsonTwinSync({required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 455)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputJsonTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputJsonTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_json_twin_sync",
        argNames: ["size"],
      );

  @override
  Uint8List benchmarkBlobOutputProtobufTwinSync(
      {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 453)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputProtobufTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputProtobufTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_protobuf_twin_sync",
        argNames: ["size"],
      );

  @override
  BenchmarkBlobTwinSync benchmarkBlobOutputTwinSync(
      {required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 451)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_benchmark_blob_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkBlobOutputTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkBlobOutputTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_blob_output_twin_sync",
        argNames: ["size"],
      );

  @override
  int benchmarkInputBytesTwinSync({required List<int> bytes, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(bytes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 442)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkInputBytesTwinSyncConstMeta,
      argValues: [bytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkInputBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_input_bytes_twin_sync",
        argNames: ["bytes"],
      );

  @override
  Uint8List benchmarkOutputBytesTwinSync({required int size, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(size, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 443)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkOutputBytesTwinSyncConstMeta,
      argValues: [size],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkOutputBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "benchmark_output_bytes_twin_sync",
        argNames: ["size"],
      );

  @override
  void benchmarkVoidTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 441)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kBenchmarkVoidTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kBenchmarkVoidTwinSyncConstMeta => const TaskConstMeta(
        debugName: "benchmark_void_twin_sync",
        argNames: [],
      );

  @override
  Future<void> structWithCommentsTwinRustAsyncInstanceMethodTwinRustAsync(
      {required StructWithCommentsTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 460, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncInstanceMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsync_instance_method_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void> structWithCommentsTwinRustAsyncStaticMethodTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 459, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinRustAsyncStaticMethodTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "StructWithCommentsTwinRustAsync_static_method_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsSlashStarStarTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 458, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> functionWithCommentsTripleSlashMultiLineTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 457, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> functionWithCommentsTripleSlashSingleLineTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 456, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_rust_async",
            argNames: [],
          );

  @override
  void structWithCommentsTwinSyncInstanceMethodTwinSync(
      {required StructWithCommentsTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_comments_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 465)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kStructWithCommentsTwinSyncInstanceMethodTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "StructWithCommentsTwinSync_instance_method_twin_sync",
            argNames: ["that"],
          );

  @override
  void structWithCommentsTwinSyncStaticMethodTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 464)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStructWithCommentsTwinSyncStaticMethodTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "StructWithCommentsTwinSync_static_method_twin_sync",
        argNames: [],
      );

  @override
  void functionWithCommentsSlashStarStarTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 463)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsSlashStarStarTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFunctionWithCommentsSlashStarStarTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "function_with_comments_slash_star_star_twin_sync",
        argNames: [],
      );

  @override
  void functionWithCommentsTripleSlashMultiLineTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 462)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashMultiLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_multi_line_twin_sync",
            argNames: [],
          );

  @override
  void functionWithCommentsTripleSlashSingleLineTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 461)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kFunctionWithCommentsTripleSlashSingleLineTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "function_with_comments_triple_slash_single_line_twin_sync",
            argNames: [],
          );

  @override
  Future<void> rustCallDartLoopbackTwinRustAsync(
      {required FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
              DemoStructForRustCallDartTwinRustAsync)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 470, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartLoopbackTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartLoopbackTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_loopback_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartMultiTimesTwinRustAsync(
      {required FutureOr<void> Function() callback,
      required int numTimes,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        sse_encode_i_32(numTimes, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 473, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartMultiTimesTwinRustAsyncConstMeta,
      argValues: [callback, numTimes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartMultiTimesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_multi_times_twin_rust_async",
        argNames: ["callback", "numTimes"],
      );

  @override
  Future<void> rustCallDartOneArgTwinRustAsync(
      {required FutureOr<void> Function(String) callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 467, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartOneArgTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartOneArgTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_one_arg_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartReturnTwinRustAsync(
      {required FutureOr<String> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_String(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 469, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartReturnTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartReturnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_return_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartSimpleTwinRustAsync(
      {required FutureOr<void> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 466, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartSimpleTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartSimpleTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_simple_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartTwoArgsTwinRustAsync(
      {required FutureOr<void> Function(
              String, DemoStructForRustCallDartTwinRustAsync)
          callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 468, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartTwoArgsTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartTwoArgsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_two_args_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<void> rustCallDartWithDartOpaqueArgTwinRustAsync(
      {required Object input,
      required FutureOr<void> Function(Object) callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(input, serializer);
        sse_encode_DartFn_Inputs_DartOpaque_Output_unit(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 471, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta,
      argValues: [input, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartWithDartOpaqueArgTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_with_dart_opaque_arg_twin_rust_async",
        argNames: ["input", "callback"],
      );

  @override
  Future<Object> rustCallDartWithDartOpaqueResultTwinRustAsync(
      {required FutureOr<Object> Function() callback, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartFn_Inputs__Output_DartOpaque(callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 472, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta,
      argValues: [callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustCallDartWithDartOpaqueResultTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_call_dart_with_dart_opaque_result_twin_rust_async",
        argNames: ["callback"],
      );

  @override
  Future<String> asyncAcceptDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 474, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> cloneDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 489, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<EnumDartOpaqueTwinRustAsync> createEnumDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 485, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<DartOpaqueNestedTwinRustAsync> createNestedDartOpaqueTwinRustAsync(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 483, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_rust_async",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  Future<void> dropStaticDartOpaqueTwinRustAsync(
      {required int id, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 488, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_rust_async",
        argNames: ["id"],
      );

  @override
  Future<void> getEnumDartOpaqueTwinRustAsync(
      {required EnumDartOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 486, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> getNestedDartOpaqueTwinRustAsync(
      {required DartOpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 484, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackArrayGetTwinRustAsync(
      {required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 480, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_array_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<ObjectArray1> loopBackArrayTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 477, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackOptionGetTwinRustAsync({Object? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 479, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<Object?> loopBackOptionTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 476, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_option_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<Object> loopBackTwinRustAsync({required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 475, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> loopBackVecGetTwinRustAsync(
      {required List<Object> opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 481, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<List<Object>> loopBackVecTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 478, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> panicUnwrapDartOpaqueTwinRustAsync(
      {required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 482, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> setStaticDartOpaqueTwinRustAsync(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 487, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinRustAsyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_rust_async",
        argNames: ["id", "opaque"],
      );

  @override
  String asyncAcceptDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 490)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAsyncAcceptDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAsyncAcceptDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "async_accept_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  List<Object> cloneDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 505)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kCloneDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloneDartOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "clone_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  EnumDartOpaqueTwinSync createEnumDartOpaqueTwinSync(
      {required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 501)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_dart_opaque_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEnumDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_enum_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  DartOpaqueNestedTwinSync createNestedDartOpaqueTwinSync(
      {required Object opaque1, required Object opaque2, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque1, serializer);
        sse_encode_DartOpaque(opaque2, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 499)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_dart_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque1, opaque2],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_dart_opaque_twin_sync",
        argNames: ["opaque1", "opaque2"],
      );

  @override
  void dropStaticDartOpaqueTwinSync({required int id, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 504)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDropStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDropStaticDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "drop_static_dart_opaque_twin_sync",
        argNames: ["id"],
      );

  @override
  void getEnumDartOpaqueTwinSync(
      {required EnumDartOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_dart_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 502)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetEnumDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetEnumDartOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_enum_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void getNestedDartOpaqueTwinSync(
      {required DartOpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_dart_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 500)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kGetNestedDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNestedDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_nested_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackArrayGetTwinSync({required ObjectArray1 opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque_array_1(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 496)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  ObjectArray1 loopBackArrayTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 493)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque_array_1,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackArrayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_array_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackOptionGetTwinSync({Object? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 495)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  Object? loopBackOptionTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 492)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackOptionTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackOptionTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_option_twin_sync",
        argNames: ["opaque"],
      );

  @override
  Object loopBackTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 491)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void loopBackVecGetTwinSync({required List<Object> opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 497)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecGetTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecGetTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_get_twin_sync",
        argNames: ["opaque"],
      );

  @override
  List<Object> loopBackVecTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 494)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_DartOpaque,
        decodeErrorData: null,
      ),
      constMeta: kLoopBackVecTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kLoopBackVecTwinSyncConstMeta => const TaskConstMeta(
        debugName: "loop_back_vec_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void panicUnwrapDartOpaqueTwinSync({required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 498)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kPanicUnwrapDartOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicUnwrapDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_unwrap_dart_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void setStaticDartOpaqueTwinSync(
      {required int id, required Object opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(id, serializer);
        sse_encode_DartOpaque(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 503)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetStaticDartOpaqueTwinSyncConstMeta,
      argValues: [id, opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetStaticDartOpaqueTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "set_static_dart_opaque_twin_sync",
        argNames: ["id", "opaque"],
      );

  @override
  Future<EnumSimpleTwinRustAsync> funcEnumSimpleTwinRustAsync(
      {required EnumSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 506, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_simple_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemMixedTwinRustAsync> funcEnumWithItemMixedTwinRustAsync(
      {required EnumWithItemMixedTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 507, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemStructTwinRustAsync> funcEnumWithItemStructTwinRustAsync(
      {required EnumWithItemStructTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 509, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<EnumWithItemTupleTwinRustAsync> funcEnumWithItemTupleTwinRustAsync(
      {required EnumWithItemTupleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 508, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<WeekdaysTwinRustAsync> handleEnumParameterTwinRustAsync(
      {required WeekdaysTwinRustAsync weekday, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_rust_async(weekday, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 512, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinRustAsyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_rust_async",
        argNames: ["weekday"],
      );

  @override
  Future<KitchenSinkTwinRustAsync> handleEnumStructTwinRustAsync(
      {required KitchenSinkTwinRustAsync val, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_rust_async(val, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 514, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinRustAsyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_struct_twin_rust_async",
        argNames: ["val"],
      );

  @override
  Future<WeekdaysTwinRustAsync?> handleReturnEnumTwinRustAsync(
      {required String input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 511, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_return_enum_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<MeasureTwinRustAsync?> multiplyByTenTwinRustAsync(
      {required MeasureTwinRustAsync measure, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_rust_async(measure, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 513, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinRustAsyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_rust_async",
        argNames: ["measure"],
      );

  @override
  Future<Uint8List> printNoteTwinRustAsync(
      {required NoteTwinRustAsync note, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_rust_async(note, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 510, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinRustAsyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_rust_async",
        argNames: ["note"],
      );

  @override
  EnumSimpleTwinSync funcEnumSimpleTwinSync(
      {required EnumSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_enum_simple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 515)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumSimpleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumSimpleTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_enum_simple_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemMixedTwinSync funcEnumWithItemMixedTwinSync(
      {required EnumWithItemMixedTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 516)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_mixed_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemMixedTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemMixedTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_mixed_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemStructTwinSync funcEnumWithItemStructTwinSync(
      {required EnumWithItemStructTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_struct_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 518)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_struct_twin_sync",
        argNames: ["arg"],
      );

  @override
  EnumWithItemTupleTwinSync funcEnumWithItemTupleTwinSync(
      {required EnumWithItemTupleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 517)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_with_item_tuple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncEnumWithItemTupleTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncEnumWithItemTupleTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_enum_with_item_tuple_twin_sync",
        argNames: ["arg"],
      );

  @override
  WeekdaysTwinSync handleEnumParameterTwinSync(
      {required WeekdaysTwinSync weekday, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_weekdays_twin_sync(weekday, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 521)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumParameterTwinSyncConstMeta,
      argValues: [weekday],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumParameterTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_enum_parameter_twin_sync",
        argNames: ["weekday"],
      );

  @override
  KitchenSinkTwinSync handleEnumStructTwinSync(
      {required KitchenSinkTwinSync val, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_kitchen_sink_twin_sync(val, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 523)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleEnumStructTwinSyncConstMeta,
      argValues: [val],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleEnumStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_enum_struct_twin_sync",
        argNames: ["val"],
      );

  @override
  WeekdaysTwinSync? handleReturnEnumTwinSync(
      {required String input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 520)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleReturnEnumTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleReturnEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_return_enum_twin_sync",
        argNames: ["input"],
      );

  @override
  MeasureTwinSync? multiplyByTenTwinSync(
      {required MeasureTwinSync measure, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_measure_twin_sync(measure, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 522)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_measure_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kMultiplyByTenTwinSyncConstMeta,
      argValues: [measure],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMultiplyByTenTwinSyncConstMeta => const TaskConstMeta(
        debugName: "multiply_by_ten_twin_sync",
        argNames: ["measure"],
      );

  @override
  Uint8List printNoteTwinSync({required NoteTwinSync note, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_note_twin_sync(note, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 519)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kPrintNoteTwinSyncConstMeta,
      argValues: [note],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrintNoteTwinSyncConstMeta => const TaskConstMeta(
        debugName: "print_note_twin_sync",
        argNames: ["note"],
      );

  @override
  Future<String> eventTwinRustAsyncAsStringTwinRustAsync(
      {required EventTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_event_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 527, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kEventTwinRustAsyncAsStringTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEventTwinRustAsyncAsStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "EventTwinRustAsync_as_string_twin_rust_async",
        argNames: ["that"],
      );

  @override
  Future<void> closeEventListenerTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 525, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCloseEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCloseEventListenerTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "close_event_listener_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> createEventTwinRustAsync(
      {required String address, required String payload, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(address, serializer);
        sse_encode_String(payload, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 526, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCreateEventTwinRustAsyncConstMeta,
      argValues: [address, payload],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateEventTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "create_event_twin_rust_async",
        argNames: ["address", "payload"],
      );

  @override
  Stream<EventTwinRustAsync> registerEventListenerTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 524, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_event_twin_rust_async,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kRegisterEventListenerTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRegisterEventListenerTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "register_event_listener_twin_rust_async",
        argNames: [],
      );

  @override
  Future<CustomStructTwinRustAsync> customStructTwinRustAsyncNewTwinRustAsync(
      {required String message, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 552, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinRustAsync_new_twin_rust_async",
        argNames: ["message"],
      );

  @override
  Future<void>
      customStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 555, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncNonstaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_nonstatic_return_custom_struct_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int>
      customStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsync(
          {required CustomStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 556, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncNonstaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_nonstatic_return_custom_struct_ok_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      customStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 553, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncStaticReturnCustomStructErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_static_return_custom_struct_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int> customStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 554, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta:
          kCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinRustAsyncStaticReturnCustomStructOkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinRustAsync_static_return_custom_struct_ok_twin_rust_async",
            argNames: [],
          );

  @override
  Future<SomeStructTwinRustAsync> someStructTwinRustAsyncNewTwinRustAsync(
      {required int value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 547, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinRustAsync_new_twin_rust_async",
        argNames: ["value"],
      );

  @override
  Future<int> someStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 550, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncNonStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_non_static_return_err_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsync(
      {required SomeStructTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_rust_async(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 551, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncNonStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_non_static_return_ok_custom_error_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> someStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 548, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncStaticReturnErrCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_static_return_err_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<int> someStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 549, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta:
          kSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinRustAsyncStaticReturnOkCustomErrorTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinRustAsync_static_return_ok_custom_error_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> customEnumErrorPanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 532, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 533, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> customEnumErrorReturnOkTwinRustAsync(
      {required int arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 531, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_rust_async,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<void> customNestedErrorReturnErrorTwinRustAsync(
      {required CustomNestedErrorOuterTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 534, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_rust_async,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<void> customStructErrorReturnErrorTwinRustAsync(
      {required CustomStructErrorTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 535, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_rust_async,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<int> funcReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 528, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> funcTypeFalliblePanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 529, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> funcTypeInfalliblePanicTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 530, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> panicWithCustomResultTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 545, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta: kPanicWithCustomResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 539, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError1Variant1TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 540, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomNestedError2TwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 541, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_rust_async,
      ),
      constMeta: kReturnCustomNestedError2TwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> returnCustomStructErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 542, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta: kReturnCustomStructErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnCustomStructOkTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 543, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_rust_async,
      ),
      constMeta: kReturnCustomStructOkTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnErrCustomErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 536, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnErrCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int> returnErrorVariantTwinRustAsync(
      {required int variant, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 538, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnErrorVariantTwinRustAsyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_error_variant_twin_rust_async",
        argNames: ["variant"],
      );

  @override
  Future<int> returnOkCustomErrorTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 537, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_rust_async,
      ),
      constMeta: kReturnOkCustomErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 546, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> throwAnyhowTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 544, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_rust_async",
        argNames: [],
      );

  @override
  CustomStructTwinSync customStructTwinSyncNewTwinSync(
      {required String message, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(message, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 581)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_custom_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCustomStructTwinSyncNewTwinSyncConstMeta,
      argValues: [message],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "CustomStructTwinSync_new_twin_sync",
        argNames: ["message"],
      );

  @override
  void customStructTwinSyncNonstaticReturnCustomStructErrorTwinSync(
      {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 584)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncNonstaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_nonstatic_return_custom_struct_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int customStructTwinSyncNonstaticReturnCustomStructOkTwinSync(
      {required CustomStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 585)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncNonstaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_nonstatic_return_custom_struct_ok_twin_sync",
            argNames: ["that"],
          );

  @override
  void customStructTwinSyncStaticReturnCustomStructErrorTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 582)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncStaticReturnCustomStructErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_static_return_custom_struct_error_twin_sync",
            argNames: [],
          );

  @override
  int customStructTwinSyncStaticReturnCustomStructOkTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 583)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta:
          kCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kCustomStructTwinSyncStaticReturnCustomStructOkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "CustomStructTwinSync_static_return_custom_struct_ok_twin_sync",
            argNames: [],
          );

  @override
  SomeStructTwinSync someStructTwinSyncNewTwinSync(
      {required int value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 576)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_some_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kSomeStructTwinSyncNewTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSomeStructTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "SomeStructTwinSync_new_twin_sync",
        argNames: ["value"],
      );

  @override
  int someStructTwinSyncNonStaticReturnErrCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 579)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncNonStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_non_static_return_err_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncNonStaticReturnOkCustomErrorTwinSync(
      {required SomeStructTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_some_struct_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 580)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta:
          kSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncNonStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_non_static_return_ok_custom_error_twin_sync",
            argNames: ["that"],
          );

  @override
  int someStructTwinSyncStaticReturnErrCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 577)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncStaticReturnErrCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_static_return_err_custom_error_twin_sync",
            argNames: [],
          );

  @override
  int someStructTwinSyncStaticReturnOkCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 578)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kSomeStructTwinSyncStaticReturnOkCustomErrorTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "SomeStructTwinSync_static_return_ok_custom_error_twin_sync",
            argNames: [],
          );

  @override
  void customEnumErrorPanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 561)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorPanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorPanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_panic_twin_sync",
        argNames: [],
      );

  @override
  int customEnumErrorReturnErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 562)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_error_twin_sync",
        argNames: [],
      );

  @override
  int customEnumErrorReturnOkTwinSync({required int arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 560)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_enum_error_twin_sync,
      ),
      constMeta: kCustomEnumErrorReturnOkTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomEnumErrorReturnOkTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_enum_error_return_ok_twin_sync",
        argNames: ["arg"],
      );

  @override
  void customNestedErrorReturnErrorTwinSync(
      {required CustomNestedErrorOuterTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 563)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_outer_twin_sync,
      ),
      constMeta: kCustomNestedErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomNestedErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_nested_error_return_error_twin_sync",
        argNames: ["arg"],
      );

  @override
  void customStructErrorReturnErrorTwinSync(
      {required CustomStructErrorTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_custom_struct_error_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 564)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_twin_sync,
      ),
      constMeta: kCustomStructErrorReturnErrorTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCustomStructErrorReturnErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "custom_struct_error_return_error_twin_sync",
        argNames: ["arg"],
      );

  @override
  int funcReturnErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 557)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncReturnErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnErrorTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_return_error_twin_sync",
        argNames: [],
      );

  @override
  int funcTypeFalliblePanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 558)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncTypeFalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeFalliblePanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_fallible_panic_twin_sync",
        argNames: [],
      );

  @override
  int funcTypeInfalliblePanicTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 559)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncTypeInfalliblePanicTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTypeInfalliblePanicTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_type_infallible_panic_twin_sync",
        argNames: [],
      );

  @override
  void panicWithCustomResultTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 574)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kPanicWithCustomResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPanicWithCustomResultTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "panic_with_custom_result_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError1TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 568)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta: kReturnCustomNestedError1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError1Variant1TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 569)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_1_twin_sync,
      ),
      constMeta: kReturnCustomNestedError1Variant1TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError1Variant1TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_1_variant1_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomNestedError2TwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 570)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_nested_error_2_twin_sync,
      ),
      constMeta: kReturnCustomNestedError2TwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomNestedError2TwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_nested_error_2_twin_sync",
        argNames: [],
      );

  @override
  void returnCustomStructErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 571)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta: kReturnCustomStructErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_error_twin_sync",
        argNames: [],
      );

  @override
  int returnCustomStructOkTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 572)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_struct_error_another_twin_sync,
      ),
      constMeta: kReturnCustomStructOkTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnCustomStructOkTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_custom_struct_ok_twin_sync",
        argNames: [],
      );

  @override
  int returnErrCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 565)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnErrCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrCustomErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_err_custom_error_twin_sync",
        argNames: [],
      );

  @override
  int returnErrorVariantTwinSync({required int variant, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(variant, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 567)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnErrorVariantTwinSyncConstMeta,
      argValues: [variant],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnErrorVariantTwinSyncConstMeta => const TaskConstMeta(
        debugName: "return_error_variant_twin_sync",
        argNames: ["variant"],
      );

  @override
  int returnOkCustomErrorTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 566)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_custom_error_twin_sync,
      ),
      constMeta: kReturnOkCustomErrorTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReturnOkCustomErrorTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "return_ok_custom_error_twin_sync",
        argNames: [],
      );

  @override
  Stream<String> streamSinkThrowAnyhowTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 575, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kStreamSinkThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStreamSinkThrowAnyhowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "stream_sink_throw_anyhow_twin_sync",
        argNames: [],
      );

  @override
  void throwAnyhowTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 573)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kThrowAnyhowTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kThrowAnyhowTwinSyncConstMeta => const TaskConstMeta(
        debugName: "throw_anyhow_twin_sync",
        argNames: [],
      );

  @override
  Future<NewSimpleStruct> callNewModuleSystemTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 589, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_rust_async",
        argNames: [],
      );

  @override
  Future<OldSimpleStruct> callOldModuleSystemTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 588, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_rust_async",
        argNames: [],
      );

  @override
  Future<bool> useImportedEnumTwinRustAsync(
      {required MyEnum myEnum, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 587, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinRustAsyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_enum_twin_rust_async",
        argNames: ["myEnum"],
      );

  @override
  Future<bool> useImportedStructTwinRustAsync(
      {required MyStruct myStruct, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 586, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinRustAsyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "use_imported_struct_twin_rust_async",
        argNames: ["myStruct"],
      );

  @override
  NewSimpleStruct callNewModuleSystemTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 593)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallNewModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallNewModuleSystemTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_new_module_system_twin_sync",
        argNames: [],
      );

  @override
  OldSimpleStruct callOldModuleSystemTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 592)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_old_simple_struct,
        decodeErrorData: null,
      ),
      constMeta: kCallOldModuleSystemTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCallOldModuleSystemTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "call_old_module_system_twin_sync",
        argNames: [],
      );

  @override
  bool useImportedEnumTwinSync({required MyEnum myEnum, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_my_enum(myEnum, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 591)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedEnumTwinSyncConstMeta,
      argValues: [myEnum],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_imported_enum_twin_sync",
        argNames: ["myEnum"],
      );

  @override
  bool useImportedStructTwinSync({required MyStruct myStruct, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_struct(myStruct, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 590)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kUseImportedStructTwinSyncConstMeta,
      argValues: [myStruct],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUseImportedStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "use_imported_struct_twin_sync",
        argNames: ["myStruct"],
      );

  @override
  Future<Map<int, int>> funcHashMapI32I32TwinRustAsync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 594, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapI32I32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapI32I32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_i32_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, Uint8List>> funcHashMapStringBytesTwinRustAsync(
      {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 598, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringBytesTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringBytesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_bytes_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, KitchenSinkTwinRustAsync>>
      funcHashMapStringComplexEnumTwinRustAsync(
          {required Map<String, KitchenSinkTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 601, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringComplexEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringComplexEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_complex_enum_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, EnumSimpleTwinRustAsync>>
      funcHashMapStringSimpleEnumTwinRustAsync(
          {required Map<String, EnumSimpleTwinRustAsync> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 600, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringSimpleEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_simple_enum_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, String>> funcHashMapStringStringTwinRustAsync(
      {required Map<String, String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 596, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Map<String, MySize>> funcHashMapStringStructTwinRustAsync(
      {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 599, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStructTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_struct_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Set<int>> funcHashSetI32TwinRustAsync(
      {required Set<int> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 595, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetI32TwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetI32TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_i32_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<Set<String>> funcHashSetStringTwinRustAsync(
      {required Set<String> arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 597, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetStringTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetStringTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_set_string_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Map<int, int> funcHashMapI32I32TwinSync(
      {required Map<int, int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_i_32_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 602)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_i_32_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapI32I32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapI32I32TwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_hash_map_i32_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<String, Uint8List> funcHashMapStringBytesTwinSync(
      {required Map<String, Uint8List> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_list_prim_u_8_strict(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 606)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringBytesTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringBytesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_bytes_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<String, KitchenSinkTwinSync> funcHashMapStringComplexEnumTwinSync(
      {required Map<String, KitchenSinkTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_kitchen_sink_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 609)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_kitchen_sink_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringComplexEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringComplexEnumTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_complex_enum_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<String, EnumSimpleTwinSync> funcHashMapStringSimpleEnumTwinSync(
      {required Map<String, EnumSimpleTwinSync> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_enum_simple_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 608)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_enum_simple_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringSimpleEnumTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringSimpleEnumTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_simple_enum_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<String, String> funcHashMapStringStringTwinSync(
      {required Map<String, String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 604)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStringTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  Map<String, MySize> funcHashMapStringStructTwinSync(
      {required Map<String, MySize> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Map_String_my_size(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 607)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Map_String_my_size,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashMapStringStructTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashMapStringStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_hash_map_string_struct_twin_sync",
        argNames: ["arg"],
      );

  @override
  Set<int> funcHashSetI32TwinSync({required Set<int> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_i_32(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 603)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetI32TwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetI32TwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_hash_set_i32_twin_sync",
        argNames: ["arg"],
      );

  @override
  Set<String> funcHashSetStringTwinSync(
      {required Set<String> arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Set_String(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 605)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_Set_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncHashSetStringTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncHashSetStringTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_hash_set_string_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<String> concatenateWithTwinRustAsyncConcatenateStaticTwinRustAsync(
      {required String a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 614, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncConcatenateStaticTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_concatenate_static_twin_rust_async",
            argNames: ["a", "b"],
          );

  @override
  Future<String> concatenateWithTwinRustAsyncConcatenateTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 613, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncConcatenateTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_concatenate_twin_rust_async",
            argNames: ["that", "b"],
          );

  @override
  Stream<int>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsync(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 619, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkSingleArgTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_single_arg_twin_rust_async",
            argNames: [],
          );

  @override
  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsync(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 618, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStaticStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_static_stream_sink_twin_rust_async",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 617, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStreamSinkAt1TwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_stream_sink_at_1_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinRustAsync>
      concatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsync(
          {required ConcatenateWithTwinRustAsync that,
          required int key,
          required int max,
          dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 616, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncHandleSomeStreamSinkTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_handle_some_stream_sink_twin_rust_async",
            argNames: ["that", "key", "max"],
          );

  @override
  Future<ConcatenateWithTwinRustAsync>
      concatenateWithTwinRustAsyncNewTwinRustAsync(
          {required String a, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 612, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinRustAsync_new_twin_rust_async",
        argNames: ["a"],
      );

  @override
  Future<String> concatenateWithTwinRustAsyncSimpleGetterTwinRustAsync(
      {required ConcatenateWithTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_rust_async(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 615, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinRustAsyncSimpleGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinRustAsync_simple_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> sumWithTwinRustAsyncSumTwinRustAsync(
      {required SumWithTwinRustAsync that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_rust_async(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 620, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinRustAsyncSumTwinRustAsyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinRustAsyncSumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "SumWithTwinRustAsync_sum_twin_rust_async",
        argNames: ["that", "y", "z"],
      );

  @override
  Future<SumWithTwinRustAsyncArray3> getSumArrayTwinRustAsync(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 611, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinRustAsyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_rust_async",
        argNames: ["a", "b", "c"],
      );

  @override
  Future<SumWithTwinRustAsync> getSumStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 610, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_rust_async",
        argNames: [],
      );

  @override
  String concatenateWithTwinSyncConcatenateStaticTwinSync(
      {required String a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 625)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncConcatenateStaticTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "ConcatenateWithTwinSync_concatenate_static_twin_sync",
            argNames: ["a", "b"],
          );

  @override
  String concatenateWithTwinSyncConcatenateTwinSync(
      {required ConcatenateWithTwinSync that,
      required String b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 624)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncConcatenateTwinSyncConstMeta,
      argValues: [that, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncConcatenateTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSync_concatenate_twin_sync",
        argNames: ["that", "b"],
      );

  @override
  Stream<int>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSync(
          {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 630, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStaticStreamSinkSingleArgTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_static_stream_sink_single_arg_twin_sync",
            argNames: [],
          );

  @override
  Stream<Log2TwinSync>
      concatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSync(
          {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 629, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_sync,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStaticStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_static_stream_sink_twin_sync",
            argNames: ["key", "max"],
          );

  @override
  Stream<int> concatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 628, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta:
          kConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStreamSinkAt1TwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_stream_sink_at_1_twin_sync",
            argNames: ["that"],
          );

  @override
  Stream<Log2TwinSync> concatenateWithTwinSyncHandleSomeStreamSinkTwinSync(
      {required ConcatenateWithTwinSync that,
      required int key,
      required int max,
      dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 627, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_2_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta,
      argValues: [that, key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kConcatenateWithTwinSyncHandleSomeStreamSinkTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "ConcatenateWithTwinSync_handle_some_stream_sink_twin_sync",
            argNames: ["that", "key", "max"],
          );

  @override
  ConcatenateWithTwinSync concatenateWithTwinSyncNewTwinSync(
      {required String a, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(a, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 623)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_concatenate_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncNewTwinSyncConstMeta,
      argValues: [a],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSync_new_twin_sync",
        argNames: ["a"],
      );

  @override
  String concatenateWithTwinSyncSimpleGetterTwinSync(
      {required ConcatenateWithTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_concatenate_with_twin_sync(that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 626)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConcatenateWithTwinSyncSimpleGetterTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "ConcatenateWithTwinSync_simple_getter_twin_sync",
        argNames: ["that"],
      );

  @override
  int sumWithTwinSyncSumTwinSync(
      {required SumWithTwinSync that,
      required int y,
      required int z,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sum_with_twin_sync(that, serializer);
        sse_encode_u_32(y, serializer);
        sse_encode_u_32(z, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 631)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kSumWithTwinSyncSumTwinSyncConstMeta,
      argValues: [that, y, z],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSumWithTwinSyncSumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "SumWithTwinSync_sum_twin_sync",
        argNames: ["that", "y", "z"],
      );

  @override
  SumWithTwinSyncArray3 getSumArrayTwinSync(
      {required int a, required int b, required int c, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        sse_encode_u_32(c, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 622)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync_array_3,
        decodeErrorData: null,
      ),
      constMeta: kGetSumArrayTwinSyncConstMeta,
      argValues: [a, b, c],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_array_twin_sync",
        argNames: ["a", "b", "c"],
      );

  @override
  SumWithTwinSync getSumStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 621)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sum_with_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kGetSumStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetSumStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_sum_struct_twin_sync",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 635, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 636, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Future<int?> firstNumberTwinRustAsync({required Numbers nums, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 642, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinRustAsyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_rust_async",
        argNames: ["nums"],
      );

  @override
  Future<int?> firstSequenceTwinRustAsync(
      {required Sequences seqs, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 643, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinRustAsyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_rust_async",
        argNames: ["seqs"],
      );

  @override
  Future<ApplicationSettings> getAppSettingsTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 632, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_app_settings_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ApplicationSettings> getFallibleAppSettingsTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 633, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ApplicationMessage> getMessageTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 639, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_rust_async",
        argNames: [],
      );

  @override
  Future<bool> isAppEmbeddedTwinRustAsync(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 634, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinRustAsyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_rust_async",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinRustAsync> mirrorStructStreamTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 637, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_mirror_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 638, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_rust_async",
        argNames: [],
      );

  @override
  Future<Numbers> repeatNumberTwinRustAsync(
      {required int num, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 640, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinRustAsyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_rust_async",
        argNames: ["num", "times"],
      );

  @override
  Future<Sequences> repeatSequenceTwinRustAsync(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 641, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinRustAsyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "repeat_sequence_twin_rust_async",
        argNames: ["seq", "times"],
      );

  @override
  Future<ContainsMirroredSubStructTwinRustAsync>
      testContainsMirroredSubStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 650, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_contains_mirrored_sub_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<List<RawStringMirrored>> testFallibleOfRawStringMirroredTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 648, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<List<RawStringEnumMirrored>>
      testListOfNestedEnumsMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 649, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<ListOfNestedRawStringMirrored>
      testListOfRawNestedStringMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 647, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<NestedRawStringMirrored> testNestedRawStringMirroredTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 645, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Future<RawStringEnumMirrored> testRawStringEnumMirroredTwinRustAsync(
      {required bool nested, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 646, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinRustAsyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_rust_async",
        argNames: ["nested"],
      );

  @override
  Future<RawStringMirrored> testRawStringMirroredTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 644, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<ApplicationSettings> appSettingsStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 654, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "app_settings_stream_twin_sync",
        argNames: [],
      );

  @override
  Stream<List<ApplicationSettings>> appSettingsVecStreamTwinSync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 655, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kAppSettingsVecStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAppSettingsVecStreamTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "app_settings_vec_stream_twin_sync",
        argNames: [],
      );

  @override
  int? firstNumberTwinSync({required Numbers nums, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_numbers(nums, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 661)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstNumberTwinSyncConstMeta,
      argValues: [nums],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "first_number_twin_sync",
        argNames: ["nums"],
      );

  @override
  int? firstSequenceTwinSync({required Sequences seqs, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_sequences(seqs, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 662)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kFirstSequenceTwinSyncConstMeta,
      argValues: [seqs],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstSequenceTwinSyncConstMeta => const TaskConstMeta(
        debugName: "first_sequence_twin_sync",
        argNames: ["seqs"],
      );

  @override
  ApplicationSettings getAppSettingsTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 651)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: null,
      ),
      constMeta: kGetAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAppSettingsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_app_settings_twin_sync",
        argNames: [],
      );

  @override
  ApplicationSettings getFallibleAppSettingsTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 652)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_settings,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kGetFallibleAppSettingsTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetFallibleAppSettingsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "get_fallible_app_settings_twin_sync",
        argNames: [],
      );

  @override
  ApplicationMessage getMessageTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 658)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_application_message,
        decodeErrorData: null,
      ),
      constMeta: kGetMessageTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetMessageTwinSyncConstMeta => const TaskConstMeta(
        debugName: "get_message_twin_sync",
        argNames: [],
      );

  @override
  bool isAppEmbeddedTwinSync(
      {required ApplicationSettings appSettings, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_application_settings(appSettings, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 653)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsAppEmbeddedTwinSyncConstMeta,
      argValues: [appSettings],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsAppEmbeddedTwinSyncConstMeta => const TaskConstMeta(
        debugName: "is_app_embedded_twin_sync",
        argNames: ["appSettings"],
      );

  @override
  Stream<MirrorStructTwinSync> mirrorStructStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 656, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_mirror_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kMirrorStructStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorStructStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "mirror_struct_stream_twin_sync",
        argNames: [],
      );

  @override
  Stream<(ApplicationSettings, RawStringEnumMirrored)>
      mirrorTupleStreamTwinSync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 657, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_application_settings_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kMirrorTupleStreamTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMirrorTupleStreamTwinSyncConstMeta => const TaskConstMeta(
        debugName: "mirror_tuple_stream_twin_sync",
        argNames: [],
      );

  @override
  Numbers repeatNumberTwinSync(
      {required int num, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(num, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 659)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_numbers,
        decodeErrorData: null,
      ),
      constMeta: kRepeatNumberTwinSyncConstMeta,
      argValues: [num, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatNumberTwinSyncConstMeta => const TaskConstMeta(
        debugName: "repeat_number_twin_sync",
        argNames: ["num", "times"],
      );

  @override
  Sequences repeatSequenceTwinSync(
      {required int seq, required int times, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(seq, serializer);
        sse_encode_usize(times, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 660)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_sequences,
        decodeErrorData: null,
      ),
      constMeta: kRepeatSequenceTwinSyncConstMeta,
      argValues: [seq, times],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRepeatSequenceTwinSyncConstMeta => const TaskConstMeta(
        debugName: "repeat_sequence_twin_sync",
        argNames: ["seq", "times"],
      );

  @override
  ContainsMirroredSubStructTwinSync testContainsMirroredSubStructTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 669)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_contains_mirrored_sub_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestContainsMirroredSubStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestContainsMirroredSubStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_contains_mirrored_sub_struct_twin_sync",
        argNames: [],
      );

  @override
  List<RawStringMirrored> testFallibleOfRawStringMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 667)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_mirrored,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kTestFallibleOfRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestFallibleOfRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_fallible_of_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  List<RawStringEnumMirrored> testListOfNestedEnumsMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 668)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfNestedEnumsMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfNestedEnumsMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_nested_enums_mirrored_twin_sync",
        argNames: [],
      );

  @override
  ListOfNestedRawStringMirrored testListOfRawNestedStringMirroredTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 666)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_of_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestListOfRawNestedStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestListOfRawNestedStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_list_of_raw_nested_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  NestedRawStringMirrored testNestedRawStringMirroredTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 664)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nested_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestNestedRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestNestedRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_nested_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  RawStringEnumMirrored testRawStringEnumMirroredTwinSync(
      {required bool nested, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_bool(nested, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 665)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_enum_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringEnumMirroredTwinSyncConstMeta,
      argValues: [nested],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringEnumMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_enum_mirrored_twin_sync",
        argNames: ["nested"],
      );

  @override
  RawStringMirrored testRawStringMirroredTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 663)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_mirrored,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringMirroredTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringMirroredTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_mirrored_twin_sync",
        argNames: [],
      );

  @override
  Future<BigBuffersTwinRustAsync> handleBigBuffersTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 673, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_big_buffers_twin_rust_async",
        argNames: [],
      );

  @override
  Future<MyTreeNodeTwinRustAsync> handleComplexStructTwinRustAsync(
      {required MyTreeNodeTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 670, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<MyNestedStructTwinRustAsync> handleNestedStructTwinRustAsync(
      {required MyNestedStructTwinRustAsync s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_rust_async(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 672, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_nested_struct_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<String> handleStringTwinRustAsync({required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 676, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinRustAsyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_rust_async",
        argNames: ["s"],
      );

  @override
  Future<MySize> handleStructTwinRustAsync(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 678, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinRustAsyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_rust_async",
        argNames: ["arg", "boxed"],
      );

  @override
  Future<Uint8List> handleVecU8TwinRustAsync(
      {required List<int> v, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 677, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinRustAsyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_rust_async",
        argNames: ["v"],
      );

  @override
  Future<List<WeekdaysTwinRustAsync>> listOfPrimitiveEnumsTwinRustAsync(
      {required List<WeekdaysTwinRustAsync> weekdays, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_rust_async(weekdays, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 671, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinRustAsyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_rust_async",
        argNames: ["weekdays"],
      );

  @override
  Future<AbcTwinRustAsync> testAbcEnumTwinRustAsync(
      {required AbcTwinRustAsync abc, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_rust_async(abc, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 674, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinRustAsyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_rust_async",
        argNames: ["abc"],
      );

  @override
  Future<StructWithEnumTwinRustAsync> testStructWithEnumTwinRustAsync(
      {required StructWithEnumTwinRustAsync se, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_rust_async(se, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 675, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinRustAsyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_rust_async",
        argNames: ["se"],
      );

  @override
  BigBuffersTwinSync handleBigBuffersTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 682)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_big_buffers_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleBigBuffersTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleBigBuffersTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_big_buffers_twin_sync",
        argNames: [],
      );

  @override
  MyTreeNodeTwinSync handleComplexStructTwinSync(
      {required MyTreeNodeTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_tree_node_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 679)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_tree_node_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleComplexStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleComplexStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_complex_struct_twin_sync",
        argNames: ["s"],
      );

  @override
  MyNestedStructTwinSync handleNestedStructTwinSync(
      {required MyNestedStructTwinSync s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_nested_struct_twin_sync(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 681)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_nested_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleNestedStructTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNestedStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_nested_struct_twin_sync",
        argNames: ["s"],
      );

  @override
  String handleStringTwinSync({required String s, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(s, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 685)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringTwinSyncConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_twin_sync",
        argNames: ["s"],
      );

  @override
  MySize handleStructTwinSync(
      {required MySize arg, required MySize boxed, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_my_size(arg, serializer);
        sse_encode_box_my_size(boxed, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 687)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleStructTwinSyncConstMeta,
      argValues: [arg, boxed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_struct_twin_sync",
        argNames: ["arg", "boxed"],
      );

  @override
  Uint8List handleVecU8TwinSync({required List<int> v, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(v, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 686)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecU8TwinSyncConstMeta,
      argValues: [v],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecU8TwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_u8_twin_sync",
        argNames: ["v"],
      );

  @override
  List<WeekdaysTwinSync> listOfPrimitiveEnumsTwinSync(
      {required List<WeekdaysTwinSync> weekdays, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_weekdays_twin_sync(weekdays, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 680)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_weekdays_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kListOfPrimitiveEnumsTwinSyncConstMeta,
      argValues: [weekdays],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListOfPrimitiveEnumsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "list_of_primitive_enums_twin_sync",
        argNames: ["weekdays"],
      );

  @override
  AbcTwinSync testAbcEnumTwinSync({required AbcTwinSync abc, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_abc_twin_sync(abc, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 683)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_abc_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestAbcEnumTwinSyncConstMeta,
      argValues: [abc],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestAbcEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_abc_enum_twin_sync",
        argNames: ["abc"],
      );

  @override
  StructWithEnumTwinSync testStructWithEnumTwinSync(
      {required StructWithEnumTwinSync se, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_enum_twin_sync(se, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 684)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_enum_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestStructWithEnumTwinSyncConstMeta,
      argValues: [se],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestStructWithEnumTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_struct_with_enum_twin_sync",
        argNames: ["se"],
      );

  @override
  Future<EmptyTwinRustAsync> emptyStructTwinRustAsync(
      {required EmptyTwinRustAsync empty, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_rust_async(empty, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 691, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinRustAsyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_rust_async",
        argNames: ["empty"],
      );

  @override
  Future<void> funcReturnUnitTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 688, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_return_unit_twin_rust_async",
        argNames: [],
      );

  @override
  Future<List<MySize>> handleListOfStructTwinRustAsync(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 689, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinRustAsyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_rust_async",
        argNames: ["l"],
      );

  @override
  Future<List<String>> handleStringListTwinRustAsync(
      {required List<String> names, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 690, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinRustAsyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_string_list_twin_rust_async",
        argNames: ["names"],
      );

  @override
  EmptyTwinSync emptyStructTwinSync(
      {required EmptyTwinSync empty, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_empty_twin_sync(empty, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 695)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_empty_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kEmptyStructTwinSyncConstMeta,
      argValues: [empty],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kEmptyStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "empty_struct_twin_sync",
        argNames: ["empty"],
      );

  @override
  void funcReturnUnitTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 692)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kFuncReturnUnitTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncReturnUnitTwinSyncConstMeta => const TaskConstMeta(
        debugName: "func_return_unit_twin_sync",
        argNames: [],
      );

  @override
  List<MySize> handleListOfStructTwinSync(
      {required List<MySize> l, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_my_size(l, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 693)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_my_size,
        decodeErrorData: null,
      ),
      constMeta: kHandleListOfStructTwinSyncConstMeta,
      argValues: [l],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleListOfStructTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_list_of_struct_twin_sync",
        argNames: ["l"],
      );

  @override
  List<String> handleStringListTwinSync(
      {required List<String> names, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(names, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 694)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleStringListTwinSyncConstMeta,
      argValues: [names],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStringListTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_string_list_twin_sync",
        argNames: ["names"],
      );

  @override
  Future<NewTypeIntTwinRustAsync> handleNewtypeTwinRustAsync(
      {required NewTypeIntTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_rust_async(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 696, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  NewTypeIntTwinSync handleNewtypeTwinSync(
      {required NewTypeIntTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_new_type_int_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 697)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_new_type_int_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleNewtypeTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleNewtypeTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_newtype_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<int?> primitiveOptionalTypesTwinRustAsync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 698, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_rust_async",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int? primitiveOptionalTypesTwinSync(
      {int? myI32, int? myI64, double? myF64, bool? myBool, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_i_32(myI32, serializer);
        sse_encode_opt_box_autoadd_i_64(myI64, serializer);
        sse_encode_opt_box_autoadd_f_64(myF64, serializer);
        sse_encode_opt_box_autoadd_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 699)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveOptionalTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveOptionalTypesTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_optional_types_twin_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<double> handleIncrementBoxedOptionalTwinRustAsync(
      {double? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 703, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  Future<String> handleOptionBoxArgumentsTwinRustAsync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinRustAsync? structbox,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_rust_async(
            structbox, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 705, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinRustAsyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_rust_async",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  Future<ExoticOptionalsTwinRustAsync?> handleOptionalIncrementTwinRustAsync(
      {ExoticOptionalsTwinRustAsync? opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
            opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 702, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  Future<double?> handleOptionalReturnTwinRustAsync(
      {required double left, required double right, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 700, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinRustAsyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_rust_async",
        argNames: ["left", "right"],
      );

  @override
  Future<ElementTwinRustAsync?> handleOptionalStructTwinRustAsync(
      {String? document, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 701, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinRustAsyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_rust_async",
        argNames: ["document"],
      );

  @override
  Future<OptVecsTwinRustAsync> handleVecOfOptsTwinRustAsync(
      {required OptVecsTwinRustAsync opt, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_rust_async(opt, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 704, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinRustAsyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_rust_async",
        argNames: ["opt"],
      );

  @override
  double handleIncrementBoxedOptionalTwinSync({double? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_f_64(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 709)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleIncrementBoxedOptionalTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleIncrementBoxedOptionalTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_increment_boxed_optional_twin_sync",
        argNames: ["opt"],
      );

  @override
  String handleOptionBoxArgumentsTwinSync(
      {int? i8Box,
      int? u8Box,
      int? i32Box,
      int? i64Box,
      double? f64Box,
      bool? boolbox,
      ExoticOptionalsTwinSync? structbox,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_i_8(i8Box, serializer);
        sse_encode_opt_box_u_8(u8Box, serializer);
        sse_encode_opt_box_i_32(i32Box, serializer);
        sse_encode_opt_box_i_64(i64Box, serializer);
        sse_encode_opt_box_f_64(f64Box, serializer);
        sse_encode_opt_box_bool(boolbox, serializer);
        sse_encode_opt_box_exotic_optionals_twin_sync(structbox, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 711)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionBoxArgumentsTwinSyncConstMeta,
      argValues: [i8Box, u8Box, i32Box, i64Box, f64Box, boolbox, structbox],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionBoxArgumentsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_option_box_arguments_twin_sync",
        argNames: [
          "i8Box",
          "u8Box",
          "i32Box",
          "i64Box",
          "f64Box",
          "boolbox",
          "structbox"
        ],
      );

  @override
  ExoticOptionalsTwinSync? handleOptionalIncrementTwinSync(
      {ExoticOptionalsTwinSync? opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 708)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_exotic_optionals_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalIncrementTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalIncrementTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_increment_twin_sync",
        argNames: ["opt"],
      );

  @override
  double? handleOptionalReturnTwinSync(
      {required double left, required double right, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_f_64(left, serializer);
        sse_encode_f_64(right, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 706)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalReturnTwinSyncConstMeta,
      argValues: [left, right],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_return_twin_sync",
        argNames: ["left", "right"],
      );

  @override
  ElementTwinSync? handleOptionalStructTwinSync(
      {String? document, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_String(document, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 707)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_box_autoadd_element_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleOptionalStructTwinSyncConstMeta,
      argValues: [document],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleOptionalStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_optional_struct_twin_sync",
        argNames: ["document"],
      );

  @override
  OptVecsTwinSync handleVecOfOptsTwinSync(
      {required OptVecsTwinSync opt, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opt_vecs_twin_sync(opt, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 710)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_vecs_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfOptsTwinSyncConstMeta,
      argValues: [opt],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfOptsTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_vec_of_opts_twin_sync",
        argNames: ["opt"],
      );

  @override
  Future<VecOfPrimitivePackTwinRustAsync> handleVecOfPrimitiveTwinRustAsync(
      {required int n, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 712, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinRustAsyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_rust_async",
        argNames: ["n"],
      );

  @override
  VecOfPrimitivePackTwinSync handleVecOfPrimitiveTwinSync(
      {required int n, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(n, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 713)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vec_of_primitive_pack_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleVecOfPrimitiveTwinSyncConstMeta,
      argValues: [n],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleVecOfPrimitiveTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_vec_of_primitive_twin_sync",
        argNames: ["n"],
      );

  @override
  Future<int> primitiveTypesTwinRustAsync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 714, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinRustAsyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "primitive_types_twin_rust_async",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  Future<int> primitiveU32TwinRustAsync({required int myU32, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 715, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinRustAsyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_rust_async",
        argNames: ["myU32"],
      );

  @override
  int primitiveTypesTwinSync(
      {required int myI32,
      required int myI64,
      required double myF64,
      required bool myBool,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(myI32, serializer);
        sse_encode_i_64(myI64, serializer);
        sse_encode_f_64(myF64, serializer);
        sse_encode_bool(myBool, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 716)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveTypesTwinSyncConstMeta,
      argValues: [myI32, myI64, myF64, myBool],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveTypesTwinSyncConstMeta => const TaskConstMeta(
        debugName: "primitive_types_twin_sync",
        argNames: ["myI32", "myI64", "myF64", "myBool"],
      );

  @override
  int primitiveU32TwinSync({required int myU32, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(myU32, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 717)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kPrimitiveU32TwinSyncConstMeta,
      argValues: [myU32],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kPrimitiveU32TwinSyncConstMeta => const TaskConstMeta(
        debugName: "primitive_u32_twin_sync",
        argNames: ["myU32"],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinRustAsync>
      testMoreThanJustOneRawStringStructTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 719, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Future<RawStringItemStructTwinRustAsync> testRawStringItemStructTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 718, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_rust_async",
        argNames: [],
      );

  @override
  MoreThanJustOneRawStringStructTwinSync
      testMoreThanJustOneRawStringStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 721)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_sync",
        argNames: [],
      );

  @override
  RawStringItemStructTwinSync testRawStringItemStructTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 720)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_sync",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 754, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiInstanceMethodArgBorrowTwinMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiInstanceMethodArgBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_instance_method_arg_borrow_twin_moi",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 755, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinMoiInstanceMethodArgMutBorrowTwinMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiInstanceMethodArgMutBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_instance_method_arg_mut_borrow_twin_moi",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinMoiInstanceMethodArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 753, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiInstanceMethodArgOwnTwinMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiInstanceMethodArgOwnTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinMoi_instance_method_arg_own_twin_moi",
            argNames: ["that"],
          );

  @override
  Future<int> nonCloneSimpleTwinMoiInstanceMethodGetterTwinMoi(
      {required NonCloneSimpleTwinMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 757, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiInstanceMethodGetterTwinMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiInstanceMethodGetterTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinMoi_instance_method_getter_twin_moi",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinMoi>
      nonCloneSimpleTwinMoiInstanceMethodReturnOwnTwinMoi(
          {required NonCloneSimpleTwinMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 756, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiInstanceMethodReturnOwnTwinMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiInstanceMethodReturnOwnTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_instance_method_return_own_twin_moi",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewCustomNameTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 751, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiNewCustomNameTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinMoiNewCustomNameTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinMoi_new_custom_name_twin_moi",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 750, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiNewTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinMoiNewTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinMoi_new_twin_moi",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinMoi> nonCloneSimpleTwinMoiNewWithResultTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 752, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNonCloneSimpleTwinMoiNewWithResultTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinMoiNewWithResultTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinMoi_new_with_result_twin_moi",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinMoiStaticMethodArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 747, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiStaticMethodArgBorrowTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiStaticMethodArgBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_static_method_arg_borrow_twin_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinMoiStaticMethodArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 748, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiStaticMethodArgMutBorrowTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiStaticMethodArgMutBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_static_method_arg_mut_borrow_twin_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinMoiStaticMethodArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 746, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiStaticMethodArgOwnTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinMoiStaticMethodArgOwnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinMoi_static_method_arg_own_twin_moi",
        argNames: ["arg"],
      );

  @override
  Future<NonCloneSimpleTwinMoi>
      nonCloneSimpleTwinMoiStaticMethodReturnOwnTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 749, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinMoiStaticMethodReturnOwnTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinMoiStaticMethodReturnOwnTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinMoi_static_method_return_own_twin_moi",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg, required int expect, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 723, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 724, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinMoiConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_moi",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<NonCloneSimpleTwinMoi> rustAutoOpaqueArgOwnAndReturnOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 726, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_moi",
        argNames: ["arg"],
      );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinMoi(
      {required NonCloneSimpleTwinMoi arg, required int expect, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 722, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi a,
      required NonCloneSimpleTwinMoi b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 745, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_moi",
        argNames: ["a", "b"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinMoi(
      {required NonCloneSimpleTwinMoi borrow,
      required NonCloneSimpleTwinMoi mutBorrow,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 744, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinMoiConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndMutBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_moi",
        argNames: ["borrow", "mutBorrow"],
      );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinMoi(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 731, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_moi",
        argNames: ["arg"],
      );

  @override
  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 732, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_moi",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinMoi(
      {required NonCloneSimpleTwinMoi a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 728, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_moi",
        argNames: ["a", "b"],
      );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinMoi(
      {required BoxMyTraitTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 729, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_moi",
        argNames: ["arg"],
      );

  @override
  Future<BoxMyTraitTwinMoi> rustAutoOpaquePlusSignReturnTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 730, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_moi",
        argNames: [],
      );

  @override
  Future<OpaqueOneTwinMoiOpaqueTwoTwinMoi>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 742, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_moi",
        argNames: [],
      );

  @override
  Future<OpaqueTwoTwinMoi> rustAutoOpaqueReturnOpaqueTwoTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 743, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_moi",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinMoi> rustAutoOpaqueReturnOwnTwinMoi(
      {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 725, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinMoiConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_moi",
        argNames: ["initial"],
      );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 739, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 740, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinMoi(
      {required StructWithGoodAndOpaqueFieldTwinMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 738, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_moi",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinMoi>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinMoi(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 741, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_moi",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 734, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 735, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinMoi(
      {required BoxHelloTraitTwinMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 733, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<BoxHelloTraitTwinMoi> rustAutoOpaqueTraitObjectReturnOwnOneTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 736, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_moi",
        argNames: [],
      );

  @override
  Future<BoxHelloTraitTwinMoi> rustAutoOpaqueTraitObjectReturnOwnTwoTwinMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 737, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_moi",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinMoi(
      {required NonCloneSimpleTwinMoi a,
      required NonCloneSimpleTwinMoi b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 727, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_moi",
        argNames: ["a", "b"],
      );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 790, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncInstanceMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 791, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncInstanceMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_mut_borrow_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 789, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncInstanceMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_arg_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<int> nonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 793, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncInstanceMethodGetterTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_getter_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 792, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncInstanceMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_instance_method_return_own_twin_rust_async",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 787, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncNewCustomNameTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_custom_name_twin_rust_async",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 786, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinRustAsyncNewTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinRustAsync_new_twin_rust_async",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 788, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncNewWithResultTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_new_with_result_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 783, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncStaticMethodArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 784, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncStaticMethodArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_mut_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 782, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncStaticMethodArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      nonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 785, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncStaticMethodReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsync_static_method_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 759, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_rust_async",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 760, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_rust_async",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<NonCloneSimpleTwinRustAsync>
      rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsync(
          {required NonCloneSimpleTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 762, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 758, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_rust_async",
        argNames: ["arg", "expect"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required NonCloneSimpleTwinRustAsync b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 781, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync borrow,
      required NonCloneSimpleTwinRustAsync mutBorrow,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 780, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async",
        argNames: ["borrow", "mutBorrow"],
      );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinRustAsync(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 767, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 768, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 764, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinRustAsync(
      {required BoxMyTraitTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 765, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<BoxMyTraitTwinRustAsync> rustAutoOpaquePlusSignReturnTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 766, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_rust_async",
        argNames: [],
      );

  @override
  Future<OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 778, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinRustAsync> rustAutoOpaqueReturnOpaqueTwoTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 779, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_rust_async",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinRustAsync> rustAutoOpaqueReturnOwnTwinRustAsync(
      {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 761, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_rust_async",
        argNames: ["initial"],
      );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsync(
      {required StructWithGoodAndOpaqueFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 775, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsync(
          {required StructWithGoodAndOpaqueFieldTwinRustAsync arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 776, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsync(
      {required StructWithGoodAndOpaqueFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 774, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinRustAsync>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsync(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 777, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 770, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 771, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsync(
      {required BoxHelloTraitTwinRustAsync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 769, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_rust_async",
        argNames: ["arg", "expect"],
      );

  @override
  Future<BoxHelloTraitTwinRustAsync>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 772, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_rust_async",
            argNames: [],
          );

  @override
  Future<BoxHelloTraitTwinRustAsync>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 773, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_rust_async",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinRustAsync(
      {required NonCloneSimpleTwinRustAsync a,
      required NonCloneSimpleTwinRustAsync b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 763, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 826, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgBorrowTwinRustAsyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_borrow_twin_rust_async_moi",
            argNames: ["that"],
          );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgMutBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 827, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgMutBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_mut_borrow_twin_rust_async_moi",
            argNames: ["that"],
          );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodArgOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 825, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgOwnTwinRustAsyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiInstanceMethodArgOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_instance_method_arg_own_twin_rust_async_moi",
            argNames: ["that"],
          );

  @override
  Future<int>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodGetterTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 829, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiInstanceMethodGetterTwinRustAsyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiInstanceMethodGetterTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_instance_method_getter_twin_rust_async_moi",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiInstanceMethodReturnOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 828, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiInstanceMethodReturnOwnTwinRustAsyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiInstanceMethodReturnOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_instance_method_return_own_twin_rust_async_moi",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewCustomNameTwinRustAsyncMoi(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 823, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiNewCustomNameTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiNewCustomNameTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_new_custom_name_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 822, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinRustAsyncMoiNewTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiNewTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinRustAsyncMoi_new_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiNewWithResultTwinRustAsyncMoi(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 824, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiNewWithResultTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiNewWithResultTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_new_with_result_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodArgBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 819, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_borrow_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<void>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodArgMutBorrowTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 820, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgMutBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_mut_borrow_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinRustAsyncMoiStaticMethodArgOwnTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 818, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgOwnTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiStaticMethodArgOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_static_method_arg_own_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      nonCloneSimpleTwinRustAsyncMoiStaticMethodReturnOwnTwinRustAsyncMoi(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 821, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinRustAsyncMoiStaticMethodReturnOwnTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinRustAsyncMoiStaticMethodReturnOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinRustAsyncMoi_static_method_return_own_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 795, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_rust_async_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 796, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_rust_async_moi",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      rustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncMoi(
          {required NonCloneSimpleTwinRustAsyncMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 798, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueArgOwnAndReturnOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_arg_own_and_return_own_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 794, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_rust_async_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required NonCloneSimpleTwinRustAsyncMoi b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 817, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinRustAsyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_rust_async_moi",
        argNames: ["a", "b"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi borrow,
      required NonCloneSimpleTwinRustAsyncMoi mutBorrow,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 816, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueBorrowAndMutBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_borrow_and_mut_borrow_twin_rust_async_moi",
            argNames: ["borrow", "mutBorrow"],
          );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinRustAsyncMoi(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 803, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_rust_async_moi",
        argNames: ["arg"],
      );

  @override
  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 804, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required String b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 800, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueNormalAndOpaqueArgTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_normal_and_opaque_arg_twin_rust_async_moi",
            argNames: ["a", "b"],
          );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinRustAsyncMoi(
      {required BoxMyTraitTwinRustAsyncMoi arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 801, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_rust_async_moi",
        argNames: ["arg"],
      );

  @override
  Future<BoxMyTraitTwinRustAsyncMoi>
      rustAutoOpaquePlusSignReturnTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 802, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 814, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_return_opaque_one_and_two_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<OpaqueTwoTwinRustAsyncMoi>
      rustAutoOpaqueReturnOpaqueTwoTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 815, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinRustAsyncMoi>
      rustAutoOpaqueReturnOwnTwinRustAsyncMoi(
          {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 797, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinRustAsyncMoiConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_rust_async_moi",
        argNames: ["initial"],
      );

  @override
  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncMoi(
          {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 811, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<void>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncMoi(
          {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
          dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 812, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinRustAsyncMoi arg,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 810, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_rust_async_moi",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinRustAsyncMoi>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncMoi(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 813, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 806, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectArgBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_borrow_twin_rust_async_moi",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 807, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectArgMutBorrowTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_rust_async_moi",
            argNames: ["arg", "expect"],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinRustAsyncMoi(
      {required BoxHelloTraitTwinRustAsyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 805, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_rust_async_moi",
        argNames: ["arg", "expect"],
      );

  @override
  Future<BoxHelloTraitTwinRustAsyncMoi>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 808, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnOneTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<BoxHelloTraitTwinRustAsyncMoi>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 809, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinRustAsyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_rust_async_moi",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinRustAsyncMoi(
      {required NonCloneSimpleTwinRustAsyncMoi a,
      required NonCloneSimpleTwinRustAsyncMoi b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 799, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinRustAsyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_rust_async_moi",
        argNames: ["a", "b"],
      );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 862)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 863)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_mut_borrow_twin_sync",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 861)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_arg_own_twin_sync",
            argNames: ["that"],
          );

  @override
  int nonCloneSimpleTwinSyncInstanceMethodGetterTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 865)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodGetterTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_getter_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSync(
      {required NonCloneSimpleTwinSync that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 864)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncInstanceMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_instance_method_return_own_twin_sync",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewCustomNameTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 859)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncNewCustomNameTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSync_new_custom_name_twin_sync",
        argNames: [],
      );

  @override
  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 858)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncNewTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncNewTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSync_new_twin_sync",
        argNames: [],
      );

  @override
  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncNewWithResultTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 860)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncNewWithResultTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSync_new_with_result_twin_sync",
        argNames: [],
      );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 855)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 856)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncStaticMethodArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 854)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName: "NonCloneSimpleTwinSync_static_method_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleTwinSync nonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 857)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncStaticMethodReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSync_static_method_return_own_twin_sync",
            argNames: [],
          );

  @override
  void rustAutoOpaqueArgBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 831)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueArgMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 832)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  NonCloneSimpleTwinSync rustAutoOpaqueArgOwnAndReturnOwnTwinSync(
      {required NonCloneSimpleTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 834)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync",
        argNames: ["arg"],
      );

  @override
  void rustAutoOpaqueArgOwnTwinSync(
      {required NonCloneSimpleTwinSync arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 830)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  int rustAutoOpaqueBorrowAndBorrowTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 853)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  int rustAutoOpaqueBorrowAndMutBorrowTwinSync(
      {required NonCloneSimpleTwinSync borrow,
      required NonCloneSimpleTwinSync mutBorrow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            mutBorrow, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 852)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndMutBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync",
        argNames: ["borrow", "mutBorrow"],
      );

  @override
  void rustAutoOpaqueCallableArgTwinSync(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 839)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_sync",
        argNames: ["arg"],
      );

  @override
  BoxFnStringString rustAutoOpaqueCallableReturnTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 840)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_sync",
        argNames: [],
      );

  @override
  void rustAutoOpaqueNormalAndOpaqueArgTwinSync(
      {required NonCloneSimpleTwinSync a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 836)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  void rustAutoOpaquePlusSignArgTwinSync(
      {required BoxMyTraitTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 837)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_sync",
        argNames: ["arg"],
      );

  @override
  BoxMyTraitTwinSync rustAutoOpaquePlusSignReturnTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 838)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_sync",
        argNames: [],
      );

  @override
  OpaqueOneTwinSyncOpaqueTwoTwinSync
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 850)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_sync",
        argNames: [],
      );

  @override
  OpaqueTwoTwinSync rustAutoOpaqueReturnOpaqueTwoTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 851)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_sync",
        argNames: [],
      );

  @override
  NonCloneSimpleTwinSync rustAutoOpaqueReturnOwnTwinSync(
      {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 833)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinSyncConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_sync",
        argNames: ["initial"],
      );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 847)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 848)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSync(
      {required StructWithGoodAndOpaqueFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 846)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync",
            argNames: ["arg"],
          );

  @override
  StructWithGoodAndOpaqueFieldTwinSync
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSync(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 849)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTraitObjectArgBorrowTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 842)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 843)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgOwnTwinSync(
      {required BoxHelloTraitTwinSync arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 841)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_sync",
        argNames: ["arg", "expect"],
      );

  @override
  BoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnOneTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 844)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_sync",
        argNames: [],
      );

  @override
  BoxHelloTraitTwinSync rustAutoOpaqueTraitObjectReturnOwnTwoTwinSync(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 845)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_sync",
        argNames: [],
      );

  @override
  void rustAutoOpaqueTwoArgsTwinSync(
      {required NonCloneSimpleTwinSync a,
      required NonCloneSimpleTwinSync b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 835)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  void nonCloneSimpleTwinSyncMoiInstanceMethodArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 898)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiInstanceMethodArgBorrowTwinSyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiInstanceMethodArgBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_instance_method_arg_borrow_twin_sync_moi",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncMoiInstanceMethodArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 899)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiInstanceMethodArgMutBorrowTwinSyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiInstanceMethodArgMutBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_instance_method_arg_mut_borrow_twin_sync_moi",
            argNames: ["that"],
          );

  @override
  void nonCloneSimpleTwinSyncMoiInstanceMethodArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 897)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiInstanceMethodArgOwnTwinSyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiInstanceMethodArgOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_instance_method_arg_own_twin_sync_moi",
            argNames: ["that"],
          );

  @override
  int nonCloneSimpleTwinSyncMoiInstanceMethodGetterTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 901)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiInstanceMethodGetterTwinSyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiInstanceMethodGetterTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_instance_method_getter_twin_sync_moi",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSyncMoi
      nonCloneSimpleTwinSyncMoiInstanceMethodReturnOwnTwinSyncMoi(
          {required NonCloneSimpleTwinSyncMoi that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 900)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiInstanceMethodReturnOwnTwinSyncMoiConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiInstanceMethodReturnOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_instance_method_return_own_twin_sync_moi",
            argNames: ["that"],
          );

  @override
  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewCustomNameTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 895)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncMoiNewCustomNameTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiNewCustomNameTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_new_custom_name_twin_sync_moi",
            argNames: [],
          );

  @override
  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 894)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinSyncMoiNewTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinSyncMoiNewTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinSyncMoi_new_twin_sync_moi",
        argNames: [],
      );

  @override
  NonCloneSimpleTwinSyncMoi nonCloneSimpleTwinSyncMoiNewWithResultTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 896)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNonCloneSimpleTwinSyncMoiNewWithResultTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiNewWithResultTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_new_with_result_twin_sync_moi",
            argNames: [],
          );

  @override
  void nonCloneSimpleTwinSyncMoiStaticMethodArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 891)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiStaticMethodArgBorrowTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiStaticMethodArgBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_static_method_arg_borrow_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncMoiStaticMethodArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 892)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiStaticMethodArgMutBorrowTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiStaticMethodArgMutBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_static_method_arg_mut_borrow_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  void nonCloneSimpleTwinSyncMoiStaticMethodArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 890)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiStaticMethodArgOwnTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiStaticMethodArgOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_static_method_arg_own_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  NonCloneSimpleTwinSyncMoi
      nonCloneSimpleTwinSyncMoiStaticMethodReturnOwnTwinSyncMoi(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 893)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinSyncMoiStaticMethodReturnOwnTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinSyncMoiStaticMethodReturnOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinSyncMoi_static_method_return_own_twin_sync_moi",
            argNames: [],
          );

  @override
  void rustAutoOpaqueArgBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 867)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinSyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_sync_moi",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueArgMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 868)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinSyncMoiConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_sync_moi",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  NonCloneSimpleTwinSyncMoi rustAutoOpaqueArgOwnAndReturnOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 870)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_sync_moi",
        argNames: ["arg"],
      );

  @override
  void rustAutoOpaqueArgOwnTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi arg,
      required int expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 866)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinSyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_sync_moi",
        argNames: ["arg", "expect"],
      );

  @override
  int rustAutoOpaqueBorrowAndBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a,
      required NonCloneSimpleTwinSyncMoi b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 889)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinSyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_sync_moi",
        argNames: ["a", "b"],
      );

  @override
  int rustAutoOpaqueBorrowAndMutBorrowTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi borrow,
      required NonCloneSimpleTwinSyncMoi mutBorrow,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            mutBorrow, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 888)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinSyncMoiConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndMutBorrowTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_sync_moi",
        argNames: ["borrow", "mutBorrow"],
      );

  @override
  void rustAutoOpaqueCallableArgTwinSyncMoi(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 875)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_sync_moi",
        argNames: ["arg"],
      );

  @override
  BoxFnStringString rustAutoOpaqueCallableReturnTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 876)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_sync_moi",
        argNames: [],
      );

  @override
  void rustAutoOpaqueNormalAndOpaqueArgTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a, required String b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            a, serializer);
        sse_encode_String(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 872)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinSyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_sync_moi",
        argNames: ["a", "b"],
      );

  @override
  void rustAutoOpaquePlusSignArgTwinSyncMoi(
      {required BoxMyTraitTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 873)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_sync_moi",
        argNames: ["arg"],
      );

  @override
  BoxMyTraitTwinSyncMoi rustAutoOpaquePlusSignReturnTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 874)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_sync_moi",
        argNames: [],
      );

  @override
  OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 886)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_sync_moi",
        argNames: [],
      );

  @override
  OpaqueTwoTwinSyncMoi rustAutoOpaqueReturnOpaqueTwoTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 887)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_sync_moi",
        argNames: [],
      );

  @override
  NonCloneSimpleTwinSyncMoi rustAutoOpaqueReturnOwnTwinSyncMoi(
      {required int initial, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 869)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinSyncMoiConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_sync_moi",
        argNames: ["initial"],
      );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 883)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 884)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  void rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncMoi(
      {required StructWithGoodAndOpaqueFieldTwinSyncMoi arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 882)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncMoiConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_sync_moi",
            argNames: ["arg"],
          );

  @override
  StructWithGoodAndOpaqueFieldTwinSyncMoi
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncMoi(
          {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 885)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_sync_moi",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTraitObjectArgBorrowTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 878)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinSyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_sync_moi",
        argNames: ["arg", "expect"],
      );

  @override
  void rustAutoOpaqueTraitObjectArgMutBorrowTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 879)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectArgMutBorrowTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_arg_mut_borrow_twin_sync_moi",
            argNames: ["arg", "expect"],
          );

  @override
  void rustAutoOpaqueTraitObjectArgOwnTwinSyncMoi(
      {required BoxHelloTraitTwinSyncMoi arg,
      required String expect,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
            arg, serializer);
        sse_encode_String(expect, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 877)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinSyncMoiConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_sync_moi",
        argNames: ["arg", "expect"],
      );

  @override
  BoxHelloTraitTwinSyncMoi rustAutoOpaqueTraitObjectReturnOwnOneTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 880)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnOneTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_one_twin_sync_moi",
            argNames: [],
          );

  @override
  BoxHelloTraitTwinSyncMoi rustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncMoi(
      {dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 881)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinSyncMoiConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_trait_object_return_own_two_twin_sync_moi",
            argNames: [],
          );

  @override
  void rustAutoOpaqueTwoArgsTwinSyncMoi(
      {required NonCloneSimpleTwinSyncMoi a,
      required NonCloneSimpleTwinSyncMoi b,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
            b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 871)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinSyncMoiConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_sync_moi",
        argNames: ["a", "b"],
      );

  @override
  FrbOpaqueSyncReturnTwinMoi frbSyncGeneratorTestTwinMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 905)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_frb_opaque_sync_return_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kFrbSyncGeneratorTestTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSyncGeneratorTestTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "frb_sync_generator_test_twin_moi",
        argNames: [],
      );

  @override
  NonCloneDataTwinMoi syncCreateNonCloneTwinMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 904)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_non_clone_data_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateNonCloneTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateNonCloneTwinMoiConstMeta => const TaskConstMeta(
        debugName: "sync_create_non_clone_twin_moi",
        argNames: [],
      );

  @override
  HideDataAnotherTwinMoi syncCreateOpaqueTwinMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 903)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_another_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateOpaqueTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "sync_create_opaque_twin_moi",
        argNames: [],
      );

  @override
  HideDataAnotherTwinMoi? syncOptionRustOpaqueTwinMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 902)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_another_twin_moi,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSyncOptionRustOpaqueTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionRustOpaqueTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_rust_opaque_twin_moi",
        argNames: [],
      );

  @override
  Future<EnumOpaqueTwinMoiArray5> createArrayOpaqueEnumTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 908, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_moi_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_moi",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinMoi> createNestedOpaqueTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 917, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "create_nested_opaque_twin_moi",
        argNames: [],
      );

  @override
  Future<HideDataTwinMoi> createOpaqueTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 906, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_moi",
        argNames: [],
      );

  @override
  Future<HideDataTwinMoi?> createOptionOpaqueTwinMoi(
      {HideDataTwinMoi? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_moi(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 907, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "create_option_opaque_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<FrbOpaqueReturnTwinMoi> frbGeneratorTestTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 920, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frb_opaque_return_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinMoiConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_moi",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinMoi(
      {required HideDataTwinMoiArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_moi_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 914, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_moi",
        argNames: ["data"],
      );

  @override
  Future<HideDataTwinMoiArray2> opaqueArrayTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 912, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_moi_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_moi",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinMoi(
      {required List<HideDataTwinMoi> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_moi(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 916, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_moi",
        argNames: ["data"],
      );

  @override
  Future<List<HideDataTwinMoi>> opaqueVecTwinMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 915, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_hide_data_twin_moi,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_moi",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinMoi(
      {required EnumOpaqueTwinMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 909, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinMoi(
      {required OpaqueNestedTwinMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 918, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinMoi(
      {required NonCloneDataTwinMoi clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_moi(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 913, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinMoiConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinMoiConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_moi",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 910, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 911, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinMoiConstMeta => const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinMoi(
      {required HideDataTwinMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 919, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinMoiConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_moi",
        argNames: ["opaque"],
      );

  @override
  Future<EnumOpaqueTwinRustAsyncArray5> createArrayOpaqueEnumTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 923, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_rust_async_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_rust_async",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinRustAsync> createNestedOpaqueTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 932, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_rust_async",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsync> createOpaqueTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 921, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_rust_async",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsync?> createOptionOpaqueTwinRustAsync(
      {HideDataTwinRustAsync? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 922, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<FrbOpaqueReturnTwinRustAsync> frbGeneratorTestTwinRustAsync(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 935, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_frb_opaque_return_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinRustAsync(
      {required HideDataTwinRustAsyncArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async_array_2(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 929, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_rust_async",
        argNames: ["data"],
      );

  @override
  Future<HideDataTwinRustAsyncArray2> opaqueArrayTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 927, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_hide_data_twin_rust_async_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_rust_async",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinRustAsync(
      {required List<HideDataTwinRustAsync> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_rust_async(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 931, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinRustAsyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_rust_async",
        argNames: ["data"],
      );

  @override
  Future<List<HideDataTwinRustAsync>> opaqueVecTwinRustAsync({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 930, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_hide_data_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_rust_async",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinRustAsync(
      {required EnumOpaqueTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 924, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinRustAsync(
      {required OpaqueNestedTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_rust_async(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 933, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinRustAsync(
      {required NonCloneDataTwinRustAsync clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_rust_async(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 928, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinRustAsyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_rust_async",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 925, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 926, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinRustAsync(
      {required HideDataTwinRustAsync opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 934, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinRustAsyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_rust_async",
        argNames: ["opaque"],
      );

  @override
  Future<EnumOpaqueTwinRustAsyncMoiArray5>
      createArrayOpaqueEnumTwinRustAsyncMoi({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 938, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_rust_async_moi_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinRustAsyncMoi> createNestedOpaqueTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 947, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_rust_async_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsyncMoi> createOpaqueTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 936, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_rust_async_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_opaque_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<HideDataTwinRustAsyncMoi?> createOptionOpaqueTwinRustAsyncMoi(
      {HideDataTwinRustAsyncMoi? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 937, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  Future<FrbOpaqueReturnTwinRustAsyncMoi> frbGeneratorTestTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 950, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_frb_opaque_return_twin_rust_async_moi,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoiArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async_moi_array_2(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 944, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinRustAsyncMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_run_twin_rust_async_moi",
        argNames: ["data"],
      );

  @override
  Future<HideDataTwinRustAsyncMoiArray2> opaqueArrayTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 942, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_hide_data_twin_rust_async_moi_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_array_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinRustAsyncMoi(
      {required List<HideDataTwinRustAsyncMoi> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_rust_async_moi(
            data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 946, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinRustAsyncMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "opaque_vec_run_twin_rust_async_moi",
        argNames: ["data"],
      );

  @override
  Future<List<HideDataTwinRustAsyncMoi>> opaqueVecTwinRustAsyncMoi(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 945, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_RustOpaque_hide_data_twin_rust_async_moi,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinRustAsyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinRustAsyncMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_rust_async_moi",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinRustAsyncMoi(
      {required EnumOpaqueTwinRustAsyncMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_rust_async_moi(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 939, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "run_enum_opaque_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinRustAsyncMoi(
      {required OpaqueNestedTwinRustAsyncMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_rust_async_moi(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 948, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "run_nested_opaque_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinRustAsyncMoi(
      {required NonCloneDataTwinRustAsyncMoi clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_rust_async_moi(
            clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 943, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinRustAsyncMoiConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "run_non_clone_twin_rust_async_moi",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 940, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinRustAsyncMoiConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 941, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinRustAsyncMoi(
      {required HideDataTwinRustAsyncMoi opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_rust_async_moi(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 949, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinRustAsyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinRustAsyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_rust_async_moi",
        argNames: ["opaque"],
      );

  @override
  EnumOpaqueTwinSyncArray5 createArrayOpaqueEnumTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 953)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_sync_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_sync",
        argNames: [],
      );

  @override
  OpaqueNestedTwinSync createNestedOpaqueTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 962)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_nested_opaque_twin_sync",
        argNames: [],
      );

  @override
  HideDataTwinSync createOpaqueTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 951)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_sync",
        argNames: [],
      );

  @override
  HideDataTwinSync? createOptionOpaqueTwinSync(
      {HideDataTwinSync? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_sync(
            opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 952)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "create_option_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  FrbOpaqueReturnTwinSync frbGeneratorTestTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 965)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frb_opaque_return_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinSyncConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_sync",
        argNames: [],
      );

  @override
  void opaqueArrayRunTwinSync(
      {required HideDataTwinSyncArray2 data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync_array_2(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 959)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_sync",
        argNames: ["data"],
      );

  @override
  HideDataTwinSyncArray2 opaqueArrayTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 957)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_sync_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_sync",
        argNames: [],
      );

  @override
  void opaqueVecRunTwinSync(
      {required List<HideDataTwinSync> data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_sync(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 961)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinSyncConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_sync",
        argNames: ["data"],
      );

  @override
  List<HideDataTwinSync> opaqueVecTwinSync({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 960)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_hide_data_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinSyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinSyncConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_sync",
        argNames: [],
      );

  @override
  String runEnumOpaqueTwinSync(
      {required EnumOpaqueTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 954)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  void runNestedOpaqueTwinSync(
      {required OpaqueNestedTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 963)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String runNonCloneTwinSync(
      {required NonCloneDataTwinSync clone, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_sync(clone, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 958)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinSyncConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_sync",
        argNames: ["clone"],
      );

  @override
  String runOpaqueTwinSync({required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 955)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String runOpaqueWithDelayTwinSync(
      {required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 956)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinSyncConstMeta => const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_sync",
        argNames: ["opaque"],
      );

  @override
  String unwrapRustOpaqueTwinSync(
      {required HideDataTwinSync opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 964)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinSyncConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinSyncConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_sync",
        argNames: ["opaque"],
      );

  @override
  EnumOpaqueTwinSyncMoiArray5 createArrayOpaqueEnumTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 968)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_sync_moi_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_sync_moi",
        argNames: [],
      );

  @override
  OpaqueNestedTwinSyncMoi createNestedOpaqueTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 977)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_sync_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_sync_moi",
        argNames: [],
      );

  @override
  HideDataTwinSyncMoi createOpaqueTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 966)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_sync_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_sync_moi",
        argNames: [],
      );

  @override
  HideDataTwinSyncMoi? createOptionOpaqueTwinSyncMoi(
      {HideDataTwinSyncMoi? opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
            opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 967)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_sync_moi,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  FrbOpaqueReturnTwinSyncMoi frbGeneratorTestTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 980)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_frb_opaque_return_twin_sync_moi,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "frb_generator_test_twin_sync_moi",
        argNames: [],
      );

  @override
  void opaqueArrayRunTwinSyncMoi(
      {required HideDataTwinSyncMoiArray2 data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync_moi_array_2(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 974)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinSyncMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_sync_moi",
        argNames: ["data"],
      );

  @override
  HideDataTwinSyncMoiArray2 opaqueArrayTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 972)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_hide_data_twin_sync_moi_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_sync_moi",
        argNames: [],
      );

  @override
  void opaqueVecRunTwinSyncMoi(
      {required List<HideDataTwinSyncMoi> data, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_sync_moi(data, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 976)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinSyncMoiConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_sync_moi",
        argNames: ["data"],
      );

  @override
  List<HideDataTwinSyncMoi> opaqueVecTwinSyncMoi({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 975)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_hide_data_twin_sync_moi,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinSyncMoiConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_sync_moi",
        argNames: [],
      );

  @override
  String runEnumOpaqueTwinSyncMoi(
      {required EnumOpaqueTwinSyncMoi opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_sync_moi(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 969)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  void runNestedOpaqueTwinSyncMoi(
      {required OpaqueNestedTwinSyncMoi opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_sync_moi(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 978)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  String runNonCloneTwinSyncMoi(
      {required NonCloneDataTwinSyncMoi clone, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_sync_moi(clone, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 973)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinSyncMoiConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_sync_moi",
        argNames: ["clone"],
      );

  @override
  String runOpaqueTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync_moi(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 970)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinSyncMoiConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  String runOpaqueWithDelayTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync_moi(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 971)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  String unwrapRustOpaqueTwinSyncMoi(
      {required HideDataTwinSyncMoi opaque, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_sync_moi(opaque, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 979)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinSyncMoiConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinSyncMoiConstMeta =>
      const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_sync_moi",
        argNames: ["opaque"],
      );

  @override
  Future<int> simpleAdderTwinRustAsync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 981, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  int simpleAdderTwinSync({required int a, required int b, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 982)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinSyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinSyncConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_sync",
        argNames: ["a", "b"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 983, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinRustAsync({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 984, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinRustAsync(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 985, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinRustAsyncConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_rust_async",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinRustAsync> handleStreamOfStructTwinRustAsync(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 986, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_stream_entry_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinRustAsyncConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_rust_async",
        argNames: [],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt1TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 987, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt2TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 988, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinRustAsync> handleStreamSinkAt3TwinRustAsync(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 989, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinRustAsyncConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_rust_async",
        argNames: ["key", "max"],
      );

  @override
  Future<StructWithOneFieldTwinRustAsync> funcStructWithOneFieldTwinRustAsync(
      {required StructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 991, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinRustAsync> funcStructWithTwoFieldTwinRustAsync(
      {required StructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 992, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinRustAsync> funcStructWithZeroFieldTwinRustAsync(
      {required StructWithZeroFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 990, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinRustAsync>
      funcTupleStructWithOneFieldTwinRustAsync(
          {required TupleStructWithOneFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 993, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_one_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinRustAsync>
      funcTupleStructWithTwoFieldTwinRustAsync(
          {required TupleStructWithTwoFieldTwinRustAsync arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 994, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_tuple_struct_with_two_field_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_rust_async",
        argNames: ["arg"],
      );

  @override
  StructWithOneFieldTwinSync funcStructWithOneFieldTwinSync(
      {required StructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 996)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  StructWithTwoFieldTwinSync funcStructWithTwoFieldTwinSync(
      {required StructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_sync(arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 997)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  StructWithZeroFieldTwinSync funcStructWithZeroFieldTwinSync(
      {required StructWithZeroFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 995)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  TupleStructWithOneFieldTwinSync funcTupleStructWithOneFieldTwinSync(
      {required TupleStructWithOneFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 998)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  TupleStructWithTwoFieldTwinSync funcTupleStructWithTwoFieldTwinSync(
      {required TupleStructWithTwoFieldTwinSync arg, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
            arg, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 999)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinSyncConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_sync",
        argNames: ["arg"],
      );

  @override
  Future<void> testTuple2TwinRustAsync(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1001, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_rust_async",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinRustAsync(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1000, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinRustAsyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinRustAsyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_rust_async",
        argNames: ["value"],
      );

  @override
  void testTuple2TwinSync({required List<(String, int)> value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1003)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_sync",
        argNames: ["value"],
      );

  @override
  (String, int) testTupleTwinSync({(String, int)? value, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1002)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinSyncConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinSyncConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_sync",
        argNames: ["value"],
      );

  @override
  Future<int> handleTypeAliasIdTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1004, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinRustAsync> handleTypeAliasModelTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1006, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_rust_async,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_rust_async",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinRustAsync(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1005, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinRustAsyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinRustAsyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_rust_async",
        argNames: ["input"],
      );

  @override
  int handleTypeAliasIdTwinSync({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1007)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinSyncConstMeta => const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_sync",
        argNames: ["input"],
      );

  @override
  TestModelTwinSync handleTypeAliasModelTwinSync(
      {required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1009)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_sync,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_sync",
        argNames: ["input"],
      );

  @override
  int handleTypeNestAliasIdTwinSync({required int input, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1008)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinSyncConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinSyncConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_sync",
        argNames: ["input"],
      );

  @override
  Future<MoreThanJustOneRawStringStructTwinNormal>
      testMoreThanJustOneRawStringStructTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1011, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_more_than_just_one_raw_string_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestMoreThanJustOneRawStringStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestMoreThanJustOneRawStringStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_more_than_just_one_raw_string_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<RawStringItemStructTwinNormal> testRawStringItemStructTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1010, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_raw_string_item_struct_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kTestRawStringItemStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestRawStringItemStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "test_raw_string_item_struct_twin_normal",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1044, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1045, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_mut_borrow_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1043, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_arg_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<int> nonCloneSimpleTwinNormalInstanceMethodGetterTwinNormal(
      {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1047, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodGetterTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_getter_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormal(
          {required NonCloneSimpleTwinNormal that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1046, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalInstanceMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_instance_method_return_own_twin_normal",
            argNames: ["that"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewCustomNameTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1041, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinNormalNewCustomNameTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinNormal_new_custom_name_twin_normal",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinNormal> nonCloneSimpleTwinNormalNewTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1040, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalNewTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinNormalNewTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinNormal_new_twin_normal",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalNewWithResultTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1042, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNonCloneSimpleTwinNormalNewWithResultTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "NonCloneSimpleTwinNormal_new_with_result_twin_normal",
        argNames: [],
      );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1037, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1038, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> nonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1036, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<NonCloneSimpleTwinNormal>
      nonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1039, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kNonCloneSimpleTwinNormalStaticMethodReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "NonCloneSimpleTwinNormal_static_method_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueArgBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1013, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueArgMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      required int adder,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        sse_encode_i_32(adder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1014, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect, adder],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgMutBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_mut_borrow_twin_normal",
        argNames: ["arg", "expect", "adder"],
      );

  @override
  Future<NonCloneSimpleTwinNormal> rustAutoOpaqueArgOwnAndReturnOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1016, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnAndReturnOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_and_return_own_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> rustAutoOpaqueArgOwnTwinNormal(
      {required NonCloneSimpleTwinNormal arg,
      required int expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            arg, serializer);
        sse_encode_i_32(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1012, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueArgOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_arg_own_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1035, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_borrow_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<int> rustAutoOpaqueBorrowAndMutBorrowTwinNormal(
      {required NonCloneSimpleTwinNormal borrow,
      required NonCloneSimpleTwinNormal mutBorrow,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            borrow, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            mutBorrow, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1034, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta,
      argValues: [borrow, mutBorrow],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueBorrowAndMutBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_borrow_and_mut_borrow_twin_normal",
        argNames: ["borrow", "mutBorrow"],
      );

  @override
  Future<void> rustAutoOpaqueCallableArgTwinNormal(
      {required BoxFnStringString arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1021, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_arg_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<BoxFnStringString> rustAutoOpaqueCallableReturnTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1022, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueCallableReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueCallableReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_callable_return_twin_normal",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueNormalAndOpaqueArgTwinNormal(
      {required NonCloneSimpleTwinNormal a, required String b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_String(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1018, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueNormalAndOpaqueArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_normal_and_opaque_arg_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<void> rustAutoOpaquePlusSignArgTwinNormal(
      {required BoxMyTraitTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1019, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignArgTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignArgTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_arg_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<BoxMyTraitTwinNormal> rustAutoOpaquePlusSignReturnTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1020, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaquePlusSignReturnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaquePlusSignReturnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_plus_sign_return_twin_normal",
        argNames: [],
      );

  @override
  Future<OpaqueOneTwinNormalOpaqueTwoTwinNormal>
      rustAutoOpaqueReturnOpaqueOneAndTwoTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1032, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueOneAndTwoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_one_and_two_twin_normal",
        argNames: [],
      );

  @override
  Future<OpaqueTwoTwinNormal> rustAutoOpaqueReturnOpaqueTwoTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1033, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOpaqueTwoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_opaque_two_twin_normal",
        argNames: [],
      );

  @override
  Future<NonCloneSimpleTwinNormal> rustAutoOpaqueReturnOwnTwinNormal(
      {required int initial, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(initial, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1015, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueReturnOwnTwinNormalConstMeta,
      argValues: [initial],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueReturnOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_return_own_twin_normal",
        argNames: ["initial"],
      );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1029, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1030, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgMutBorrowTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_mut_borrow_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<void> rustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormal(
      {required StructWithGoodAndOpaqueFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1028, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldArgOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_arg_own_twin_normal",
            argNames: ["arg"],
          );

  @override
  Future<StructWithGoodAndOpaqueFieldTwinNormal>
      rustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormal(
          {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1031, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal,
        decodeErrorData: null,
      ),
      constMeta:
          kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta
      get kRustAutoOpaqueStructWithGoodAndOpaqueFieldReturnOwnTwinNormalConstMeta =>
          const TaskConstMeta(
            debugName:
                "rust_auto_opaque_struct_with_good_and_opaque_field_return_own_twin_normal",
            argNames: [],
          );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgBorrowTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1024, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgMutBorrowTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1025, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgMutBorrowTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_mut_borrow_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<void> rustAutoOpaqueTraitObjectArgOwnTwinNormal(
      {required BoxHelloTraitTwinNormal arg,
      required String expect,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
            arg, serializer);
        sse_encode_String(expect, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1023, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta,
      argValues: [arg, expect],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectArgOwnTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_arg_own_twin_normal",
        argNames: ["arg", "expect"],
      );

  @override
  Future<BoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnOneTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1026, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnOneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_one_twin_normal",
        argNames: [],
      );

  @override
  Future<BoxHelloTraitTwinNormal>
      rustAutoOpaqueTraitObjectReturnOwnTwoTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1027, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTraitObjectReturnOwnTwoTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_trait_object_return_own_two_twin_normal",
        argNames: [],
      );

  @override
  Future<void> rustAutoOpaqueTwoArgsTwinNormal(
      {required NonCloneSimpleTwinNormal a,
      required NonCloneSimpleTwinNormal b,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            a, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
            b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1017, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustAutoOpaqueTwoArgsTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustAutoOpaqueTwoArgsTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "rust_auto_opaque_two_args_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Future<EnumOpaqueTwinNormalArray5> createArrayOpaqueEnumTwinNormal(
      {dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1050, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_enum_opaque_twin_normal_array_5,
        decodeErrorData: null,
      ),
      constMeta: kCreateArrayOpaqueEnumTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateArrayOpaqueEnumTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_array_opaque_enum_twin_normal",
        argNames: [],
      );

  @override
  Future<OpaqueNestedTwinNormal> createNestedOpaqueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1059, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opaque_nested_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateNestedOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateNestedOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_nested_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinNormal> createOpaqueTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1048, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "create_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<HideDataTwinNormal?> createOptionOpaqueTwinNormal(
      {HideDataTwinNormal? opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_normal(
            opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1049, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kCreateOptionOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateOptionOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "create_option_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<FrbOpaqueReturnTwinNormal> frbGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1062, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_frb_opaque_return_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFrbGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbGeneratorTestTwinNormalConstMeta => const TaskConstMeta(
        debugName: "frb_generator_test_twin_normal",
        argNames: [],
      );

  @override
  Future<void> opaqueArrayRunTwinNormal(
      {required HideDataTwinNormalArray2 data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_normal_array_2(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1056, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayRunTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_array_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<HideDataTwinNormalArray2> opaqueArrayTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1054, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_twin_normal_array_2,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueArrayTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueArrayTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_array_twin_normal",
        argNames: [],
      );

  @override
  Future<void> opaqueVecRunTwinNormal(
      {required List<HideDataTwinNormal> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_RustOpaque_hide_data_twin_normal(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1058, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecRunTwinNormalConstMeta,
      argValues: [data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecRunTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_run_twin_normal",
        argNames: ["data"],
      );

  @override
  Future<List<HideDataTwinNormal>> opaqueVecTwinNormal({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1057, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_RustOpaque_hide_data_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kOpaqueVecTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kOpaqueVecTwinNormalConstMeta => const TaskConstMeta(
        debugName: "opaque_vec_twin_normal",
        argNames: [],
      );

  @override
  Future<String> runEnumOpaqueTwinNormal(
      {required EnumOpaqueTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_enum_opaque_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1051, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunEnumOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunEnumOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_enum_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<void> runNestedOpaqueTwinNormal(
      {required OpaqueNestedTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_opaque_nested_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1060, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRunNestedOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNestedOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_nested_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> runNonCloneTwinNormal(
      {required NonCloneDataTwinNormal clone, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_non_clone_data_twin_normal(clone, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1055, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunNonCloneTwinNormalConstMeta,
      argValues: [clone],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunNonCloneTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_non_clone_twin_normal",
        argNames: ["clone"],
      );

  @override
  Future<String> runOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1052, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "run_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> runOpaqueWithDelayTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1053, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kRunOpaqueWithDelayTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRunOpaqueWithDelayTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "run_opaque_with_delay_twin_normal",
        argNames: ["opaque"],
      );

  @override
  Future<String> unwrapRustOpaqueTwinNormal(
      {required HideDataTwinNormal opaque, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_RustOpaque_hide_data_twin_normal(opaque, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1061, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kUnwrapRustOpaqueTwinNormalConstMeta,
      argValues: [opaque],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kUnwrapRustOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "unwrap_rust_opaque_twin_normal",
        argNames: ["opaque"],
      );

  @override
  FrbOpaqueSyncReturnTwinNormal frbSyncGeneratorTestTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1066)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_RustOpaque_frb_opaque_sync_return_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFrbSyncGeneratorTestTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFrbSyncGeneratorTestTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "frb_sync_generator_test_twin_normal",
        argNames: [],
      );

  @override
  NonCloneDataTwinNormal syncCreateNonCloneTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1065)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_non_clone_data_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateNonCloneTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateNonCloneTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_create_non_clone_twin_normal",
        argNames: [],
      );

  @override
  HideDataAnotherTwinNormal syncCreateOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1064)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_RustOpaque_hide_data_another_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kSyncCreateOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncCreateOpaqueTwinNormalConstMeta => const TaskConstMeta(
        debugName: "sync_create_opaque_twin_normal",
        argNames: [],
      );

  @override
  HideDataAnotherTwinNormal? syncOptionRustOpaqueTwinNormal({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1063)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_RustOpaque_hide_data_another_twin_normal,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kSyncOptionRustOpaqueTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSyncOptionRustOpaqueTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "sync_option_rust_opaque_twin_normal",
        argNames: [],
      );

  @override
  Future<int> simpleAdderTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(a, serializer);
        sse_encode_i_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1067, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kSimpleAdderTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSimpleAdderTwinNormalConstMeta => const TaskConstMeta(
        debugName: "simple_adder_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Stream<String> funcStreamReturnErrorTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1068, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnErrorTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnErrorTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_error_twin_normal",
        argNames: [],
      );

  @override
  Stream<String> funcStreamReturnPanicTwinNormal({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1069, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kFuncStreamReturnPanicTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamReturnPanicTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_return_panic_twin_normal",
        argNames: [],
      );

  @override
  Stream<int> funcStreamSinkArgPositionTwinNormal(
      {required int a, required int b, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(a, serializer);
        sse_encode_u_32(b, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1070, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamSinkArgPositionTwinNormalConstMeta,
      argValues: [a, b],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamSinkArgPositionTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_sink_arg_position_twin_normal",
        argNames: ["a", "b"],
      );

  @override
  Stream<MyStreamEntryTwinNormal> handleStreamOfStructTwinNormal(
      {dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1071, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_my_stream_entry_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamOfStructTwinNormalConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamOfStructTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_of_struct_twin_normal",
        argNames: [],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt1TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1072, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt1TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt1TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_1_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt2TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1073, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt2TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt2TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_2_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<LogTwinNormal> handleStreamSinkAt3TwinNormal(
      {required int key, required int max, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_32(key, serializer);
        sse_encode_u_32(max, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1074, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_log_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleStreamSinkAt3TwinNormalConstMeta,
      argValues: [key, max],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleStreamSinkAt3TwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_stream_sink_at_3_twin_normal",
        argNames: ["key", "max"],
      );

  @override
  Stream<String> funcStreamRealisticTwinNormal(
      {required String arg, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1075, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kFuncStreamRealisticTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStreamRealisticTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_stream_realistic_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithOneFieldTwinNormal> funcStructWithOneFieldTwinNormal(
      {required StructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1077, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithOneFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_one_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithTwoFieldTwinNormal> funcStructWithTwoFieldTwinNormal(
      {required StructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1078, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithTwoFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_two_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<StructWithZeroFieldTwinNormal> funcStructWithZeroFieldTwinNormal(
      {required StructWithZeroFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1076, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_struct_with_zero_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncStructWithZeroFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncStructWithZeroFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_struct_with_zero_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithOneFieldTwinNormal>
      funcTupleStructWithOneFieldTwinNormal(
          {required TupleStructWithOneFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1079, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_one_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithOneFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithOneFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_one_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<TupleStructWithTwoFieldTwinNormal>
      funcTupleStructWithTwoFieldTwinNormal(
          {required TupleStructWithTwoFieldTwinNormal arg, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
            arg, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1080, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_tuple_struct_with_two_field_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kFuncTupleStructWithTwoFieldTwinNormalConstMeta,
      argValues: [arg],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFuncTupleStructWithTwoFieldTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "func_tuple_struct_with_two_field_twin_normal",
        argNames: ["arg"],
      );

  @override
  Future<void> testTuple2TwinNormal(
      {required List<(String, int)> value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1082, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTestTuple2TwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTuple2TwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_tuple_2_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<(String, int)> testTupleTwinNormal(
      {(String, int)? value, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_opt_box_autoadd_record_string_i_32(value, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1081, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_string_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTestTupleTwinNormalConstMeta,
      argValues: [value],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTestTupleTwinNormalConstMeta => const TaskConstMeta(
        debugName: "test_tuple_twin_normal",
        argNames: ["value"],
      );

  @override
  Future<int> handleTypeAliasIdTwinNormal({required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1083, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_id_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<TestModelTwinNormal> handleTypeAliasModelTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1085, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_test_model_twin_normal,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeAliasModelTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeAliasModelTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_alias_model_twin_normal",
        argNames: ["input"],
      );

  @override
  Future<int> handleTypeNestAliasIdTwinNormal(
      {required int input, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_u_64(input, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1084, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kHandleTypeNestAliasIdTwinNormalConstMeta,
      argValues: [input],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kHandleTypeNestAliasIdTwinNormalConstMeta =>
      const TaskConstMeta(
        debugName: "handle_type_nest_alias_id_twin_normal",
        argNames: ["input"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_DartOpaque_Output_unit(
          FutureOr<void> Function(Object) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_DartOpaque(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic) encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic, dynamic)
      encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0, rawArg1) async {
      final arg0 = dco_decode_String(rawArg0);
      final arg1 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg1);

      final rawOutput = await raw(arg0, arg1);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_DartOpaque(FutureOr<Object> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_DartOpaque(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_String(FutureOr<String> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_String(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_unit(FutureOr<void> Function() raw) {
    return (
      callId,
    ) async {
      final rawOutput = await raw();

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_normal(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_demo_struct_for_rust_call_dart_twin_normal(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              raw) {
    return (callId, rawArg0) async {
      final arg0 =
          dco_decode_demo_struct_for_rust_call_dart_twin_rust_async(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
          rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexHideDataTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_MutexHideDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexHideDataTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_MutexHideDataTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RwLockHideDataTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_RwLockHideDataTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RwLockHideDataTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_RwLockHideDataTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxDartDebugTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_box_dynDartDebugTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxDartDebugTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_box_dynDartDebugTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxFnStringString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxFnStringString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxHelloTraitTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxHelloTraitTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxMyTraitTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneSimpleTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneSimpleTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleA => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructInMiscNoTwinExampleB => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinRustAsyncMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithGoodAndOpaqueFieldTwinSyncMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithGoodAndOpaqueFieldTwinSyncMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_StructWithImplBlockInMultiFile => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinMoiOpaqueTwoTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinMoiOpaqueTwoTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSyncOpaqueTwoTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncOpaqueTwoTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueOneTwinNormalOpaqueTwoTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueOneTwinNormalOpaqueTwoTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OpaqueTwoTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_normal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_normal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_rust_async;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_rust_async;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_rust_async_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_rust_async_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_sync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_sync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueReturnTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_return_twin_sync_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueReturnTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_return_twin_sync_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return_twin_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return_twin_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_frb_opaque_sync_return_twin_normal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_FrbOpaqueSyncReturnTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_frb_opaque_sync_return_twin_normal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_hide_data_another_twin_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_hide_data_another_twin_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_hide_data_another_twin_normal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataAnotherTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_hide_data_another_twin_normal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinMoi =>
          wire.rust_arc_increment_strong_count_RustOpaque_hide_data_twin_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinMoi =>
          wire.rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinNormal =>
          wire.rust_arc_increment_strong_count_RustOpaque_hide_data_twin_normal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinNormal =>
          wire.rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_normal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_hide_data_twin_rust_async;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_rust_async;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_hide_data_twin_rust_async_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_rust_async_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSync =>
          wire.rust_arc_increment_strong_count_RustOpaque_hide_data_twin_sync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSync =>
          wire.rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_sync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_HideDataTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_hide_data_twin_sync_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_HideDataTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_hide_data_twin_sync_moi;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I16 =>
      wire.rust_arc_increment_strong_count_RustOpaque_i_16;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I16 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i_16;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_I32 =>
      wire.rust_arc_increment_strong_count_RustOpaque_i_32;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_I32 =>
      wire.rust_arc_decrement_strong_count_RustOpaque_i_32;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_normal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinNormal => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_normal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_rust_async;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsync => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_rust_async;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinRustAsyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_rust_async_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinRustAsyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_rust_async_moi;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSync => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_sync;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSync => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_sync;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NonCloneDataTwinSyncMoi => wire
          .rust_arc_increment_strong_count_RustOpaque_non_clone_data_twin_sync_moi;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NonCloneDataTwinSyncMoi => wire
          .rust_arc_decrement_strong_count_RustOpaque_non_clone_data_twin_sync_moi;

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BoxFnStringString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    return BoxFnStringString.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinMoiOpaqueTwoTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinMoiOpaqueTwoTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    return OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSyncOpaqueTwoTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    return OpaqueOneTwinSyncOpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSyncMoi
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormalOpaqueTwoTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    return OpaqueOneTwinNormalOpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSyncMoi
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    return StructInMiscNoTwinExampleB.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSyncMoi
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    return StructWithImplBlockInMultiFile.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_Backtrace(SseDeserializer deserializer) {
    var inner = sse_decode_String(deserializer);
    return inner;
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  ObjectArray1 sse_decode_DartOpaque_array_1(SseDeserializer deserializer) {
    var inner = sse_decode_list_DartOpaque(deserializer);
    return ObjectArray1(inner);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinNormal>
      sse_decode_Map_String_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_enum_simple_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinRustAsync>
      sse_decode_Map_String_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_enum_simple_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, EnumSimpleTwinSync> sse_decode_Map_String_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_enum_simple_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinNormal>
      sse_decode_Map_String_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinRustAsync>
      sse_decode_Map_String_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_record_string_kitchen_sink_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, KitchenSinkTwinSync> sse_decode_Map_String_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_kitchen_sink_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, Uint8List> sse_decode_Map_String_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_string_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<String, MySize> sse_decode_Map_String_my_size(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_record_string_my_size(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, String> sse_decode_Map_i_32_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinNormal>
      sse_decode_Map_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicGeneralEnumTwinSync>
      sse_decode_Map_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_i_32_basic_general_enum_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinNormal>
      sse_decode_Map_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinRustAsync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
            deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicPrimitiveEnumTwinSync>
      sse_decode_Map_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
        deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinNormal> sse_decode_Map_i_32_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_normal(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinRustAsync>
      sse_decode_Map_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_rust_async(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, BasicStructTwinSync> sse_decode_Map_i_32_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    var inner =
        sse_decode_list_record_i_32_basic_struct_twin_sync(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, bool> sse_decode_Map_i_32_bool(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_bool(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_32(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_f_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, double> sse_decode_Map_i_32_f_64(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_f_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_16(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_i_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_32(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_i_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_64(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_i_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_i_8(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_i_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_isize(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_isize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, Uint8List> sse_decode_Map_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_list_prim_u_8_strict(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_16(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_u_16(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_32(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_u_32(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_64(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_u_64(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_u_8(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_u_8(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<int, int> sse_decode_Map_i_32_usize(SseDeserializer deserializer) {
    var inner = sse_decode_list_record_i_32_usize(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  MutexHideDataTwinMoi sse_decode_RustOpaque_MutexHideDataTwinMoi(
      SseDeserializer deserializer) {
    return MutexHideDataTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinNormal sse_decode_RustOpaque_MutexHideDataTwinNormal(
      SseDeserializer deserializer) {
    return MutexHideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinRustAsync sse_decode_RustOpaque_MutexHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    return MutexHideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinRustAsyncMoi
      sse_decode_RustOpaque_MutexHideDataTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return MutexHideDataTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinSync sse_decode_RustOpaque_MutexHideDataTwinSync(
      SseDeserializer deserializer) {
    return MutexHideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexHideDataTwinSyncMoi sse_decode_RustOpaque_MutexHideDataTwinSyncMoi(
      SseDeserializer deserializer) {
    return MutexHideDataTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinMoi sse_decode_RustOpaque_RwLockHideDataTwinMoi(
      SseDeserializer deserializer) {
    return RwLockHideDataTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinNormal sse_decode_RustOpaque_RwLockHideDataTwinNormal(
      SseDeserializer deserializer) {
    return RwLockHideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinRustAsync sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(
      SseDeserializer deserializer) {
    return RwLockHideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinRustAsyncMoi
      sse_decode_RustOpaque_RwLockHideDataTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return RwLockHideDataTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinSync sse_decode_RustOpaque_RwLockHideDataTwinSync(
      SseDeserializer deserializer) {
    return RwLockHideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RwLockHideDataTwinSyncMoi sse_decode_RustOpaque_RwLockHideDataTwinSyncMoi(
      SseDeserializer deserializer) {
    return RwLockHideDataTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinMoi sse_decode_RustOpaque_box_dynDartDebugTwinMoi(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinNormal sse_decode_RustOpaque_box_dynDartDebugTwinNormal(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinRustAsync sse_decode_RustOpaque_box_dynDartDebugTwinRustAsync(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinRustAsyncMoi
      sse_decode_RustOpaque_box_dynDartDebugTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return BoxDartDebugTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinSync sse_decode_RustOpaque_box_dynDartDebugTwinSync(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxDartDebugTwinSyncMoi sse_decode_RustOpaque_box_dynDartDebugTwinSyncMoi(
      SseDeserializer deserializer) {
    return BoxDartDebugTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxFnStringString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
          SseDeserializer deserializer) {
    return BoxFnStringString.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxHelloTraitTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          SseDeserializer deserializer) {
    return BoxHelloTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxMyTraitTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
          SseDeserializer deserializer) {
    return BoxMyTraitTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneSimpleTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          SseDeserializer deserializer) {
    return NonCloneSimpleTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleA
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          SseDeserializer deserializer) {
    return StructInMiscNoTwinExampleA.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructInMiscNoTwinExampleB
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
          SseDeserializer deserializer) {
    return StructInMiscNoTwinExampleB.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithGoodAndOpaqueFieldTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          SseDeserializer deserializer) {
    return StructWithGoodAndOpaqueFieldTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  StructWithImplBlockInMultiFile
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
          SseDeserializer deserializer) {
    return StructWithImplBlockInMultiFile.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinMoiOpaqueTwoTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinMoiOpaqueTwoTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    return OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinRustAsyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSyncOpaqueTwoTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    return OpaqueOneTwinSyncOpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSync
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          SseDeserializer deserializer) {
    return OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinSyncMoi
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueOneTwinNormalOpaqueTwoTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    return OpaqueOneTwinNormalOpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OpaqueTwoTwinNormal
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          SseDeserializer deserializer) {
    return OpaqueTwoTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinMoi sse_decode_RustOpaque_frb_opaque_return_twin_moi(
      SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinNormal sse_decode_RustOpaque_frb_opaque_return_twin_normal(
      SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinRustAsync
      sse_decode_RustOpaque_frb_opaque_return_twin_rust_async(
          SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinRustAsyncMoi
      sse_decode_RustOpaque_frb_opaque_return_twin_rust_async_moi(
          SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinSync sse_decode_RustOpaque_frb_opaque_return_twin_sync(
      SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueReturnTwinSyncMoi
      sse_decode_RustOpaque_frb_opaque_return_twin_sync_moi(
          SseDeserializer deserializer) {
    return FrbOpaqueReturnTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueSyncReturnTwinMoi
      sse_decode_RustOpaque_frb_opaque_sync_return_twin_moi(
          SseDeserializer deserializer) {
    return FrbOpaqueSyncReturnTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  FrbOpaqueSyncReturnTwinNormal
      sse_decode_RustOpaque_frb_opaque_sync_return_twin_normal(
          SseDeserializer deserializer) {
    return FrbOpaqueSyncReturnTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataAnotherTwinMoi sse_decode_RustOpaque_hide_data_another_twin_moi(
      SseDeserializer deserializer) {
    return HideDataAnotherTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal sse_decode_RustOpaque_hide_data_another_twin_normal(
      SseDeserializer deserializer) {
    return HideDataAnotherTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinMoi sse_decode_RustOpaque_hide_data_twin_moi(
      SseDeserializer deserializer) {
    return HideDataTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinMoiArray2 sse_decode_RustOpaque_hide_data_twin_moi_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_RustOpaque_hide_data_twin_moi(deserializer);
    return HideDataTwinMoiArray2(inner);
  }

  @protected
  HideDataTwinNormal sse_decode_RustOpaque_hide_data_twin_normal(
      SseDeserializer deserializer) {
    return HideDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinNormalArray2 sse_decode_RustOpaque_hide_data_twin_normal_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_RustOpaque_hide_data_twin_normal(deserializer);
    return HideDataTwinNormalArray2(inner);
  }

  @protected
  HideDataTwinRustAsync sse_decode_RustOpaque_hide_data_twin_rust_async(
      SseDeserializer deserializer) {
    return HideDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinRustAsyncArray2
      sse_decode_RustOpaque_hide_data_twin_rust_async_array_2(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_RustOpaque_hide_data_twin_rust_async(deserializer);
    return HideDataTwinRustAsyncArray2(inner);
  }

  @protected
  HideDataTwinRustAsyncMoi sse_decode_RustOpaque_hide_data_twin_rust_async_moi(
      SseDeserializer deserializer) {
    return HideDataTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinRustAsyncMoiArray2
      sse_decode_RustOpaque_hide_data_twin_rust_async_moi_array_2(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_RustOpaque_hide_data_twin_rust_async_moi(deserializer);
    return HideDataTwinRustAsyncMoiArray2(inner);
  }

  @protected
  HideDataTwinSync sse_decode_RustOpaque_hide_data_twin_sync(
      SseDeserializer deserializer) {
    return HideDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinSyncArray2 sse_decode_RustOpaque_hide_data_twin_sync_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_RustOpaque_hide_data_twin_sync(deserializer);
    return HideDataTwinSyncArray2(inner);
  }

  @protected
  HideDataTwinSyncMoi sse_decode_RustOpaque_hide_data_twin_sync_moi(
      SseDeserializer deserializer) {
    return HideDataTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  HideDataTwinSyncMoiArray2
      sse_decode_RustOpaque_hide_data_twin_sync_moi_array_2(
          SseDeserializer deserializer) {
    var inner =
        sse_decode_list_RustOpaque_hide_data_twin_sync_moi(deserializer);
    return HideDataTwinSyncMoiArray2(inner);
  }

  @protected
  I16 sse_decode_RustOpaque_i_16(SseDeserializer deserializer) {
    return I16.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  I32 sse_decode_RustOpaque_i_32(SseDeserializer deserializer) {
    return I32.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinMoi sse_decode_RustOpaque_non_clone_data_twin_moi(
      SseDeserializer deserializer) {
    return NonCloneDataTwinMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinNormal sse_decode_RustOpaque_non_clone_data_twin_normal(
      SseDeserializer deserializer) {
    return NonCloneDataTwinNormal.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinRustAsync
      sse_decode_RustOpaque_non_clone_data_twin_rust_async(
          SseDeserializer deserializer) {
    return NonCloneDataTwinRustAsync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinRustAsyncMoi
      sse_decode_RustOpaque_non_clone_data_twin_rust_async_moi(
          SseDeserializer deserializer) {
    return NonCloneDataTwinRustAsyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinSync sse_decode_RustOpaque_non_clone_data_twin_sync(
      SseDeserializer deserializer) {
    return NonCloneDataTwinSync.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NonCloneDataTwinSyncMoi sse_decode_RustOpaque_non_clone_data_twin_sync_moi(
      SseDeserializer deserializer) {
    return NonCloneDataTwinSyncMoi.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Set<String> sse_decode_Set_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_String(deserializer);
    return Set.from(inner);
  }

  @protected
  Set<int> sse_decode_Set_i_32(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return Set.from(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ATwinNormal sse_decode_a_twin_normal(SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ATwinNormal(a: var_a);
  }

  @protected
  ATwinRustAsync sse_decode_a_twin_rust_async(SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ATwinRustAsync(a: var_a);
  }

  @protected
  ATwinSync sse_decode_a_twin_sync(SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ATwinSync(a: var_a);
  }

  @protected
  AbcTwinNormal sse_decode_abc_twin_normal(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_normal(deserializer);
        return AbcTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_normal(deserializer);
        return AbcTwinNormal_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_normal(deserializer);
        return AbcTwinNormal_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinNormal_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinRustAsync sse_decode_abc_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_rust_async(deserializer);
        return AbcTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_rust_async(deserializer);
        return AbcTwinRustAsync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_rust_async(deserializer);
        return AbcTwinRustAsync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinRustAsync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AbcTwinSync sse_decode_abc_twin_sync(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_a_twin_sync(deserializer);
        return AbcTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_b_twin_sync(deserializer);
        return AbcTwinSync_B(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_c_twin_sync(deserializer);
        return AbcTwinSync_C(var_field0);
      case 3:
        var var_field0 = sse_decode_i_32(deserializer);
        return AbcTwinSync_JustInt(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AnotherMacroStructTwinNormal sse_decode_another_macro_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_data = sse_decode_i_32(deserializer);
    var var_nonFinalData = sse_decode_i_32(deserializer);
    return AnotherMacroStructTwinNormal(
        data: var_data, nonFinalData: var_nonFinalData);
  }

  @protected
  AnotherTwinNormal sse_decode_another_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinNormal(a: var_a);
  }

  @protected
  AnotherTwinRustAsync sse_decode_another_twin_rust_async(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinRustAsync(a: var_a);
  }

  @protected
  AnotherTwinSync sse_decode_another_twin_sync(SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return AnotherTwinSync(a: var_a);
  }

  @protected
  ApplicationEnv sse_decode_application_env(SseDeserializer deserializer) {
    var var_vars = sse_decode_list_application_env_var(deserializer);
    return ApplicationEnv(vars: var_vars);
  }

  @protected
  ApplicationEnvVar sse_decode_application_env_var(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return ApplicationEnvVar(field0: var_field0, field1: var_field1);
  }

  @protected
  ApplicationMessage sse_decode_application_message(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return ApplicationMessage_DisplayMessage(var_field0);
      case 1:
        var var_x = sse_decode_i_32(deserializer);
        var var_y = sse_decode_i_32(deserializer);
        return ApplicationMessage_RenderPixel(x: var_x, y: var_y);
      case 2:
        return ApplicationMessage_Exit();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ApplicationMode sse_decode_application_mode(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return ApplicationMode.values[inner];
  }

  @protected
  ApplicationSettings sse_decode_application_settings(
      SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_mode = sse_decode_application_mode(deserializer);
    var var_env = sse_decode_box_application_env(deserializer);
    var var_envOptional =
        sse_decode_opt_box_autoadd_application_env(deserializer);
    return ApplicationSettings(
        name: var_name,
        version: var_version,
        mode: var_mode,
        env: var_env,
        envOptional: var_envOptional);
  }

  @protected
  AttributeTwinNormal sse_decode_attribute_twin_normal(
      SseDeserializer deserializer) {
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinNormal(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinRustAsync sse_decode_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  AttributeTwinSync sse_decode_attribute_twin_sync(
      SseDeserializer deserializer) {
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return AttributeTwinSync(key: var_key, value: var_value);
  }

  @protected
  BTwinNormal sse_decode_b_twin_normal(SseDeserializer deserializer) {
    var var_b = sse_decode_i_32(deserializer);
    return BTwinNormal(b: var_b);
  }

  @protected
  BTwinRustAsync sse_decode_b_twin_rust_async(SseDeserializer deserializer) {
    var var_b = sse_decode_i_32(deserializer);
    return BTwinRustAsync(b: var_b);
  }

  @protected
  BTwinSync sse_decode_b_twin_sync(SseDeserializer deserializer) {
    var var_b = sse_decode_i_32(deserializer);
    return BTwinSync(b: var_b);
  }

  @protected
  BasicGeneralEnumTwinNormal sse_decode_basic_general_enum_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinNormal_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinNormal_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync sse_decode_basic_general_enum_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinRustAsync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinRustAsync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field = sse_decode_String(deserializer);
        return BasicGeneralEnumTwinSync_Apple(field: var_field);
      case 1:
        return BasicGeneralEnumTwinSync_Orange();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal sse_decode_basic_primitive_enum_twin_normal(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinNormal.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinRustAsync.values[inner];
  }

  @protected
  BasicPrimitiveEnumTwinSync sse_decode_basic_primitive_enum_twin_sync(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return BasicPrimitiveEnumTwinSync.values[inner];
  }

  @protected
  BasicStructTwinNormal sse_decode_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinNormal(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinRustAsync sse_decode_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinRustAsync(apple: var_apple, orange: var_orange);
  }

  @protected
  BasicStructTwinSync sse_decode_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_apple = sse_decode_opt_String(deserializer);
    var var_orange = sse_decode_opt_box_autoadd_i_32(deserializer);
    return BasicStructTwinSync(apple: var_apple, orange: var_orange);
  }

  @protected
  BenchmarkBinaryTreeTwinNormal sse_decode_benchmark_binary_tree_twin_normal(
      SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_normal(deserializer);
    return BenchmarkBinaryTreeTwinNormal(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(deserializer);
    return BenchmarkBinaryTreeTwinRustAsync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    var var_left =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    var var_right =
        sse_decode_opt_box_benchmark_binary_tree_twin_sync(deserializer);
    return BenchmarkBinaryTreeTwinSync(
        name: var_name, left: var_left, right: var_right);
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinNormal(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinRustAsync sse_decode_benchmark_blob_twin_rust_async(
      SseDeserializer deserializer) {
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinRustAsync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    var var_first = sse_decode_list_prim_u_8_strict(deserializer);
    var var_second = sse_decode_list_prim_u_8_strict(deserializer);
    var var_third = sse_decode_list_prim_u_8_strict(deserializer);
    return BenchmarkBlobTwinSync(
        first: var_first, second: var_second, third: var_third);
  }

  @protected
  BigBuffersTwinNormal sse_decode_big_buffers_twin_normal(
      SseDeserializer deserializer) {
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinNormal(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinRustAsync sse_decode_big_buffers_twin_rust_async(
      SseDeserializer deserializer) {
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinRustAsync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BigBuffersTwinSync sse_decode_big_buffers_twin_sync(
      SseDeserializer deserializer) {
    var var_int64 = sse_decode_list_prim_i_64_strict(deserializer);
    var var_uint64 = sse_decode_list_prim_u_64_strict(deserializer);
    return BigBuffersTwinSync(int64: var_int64, uint64: var_uint64);
  }

  @protected
  BlobTwinNormal sse_decode_blob_twin_normal(SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinNormal(field0: var_field0);
  }

  @protected
  BlobTwinRustAsync sse_decode_blob_twin_rust_async(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinRustAsync(field0: var_field0);
  }

  @protected
  BlobTwinSync sse_decode_blob_twin_sync(SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_1600(deserializer);
    return BlobTwinSync(field0: var_field0);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ApplicationEnv sse_decode_box_application_env(SseDeserializer deserializer) {
    return (sse_decode_application_env(deserializer));
  }

  @protected
  Object sse_decode_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    return (sse_decode_DartOpaque(deserializer));
  }

  @protected
  HideDataAnotherTwinMoi
      sse_decode_box_autoadd_RustOpaque_hide_data_another_twin_moi(
          SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_another_twin_moi(deserializer));
  }

  @protected
  HideDataAnotherTwinNormal
      sse_decode_box_autoadd_RustOpaque_hide_data_another_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_another_twin_normal(deserializer));
  }

  @protected
  HideDataTwinMoi sse_decode_box_autoadd_RustOpaque_hide_data_twin_moi(
      SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_moi(deserializer));
  }

  @protected
  HideDataTwinNormal sse_decode_box_autoadd_RustOpaque_hide_data_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_normal(deserializer));
  }

  @protected
  HideDataTwinRustAsync
      sse_decode_box_autoadd_RustOpaque_hide_data_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_rust_async(deserializer));
  }

  @protected
  HideDataTwinRustAsyncMoi
      sse_decode_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
          SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_rust_async_moi(deserializer));
  }

  @protected
  HideDataTwinSync sse_decode_box_autoadd_RustOpaque_hide_data_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_sync(deserializer));
  }

  @protected
  HideDataTwinSyncMoi sse_decode_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
      SseDeserializer deserializer) {
    return (sse_decode_RustOpaque_hide_data_twin_sync_moi(deserializer));
  }

  @protected
  ATwinNormal sse_decode_box_autoadd_a_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_a_twin_normal(deserializer));
  }

  @protected
  ATwinRustAsync sse_decode_box_autoadd_a_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_a_twin_rust_async(deserializer));
  }

  @protected
  ATwinSync sse_decode_box_autoadd_a_twin_sync(SseDeserializer deserializer) {
    return (sse_decode_a_twin_sync(deserializer));
  }

  @protected
  AbcTwinNormal sse_decode_box_autoadd_abc_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_abc_twin_normal(deserializer));
  }

  @protected
  AbcTwinRustAsync sse_decode_box_autoadd_abc_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_abc_twin_rust_async(deserializer));
  }

  @protected
  AbcTwinSync sse_decode_box_autoadd_abc_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_abc_twin_sync(deserializer));
  }

  @protected
  ApplicationEnv sse_decode_box_autoadd_application_env(
      SseDeserializer deserializer) {
    return (sse_decode_application_env(deserializer));
  }

  @protected
  ApplicationSettings sse_decode_box_autoadd_application_settings(
      SseDeserializer deserializer) {
    return (sse_decode_application_settings(deserializer));
  }

  @protected
  AttributeTwinNormal sse_decode_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_attribute_twin_normal(deserializer));
  }

  @protected
  AttributeTwinRustAsync sse_decode_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_attribute_twin_rust_async(deserializer));
  }

  @protected
  AttributeTwinSync sse_decode_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_attribute_twin_sync(deserializer));
  }

  @protected
  BTwinNormal sse_decode_box_autoadd_b_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_b_twin_normal(deserializer));
  }

  @protected
  BTwinRustAsync sse_decode_box_autoadd_b_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_b_twin_rust_async(deserializer));
  }

  @protected
  BTwinSync sse_decode_box_autoadd_b_twin_sync(SseDeserializer deserializer) {
    return (sse_decode_b_twin_sync(deserializer));
  }

  @protected
  BasicGeneralEnumTwinNormal
      sse_decode_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_basic_general_enum_twin_normal(deserializer));
  }

  @protected
  BasicGeneralEnumTwinRustAsync
      sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_basic_general_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicGeneralEnumTwinSync sse_decode_box_autoadd_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_basic_general_enum_twin_sync(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinNormal
      sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_basic_primitive_enum_twin_normal(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync
      sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
  }

  @protected
  BasicPrimitiveEnumTwinSync
      sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_basic_primitive_enum_twin_sync(deserializer));
  }

  @protected
  BasicStructTwinNormal sse_decode_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_basic_struct_twin_normal(deserializer));
  }

  @protected
  BasicStructTwinRustAsync sse_decode_box_autoadd_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_basic_struct_twin_rust_async(deserializer));
  }

  @protected
  BasicStructTwinSync sse_decode_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_basic_struct_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_autoadd_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync
      sse_decode_box_autoadd_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BenchmarkBlobTwinNormal sse_decode_box_autoadd_benchmark_blob_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_benchmark_blob_twin_normal(deserializer));
  }

  @protected
  BenchmarkBlobTwinRustAsync
      sse_decode_box_autoadd_benchmark_blob_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_blob_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBlobTwinSync sse_decode_box_autoadd_benchmark_blob_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_benchmark_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    return (sse_decode_bool(deserializer));
  }

  @protected
  CTwinNormal sse_decode_box_autoadd_c_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_c_twin_normal(deserializer));
  }

  @protected
  CTwinRustAsync sse_decode_box_autoadd_c_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_c_twin_rust_async(deserializer));
  }

  @protected
  CTwinSync sse_decode_box_autoadd_c_twin_sync(SseDeserializer deserializer) {
    return (sse_decode_c_twin_sync(deserializer));
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_box_autoadd_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_concatenate_with_twin_normal(deserializer));
  }

  @protected
  ConcatenateWithTwinRustAsync
      sse_decode_box_autoadd_concatenate_with_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_concatenate_with_twin_rust_async(deserializer));
  }

  @protected
  ConcatenateWithTwinSync sse_decode_box_autoadd_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_concatenate_with_twin_sync(deserializer));
  }

  @protected
  CustomNestedError2TwinNormal
      sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_2_twin_normal(deserializer));
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_2_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedError2TwinSync
      sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_2_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_inner_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_inner_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorInnerTwinSync
      sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_inner_twin_sync(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_box_autoadd_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_outer_twin_normal(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_outer_twin_rust_async(deserializer));
  }

  @protected
  CustomNestedErrorOuterTwinSync
      sse_decode_box_autoadd_custom_nested_error_outer_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_custom_nested_error_outer_twin_sync(deserializer));
  }

  @protected
  CustomStructErrorTwinNormal
      sse_decode_box_autoadd_custom_struct_error_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_custom_struct_error_twin_normal(deserializer));
  }

  @protected
  CustomStructErrorTwinRustAsync
      sse_decode_box_autoadd_custom_struct_error_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_custom_struct_error_twin_rust_async(deserializer));
  }

  @protected
  CustomStructErrorTwinSync
      sse_decode_box_autoadd_custom_struct_error_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_custom_struct_error_twin_sync(deserializer));
  }

  @protected
  CustomStructTwinNormal sse_decode_box_autoadd_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_custom_struct_twin_normal(deserializer));
  }

  @protected
  CustomStructTwinRustAsync
      sse_decode_box_autoadd_custom_struct_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_custom_struct_twin_rust_async(deserializer));
  }

  @protected
  CustomStructTwinSync sse_decode_box_autoadd_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_custom_struct_twin_sync(deserializer));
  }

  @protected
  CustomizedTwinNormal sse_decode_box_autoadd_customized_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_customized_twin_normal(deserializer));
  }

  @protected
  CustomizedTwinRustAsync sse_decode_box_autoadd_customized_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_customized_twin_rust_async(deserializer));
  }

  @protected
  CustomizedTwinSync sse_decode_box_autoadd_customized_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_customized_twin_sync(deserializer));
  }

  @protected
  DartOpaqueNestedTwinNormal
      sse_decode_box_autoadd_dart_opaque_nested_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_dart_opaque_nested_twin_normal(deserializer));
  }

  @protected
  DartOpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_dart_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_dart_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_box_autoadd_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_dart_opaque_nested_twin_sync(deserializer));
  }

  @protected
  ElementTwinNormal sse_decode_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_element_twin_normal(deserializer));
  }

  @protected
  ElementTwinRustAsync sse_decode_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_element_twin_rust_async(deserializer));
  }

  @protected
  ElementTwinSync sse_decode_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_element_twin_sync(deserializer));
  }

  @protected
  EmptyTwinNormal sse_decode_box_autoadd_empty_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_empty_twin_normal(deserializer));
  }

  @protected
  EmptyTwinRustAsync sse_decode_box_autoadd_empty_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_empty_twin_rust_async(deserializer));
  }

  @protected
  EmptyTwinSync sse_decode_box_autoadd_empty_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_empty_twin_sync(deserializer));
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_box_autoadd_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_enum_dart_opaque_twin_normal(deserializer));
  }

  @protected
  EnumDartOpaqueTwinRustAsync
      sse_decode_box_autoadd_enum_dart_opaque_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_enum_dart_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_box_autoadd_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_enum_dart_opaque_twin_sync(deserializer));
  }

  @protected
  EnumOpaqueTwinMoi sse_decode_box_autoadd_enum_opaque_twin_moi(
      SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_moi(deserializer));
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_box_autoadd_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_normal(deserializer));
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_box_autoadd_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_rust_async(deserializer));
  }

  @protected
  EnumOpaqueTwinRustAsyncMoi
      sse_decode_box_autoadd_enum_opaque_twin_rust_async_moi(
          SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_rust_async_moi(deserializer));
  }

  @protected
  EnumOpaqueTwinSync sse_decode_box_autoadd_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_sync(deserializer));
  }

  @protected
  EnumOpaqueTwinSyncMoi sse_decode_box_autoadd_enum_opaque_twin_sync_moi(
      SseDeserializer deserializer) {
    return (sse_decode_enum_opaque_twin_sync_moi(deserializer));
  }

  @protected
  EnumWithItemMixedTwinNormal
      sse_decode_box_autoadd_enum_with_item_mixed_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_mixed_twin_normal(deserializer));
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_mixed_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemMixedTwinSync
      sse_decode_box_autoadd_enum_with_item_mixed_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_mixed_twin_sync(deserializer));
  }

  @protected
  EnumWithItemStructTwinNormal
      sse_decode_box_autoadd_enum_with_item_struct_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_struct_twin_normal(deserializer));
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_struct_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemStructTwinSync
      sse_decode_box_autoadd_enum_with_item_struct_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_struct_twin_sync(deserializer));
  }

  @protected
  EnumWithItemTupleTwinNormal
      sse_decode_box_autoadd_enum_with_item_tuple_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_tuple_twin_normal(deserializer));
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_tuple_twin_rust_async(deserializer));
  }

  @protected
  EnumWithItemTupleTwinSync
      sse_decode_box_autoadd_enum_with_item_tuple_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_enum_with_item_tuple_twin_sync(deserializer));
  }

  @protected
  EventTwinNormal sse_decode_box_autoadd_event_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_event_twin_normal(deserializer));
  }

  @protected
  EventTwinRustAsync sse_decode_box_autoadd_event_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_event_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_autoadd_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync
      sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_autoadd_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_32(SseDeserializer deserializer) {
    return (sse_decode_f_32(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_autoadd_feed_id_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_autoadd_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_autoadd_feed_id_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_16(SseDeserializer deserializer) {
    return (sse_decode_i_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_32(SseDeserializer deserializer) {
    return (sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_i_8(SseDeserializer deserializer) {
    return (sse_decode_i_8(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_isize(SseDeserializer deserializer) {
    return (sse_decode_isize(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_autoadd_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_autoadd_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_autoadd_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  ListOfNestedRawStringMirrored
      sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
          SseDeserializer deserializer) {
    return (sse_decode_list_of_nested_raw_string_mirrored(deserializer));
  }

  @protected
  MacroStruct sse_decode_box_autoadd_macro_struct(
      SseDeserializer deserializer) {
    return (sse_decode_macro_struct(deserializer));
  }

  @protected
  MeasureTwinNormal sse_decode_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_measure_twin_normal(deserializer));
  }

  @protected
  MeasureTwinRustAsync sse_decode_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_measure_twin_rust_async(deserializer));
  }

  @protected
  MeasureTwinSync sse_decode_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_measure_twin_sync(deserializer));
  }

  @protected
  MessageIdTwinNormal sse_decode_box_autoadd_message_id_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_message_id_twin_normal(deserializer));
  }

  @protected
  MessageIdTwinRustAsync sse_decode_box_autoadd_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_message_id_twin_rust_async(deserializer));
  }

  @protected
  MessageIdTwinSync sse_decode_box_autoadd_message_id_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_message_id_twin_sync(deserializer));
  }

  @protected
  MyNestedStructTwinNormal sse_decode_box_autoadd_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_my_nested_struct_twin_normal(deserializer));
  }

  @protected
  MyNestedStructTwinRustAsync
      sse_decode_box_autoadd_my_nested_struct_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_my_nested_struct_twin_rust_async(deserializer));
  }

  @protected
  MyNestedStructTwinSync sse_decode_box_autoadd_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_my_nested_struct_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_autoadd_my_size(SseDeserializer deserializer) {
    return (sse_decode_my_size(deserializer));
  }

  @protected
  MyStruct sse_decode_box_autoadd_my_struct(SseDeserializer deserializer) {
    return (sse_decode_my_struct(deserializer));
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_box_autoadd_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_my_tree_node_twin_normal(deserializer));
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_box_autoadd_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_my_tree_node_twin_rust_async(deserializer));
  }

  @protected
  MyTreeNodeTwinSync sse_decode_box_autoadd_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_my_tree_node_twin_sync(deserializer));
  }

  @protected
  NestedRawStringMirrored sse_decode_box_autoadd_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    return (sse_decode_nested_raw_string_mirrored(deserializer));
  }

  @protected
  NewTypeIntTwinNormal sse_decode_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_new_type_int_twin_normal(deserializer));
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_box_autoadd_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_new_type_int_twin_rust_async(deserializer));
  }

  @protected
  NewTypeIntTwinSync sse_decode_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_new_type_int_twin_sync(deserializer));
  }

  @protected
  NoteTwinNormal sse_decode_box_autoadd_note_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_note_twin_normal(deserializer));
  }

  @protected
  NoteTwinRustAsync sse_decode_box_autoadd_note_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_note_twin_rust_async(deserializer));
  }

  @protected
  NoteTwinSync sse_decode_box_autoadd_note_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_note_twin_sync(deserializer));
  }

  @protected
  Numbers sse_decode_box_autoadd_numbers(SseDeserializer deserializer) {
    return (sse_decode_numbers(deserializer));
  }

  @protected
  OpaqueNestedTwinMoi sse_decode_box_autoadd_opaque_nested_twin_moi(
      SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_moi(deserializer));
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_box_autoadd_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_normal(deserializer));
  }

  @protected
  OpaqueNestedTwinRustAsync
      sse_decode_box_autoadd_opaque_nested_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_rust_async(deserializer));
  }

  @protected
  OpaqueNestedTwinRustAsyncMoi
      sse_decode_box_autoadd_opaque_nested_twin_rust_async_moi(
          SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_rust_async_moi(deserializer));
  }

  @protected
  OpaqueNestedTwinSync sse_decode_box_autoadd_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_sync(deserializer));
  }

  @protected
  OpaqueNestedTwinSyncMoi sse_decode_box_autoadd_opaque_nested_twin_sync_moi(
      SseDeserializer deserializer) {
    return (sse_decode_opaque_nested_twin_sync_moi(deserializer));
  }

  @protected
  OptVecsTwinNormal sse_decode_box_autoadd_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_opt_vecs_twin_normal(deserializer));
  }

  @protected
  OptVecsTwinRustAsync sse_decode_box_autoadd_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_opt_vecs_twin_rust_async(deserializer));
  }

  @protected
  OptVecsTwinSync sse_decode_box_autoadd_opt_vecs_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_opt_vecs_twin_sync(deserializer));
  }

  @protected
  RawStringMirrored sse_decode_box_autoadd_raw_string_mirrored(
      SseDeserializer deserializer) {
    return (sse_decode_raw_string_mirrored(deserializer));
  }

  @protected
  (String, int) sse_decode_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    return (sse_decode_record_string_i_32(deserializer));
  }

  @protected
  Sequences sse_decode_box_autoadd_sequences(SseDeserializer deserializer) {
    return (sse_decode_sequences(deserializer));
  }

  @protected
  SomeStructTwinNormal sse_decode_box_autoadd_some_struct_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_some_struct_twin_normal(deserializer));
  }

  @protected
  SomeStructTwinRustAsync sse_decode_box_autoadd_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_some_struct_twin_rust_async(deserializer));
  }

  @protected
  SomeStructTwinSync sse_decode_box_autoadd_some_struct_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_some_struct_twin_sync(deserializer));
  }

  @protected
  StructWithCommentsTwinNormal
      sse_decode_box_autoadd_struct_with_comments_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_comments_twin_normal(deserializer));
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_box_autoadd_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_comments_twin_rust_async(deserializer));
  }

  @protected
  StructWithCommentsTwinSync
      sse_decode_box_autoadd_struct_with_comments_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_comments_twin_sync(deserializer));
  }

  @protected
  StructWithEnumTwinNormal sse_decode_box_autoadd_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_struct_with_enum_twin_normal(deserializer));
  }

  @protected
  StructWithEnumTwinRustAsync
      sse_decode_box_autoadd_struct_with_enum_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_enum_twin_rust_async(deserializer));
  }

  @protected
  StructWithEnumTwinSync sse_decode_box_autoadd_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_struct_with_enum_twin_sync(deserializer));
  }

  @protected
  StructWithOneFieldTwinNormal
      sse_decode_box_autoadd_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_one_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithOneFieldTwinSync
      sse_decode_box_autoadd_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  StructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_two_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithTwoFieldTwinSync
      sse_decode_box_autoadd_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  StructWithZeroFieldTwinNormal
      sse_decode_box_autoadd_struct_with_zero_field_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_zero_field_twin_normal(deserializer));
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_box_autoadd_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_zero_field_twin_rust_async(deserializer));
  }

  @protected
  StructWithZeroFieldTwinSync
      sse_decode_box_autoadd_struct_with_zero_field_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_struct_with_zero_field_twin_sync(deserializer));
  }

  @protected
  SumWithTwinNormal sse_decode_box_autoadd_sum_with_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_sum_with_twin_normal(deserializer));
  }

  @protected
  SumWithTwinRustAsync sse_decode_box_autoadd_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_sum_with_twin_rust_async(deserializer));
  }

  @protected
  SumWithTwinSync sse_decode_box_autoadd_sum_with_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_sum_with_twin_sync(deserializer));
  }

  @protected
  TestIdTwinNormal sse_decode_box_autoadd_test_id_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_test_id_twin_normal(deserializer));
  }

  @protected
  TestIdTwinRustAsync sse_decode_box_autoadd_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_test_id_twin_rust_async(deserializer));
  }

  @protected
  TestIdTwinSync sse_decode_box_autoadd_test_id_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_test_id_twin_sync(deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_one_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_one_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_one_field_twin_sync(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_two_field_twin_normal(deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_two_field_twin_rust_async(
        deserializer));
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_box_autoadd_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    return (sse_decode_tuple_struct_with_two_field_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_16(SseDeserializer deserializer) {
    return (sse_decode_u_16(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    return (sse_decode_u_8(deserializer));
  }

  @protected
  UserIdTwinNormal sse_decode_box_autoadd_user_id_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_user_id_twin_normal(deserializer));
  }

  @protected
  UserIdTwinRustAsync sse_decode_box_autoadd_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_user_id_twin_rust_async(deserializer));
  }

  @protected
  UserIdTwinSync sse_decode_box_autoadd_user_id_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_user_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_usize(SseDeserializer deserializer) {
    return (sse_decode_usize(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinNormal
      sse_decode_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_normal(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync
      sse_decode_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_rust_async(deserializer));
  }

  @protected
  BenchmarkBinaryTreeTwinSync sse_decode_box_benchmark_binary_tree_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_benchmark_binary_tree_twin_sync(deserializer));
  }

  @protected
  BlobTwinNormal sse_decode_box_blob_twin_normal(SseDeserializer deserializer) {
    return (sse_decode_blob_twin_normal(deserializer));
  }

  @protected
  BlobTwinRustAsync sse_decode_box_blob_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_blob_twin_rust_async(deserializer));
  }

  @protected
  BlobTwinSync sse_decode_box_blob_twin_sync(SseDeserializer deserializer) {
    return (sse_decode_blob_twin_sync(deserializer));
  }

  @protected
  bool sse_decode_box_bool(SseDeserializer deserializer) {
    return (sse_decode_bool(deserializer));
  }

  @protected
  DistanceTwinNormal sse_decode_box_distance_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_distance_twin_normal(deserializer));
  }

  @protected
  DistanceTwinRustAsync sse_decode_box_distance_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_distance_twin_rust_async(deserializer));
  }

  @protected
  DistanceTwinSync sse_decode_box_distance_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_distance_twin_sync(deserializer));
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_normal(deserializer));
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_box_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_rust_async(deserializer));
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_exotic_optionals_twin_sync(deserializer));
  }

  @protected
  double sse_decode_box_f_64(SseDeserializer deserializer) {
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FeedIdTwinNormal sse_decode_box_feed_id_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_normal(deserializer));
  }

  @protected
  FeedIdTwinRustAsync sse_decode_box_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_rust_async(deserializer));
  }

  @protected
  FeedIdTwinSync sse_decode_box_feed_id_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_feed_id_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_i_32(SseDeserializer deserializer) {
    return (sse_decode_i_32(deserializer));
  }

  @protected
  int sse_decode_box_i_64(SseDeserializer deserializer) {
    return (sse_decode_i_64(deserializer));
  }

  @protected
  int sse_decode_box_i_8(SseDeserializer deserializer) {
    return (sse_decode_i_8(deserializer));
  }

  @protected
  KitchenSinkTwinNormal sse_decode_box_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_normal(deserializer));
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_box_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_rust_async(deserializer));
  }

  @protected
  KitchenSinkTwinSync sse_decode_box_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_kitchen_sink_twin_sync(deserializer));
  }

  @protected
  MySize sse_decode_box_my_size(SseDeserializer deserializer) {
    return (sse_decode_my_size(deserializer));
  }

  @protected
  SpeedTwinNormal sse_decode_box_speed_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_speed_twin_normal(deserializer));
  }

  @protected
  SpeedTwinRustAsync sse_decode_box_speed_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_speed_twin_rust_async(deserializer));
  }

  @protected
  SpeedTwinSync sse_decode_box_speed_twin_sync(SseDeserializer deserializer) {
    return (sse_decode_speed_twin_sync(deserializer));
  }

  @protected
  int sse_decode_box_u_8(SseDeserializer deserializer) {
    return (sse_decode_u_8(deserializer));
  }

  @protected
  U8Array1600 sse_decode_box_u_8_array_1600(SseDeserializer deserializer) {
    return (sse_decode_u_8_array_1600(deserializer));
  }

  @protected
  U8Array8 sse_decode_box_u_8_array_8(SseDeserializer deserializer) {
    return (sse_decode_u_8_array_8(deserializer));
  }

  @protected
  WeekdaysTwinNormal sse_decode_box_weekdays_twin_normal(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_normal(deserializer));
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_box_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_rust_async(deserializer));
  }

  @protected
  WeekdaysTwinSync sse_decode_box_weekdays_twin_sync(
      SseDeserializer deserializer) {
    return (sse_decode_weekdays_twin_sync(deserializer));
  }

  @protected
  CTwinNormal sse_decode_c_twin_normal(SseDeserializer deserializer) {
    var var_c = sse_decode_bool(deserializer);
    return CTwinNormal(c: var_c);
  }

  @protected
  CTwinRustAsync sse_decode_c_twin_rust_async(SseDeserializer deserializer) {
    var var_c = sse_decode_bool(deserializer);
    return CTwinRustAsync(c: var_c);
  }

  @protected
  CTwinSync sse_decode_c_twin_sync(SseDeserializer deserializer) {
    var var_c = sse_decode_bool(deserializer);
    return CTwinSync(c: var_c);
  }

  @protected
  ConcatenateWithTwinNormal sse_decode_concatenate_with_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinNormal(a: var_a);
  }

  @protected
  ConcatenateWithTwinRustAsync sse_decode_concatenate_with_twin_rust_async(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinRustAsync(a: var_a);
  }

  @protected
  ConcatenateWithTwinSync sse_decode_concatenate_with_twin_sync(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return ConcatenateWithTwinSync(a: var_a);
  }

  @protected
  ContainsMirroredSubStructTwinNormal
      sse_decode_contains_mirrored_sub_struct_twin_normal(
          SseDeserializer deserializer) {
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_normal(deserializer);
    return ContainsMirroredSubStructTwinNormal(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinRustAsync
      sse_decode_contains_mirrored_sub_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_rust_async(deserializer);
    return ContainsMirroredSubStructTwinRustAsync(
        test: var_test, test2: var_test2);
  }

  @protected
  ContainsMirroredSubStructTwinSync
      sse_decode_contains_mirrored_sub_struct_twin_sync(
          SseDeserializer deserializer) {
    var var_test = sse_decode_raw_string_mirrored(deserializer);
    var var_test2 = sse_decode_another_twin_sync(deserializer);
    return ContainsMirroredSubStructTwinSync(test: var_test, test2: var_test2);
  }

  @protected
  CustomEnumErrorTwinNormal sse_decode_custom_enum_error_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinNormal_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinRustAsync sse_decode_custom_enum_error_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinRustAsync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomEnumErrorTwinSync sse_decode_custom_enum_error_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_One(
            message: var_message, backtrace: var_backtrace);
      case 1:
        var var_message = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomEnumErrorTwinSync_Two(
            message: var_message, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinNormal sse_decode_custom_error_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinNormal_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinRustAsync sse_decode_custom_error_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error0(
            e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinRustAsync_Error1(
            e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomErrorTwinSync sse_decode_custom_error_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_e = sse_decode_String(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error0(e: var_e, backtrace: var_backtrace);
      case 1:
        var var_e = sse_decode_u_32(deserializer);
        var var_backtrace = sse_decode_Backtrace(deserializer);
        return CustomErrorTwinSync_Error1(e: var_e, backtrace: var_backtrace);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinNormal sse_decode_custom_nested_error_1_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinNormal_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_normal(
                deserializer);
        return CustomNestedError1TwinNormal_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinRustAsync
      sse_decode_custom_nested_error_1_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinRustAsync_CustomNested1(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_2_twin_rust_async(
                deserializer);
        return CustomNestedError1TwinRustAsync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError1TwinSync sse_decode_custom_nested_error_1_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError1TwinSync_CustomNested1(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_custom_nested_error_2_twin_sync(
            deserializer);
        return CustomNestedError1TwinSync_ErrorNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinNormal sse_decode_custom_nested_error_2_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinNormal_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinRustAsync
      sse_decode_custom_nested_error_2_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinRustAsync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedError2TwinSync sse_decode_custom_nested_error_2_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedError2TwinSync_CustomNested2(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedError2TwinSync_CustomNested2Number(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinNormal
      sse_decode_custom_nested_error_inner_twin_normal(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinNormal_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinNormal_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinRustAsync
      sse_decode_custom_nested_error_inner_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinRustAsync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorInnerTwinSync sse_decode_custom_nested_error_inner_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorInnerTwinSync_Three(var_field0);
      case 1:
        var var_field0 = sse_decode_u_32(deserializer);
        return CustomNestedErrorInnerTwinSync_Four(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinNormal
      sse_decode_custom_nested_error_outer_twin_normal(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinNormal_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_normal(
                deserializer);
        return CustomNestedErrorOuterTwinNormal_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinRustAsync
      sse_decode_custom_nested_error_outer_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinRustAsync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_rust_async(
                deserializer);
        return CustomNestedErrorOuterTwinRustAsync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomNestedErrorOuterTwinSync sse_decode_custom_nested_error_outer_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return CustomNestedErrorOuterTwinSync_One(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_custom_nested_error_inner_twin_sync(
                deserializer);
        return CustomNestedErrorOuterTwinSync_Two(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  CustomStructErrorAnotherTwinNormal
      sse_decode_custom_struct_error_another_twin_normal(
          SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinNormal(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinRustAsync
      sse_decode_custom_struct_error_another_twin_rust_async(
          SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructErrorAnotherTwinSync
      sse_decode_custom_struct_error_another_twin_sync(
          SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructErrorAnotherTwinSync(message: var_message);
  }

  @protected
  CustomStructErrorTwinNormal sse_decode_custom_struct_error_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinNormal(a: var_a);
  }

  @protected
  CustomStructErrorTwinRustAsync sse_decode_custom_struct_error_twin_rust_async(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinRustAsync(a: var_a);
  }

  @protected
  CustomStructErrorTwinSync sse_decode_custom_struct_error_twin_sync(
      SseDeserializer deserializer) {
    var var_a = sse_decode_String(deserializer);
    return CustomStructErrorTwinSync(a: var_a);
  }

  @protected
  CustomStructTwinNormal sse_decode_custom_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinNormal(message: var_message);
  }

  @protected
  CustomStructTwinRustAsync sse_decode_custom_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinRustAsync(message: var_message);
  }

  @protected
  CustomStructTwinSync sse_decode_custom_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_message = sse_decode_String(deserializer);
    return CustomStructTwinSync(message: var_message);
  }

  @protected
  CustomizedTwinNormal sse_decode_customized_twin_normal(
      SseDeserializer deserializer) {
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinNormal(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinRustAsync sse_decode_customized_twin_rust_async(
      SseDeserializer deserializer) {
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinRustAsync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  CustomizedTwinSync sse_decode_customized_twin_sync(
      SseDeserializer deserializer) {
    var var_finalField = sse_decode_String(deserializer);
    var var_nonFinalField = sse_decode_opt_String(deserializer);
    return CustomizedTwinSync(
        finalField: var_finalField, nonFinalField: var_nonFinalField);
  }

  @protected
  DartOpaqueNestedTwinNormal sse_decode_dart_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinRustAsync sse_decode_dart_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  DartOpaqueNestedTwinSync sse_decode_dart_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    var var_first = sse_decode_DartOpaque(deserializer);
    var var_second = sse_decode_DartOpaque(deserializer);
    return DartOpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  DemoStructForRustCallDartTwinNormal
      sse_decode_demo_struct_for_rust_call_dart_twin_normal(
          SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinNormal(name: var_name);
  }

  @protected
  DemoStructForRustCallDartTwinRustAsync
      sse_decode_demo_struct_for_rust_call_dart_twin_rust_async(
          SseDeserializer deserializer) {
    var var_name = sse_decode_String(deserializer);
    return DemoStructForRustCallDartTwinRustAsync(name: var_name);
  }

  @protected
  DistanceTwinNormal sse_decode_distance_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinNormal_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinRustAsync sse_decode_distance_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinRustAsync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DistanceTwinSync sse_decode_distance_twin_sync(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return DistanceTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return DistanceTwinSync_Map(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ElementTwinNormal sse_decode_element_twin_normal(
      SseDeserializer deserializer) {
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_children = sse_decode_opt_list_element_twin_normal(deserializer);
    return ElementTwinNormal(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinRustAsync sse_decode_element_twin_rust_async(
      SseDeserializer deserializer) {
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_children =
        sse_decode_opt_list_element_twin_rust_async(deserializer);
    return ElementTwinRustAsync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  ElementTwinSync sse_decode_element_twin_sync(SseDeserializer deserializer) {
    var var_tag = sse_decode_opt_String(deserializer);
    var var_text = sse_decode_opt_String(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_children = sse_decode_opt_list_element_twin_sync(deserializer);
    return ElementTwinSync(
        tag: var_tag,
        text: var_text,
        attributes: var_attributes,
        children: var_children);
  }

  @protected
  EmptyTwinNormal sse_decode_empty_twin_normal(SseDeserializer deserializer) {
    return EmptyTwinNormal();
  }

  @protected
  EmptyTwinRustAsync sse_decode_empty_twin_rust_async(
      SseDeserializer deserializer) {
    return EmptyTwinRustAsync();
  }

  @protected
  EmptyTwinSync sse_decode_empty_twin_sync(SseDeserializer deserializer) {
    return EmptyTwinSync();
  }

  @protected
  EnumDartOpaqueTwinNormal sse_decode_enum_dart_opaque_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinNormal_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinNormal_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinRustAsync sse_decode_enum_dart_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinRustAsync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinRustAsync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumDartOpaqueTwinSync sse_decode_enum_dart_opaque_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_i_32(deserializer);
        return EnumDartOpaqueTwinSync_Primitive(var_field0);
      case 1:
        var var_field0 = sse_decode_DartOpaque(deserializer);
        return EnumDartOpaqueTwinSync_Opaque(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinMoi sse_decode_enum_opaque_twin_moi(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_RustOpaque_hide_data_twin_moi(deserializer);
        return EnumOpaqueTwinMoi_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_16(deserializer);
        return EnumOpaqueTwinMoi_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_box_dynDartDebugTwinMoi(deserializer);
        return EnumOpaqueTwinMoi_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinMoi(deserializer);
        return EnumOpaqueTwinMoi_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinMoi(deserializer);
        return EnumOpaqueTwinMoi_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinMoiArray5 sse_decode_enum_opaque_twin_moi_array_5(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_moi(deserializer);
    return EnumOpaqueTwinMoiArray5(inner);
  }

  @protected
  EnumOpaqueTwinNormal sse_decode_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_hide_data_twin_normal(deserializer);
        return EnumOpaqueTwinNormal_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinNormal_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_box_dynDartDebugTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinNormal(deserializer);
        return EnumOpaqueTwinNormal_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinNormalArray5 sse_decode_enum_opaque_twin_normal_array_5(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_normal(deserializer);
    return EnumOpaqueTwinNormalArray5(inner);
  }

  @protected
  EnumOpaqueTwinRustAsync sse_decode_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_hide_data_twin_rust_async(deserializer);
        return EnumOpaqueTwinRustAsync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinRustAsync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_box_dynDartDebugTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinRustAsync(deserializer);
        return EnumOpaqueTwinRustAsync_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncArray5 sse_decode_enum_opaque_twin_rust_async_array_5(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_rust_async(deserializer);
    return EnumOpaqueTwinRustAsyncArray5(inner);
  }

  @protected
  EnumOpaqueTwinRustAsyncMoi sse_decode_enum_opaque_twin_rust_async_moi(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_hide_data_twin_rust_async_moi(deserializer);
        return EnumOpaqueTwinRustAsyncMoi_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_16(deserializer);
        return EnumOpaqueTwinRustAsyncMoi_Primitive(var_field0);
      case 2:
        var var_field0 = sse_decode_RustOpaque_box_dynDartDebugTwinRustAsyncMoi(
            deserializer);
        return EnumOpaqueTwinRustAsyncMoi_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinRustAsyncMoi(deserializer);
        return EnumOpaqueTwinRustAsyncMoi_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinRustAsyncMoi(deserializer);
        return EnumOpaqueTwinRustAsyncMoi_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinRustAsyncMoiArray5
      sse_decode_enum_opaque_twin_rust_async_moi_array_5(
          SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_rust_async_moi(deserializer);
    return EnumOpaqueTwinRustAsyncMoiArray5(inner);
  }

  @protected
  EnumOpaqueTwinSync sse_decode_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_hide_data_twin_sync(deserializer);
        return EnumOpaqueTwinSync_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_32(deserializer);
        return EnumOpaqueTwinSync_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_box_dynDartDebugTwinSync(deserializer);
        return EnumOpaqueTwinSync_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinSync(deserializer);
        return EnumOpaqueTwinSync_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinSyncArray5 sse_decode_enum_opaque_twin_sync_array_5(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_sync(deserializer);
    return EnumOpaqueTwinSyncArray5(inner);
  }

  @protected
  EnumOpaqueTwinSyncMoi sse_decode_enum_opaque_twin_sync_moi(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_RustOpaque_hide_data_twin_sync_moi(deserializer);
        return EnumOpaqueTwinSyncMoi_Struct(var_field0);
      case 1:
        var var_field0 = sse_decode_RustOpaque_i_16(deserializer);
        return EnumOpaqueTwinSyncMoi_Primitive(var_field0);
      case 2:
        var var_field0 =
            sse_decode_RustOpaque_box_dynDartDebugTwinSyncMoi(deserializer);
        return EnumOpaqueTwinSyncMoi_TraitObj(var_field0);
      case 3:
        var var_field0 =
            sse_decode_RustOpaque_MutexHideDataTwinSyncMoi(deserializer);
        return EnumOpaqueTwinSyncMoi_Mutex(var_field0);
      case 4:
        var var_field0 =
            sse_decode_RustOpaque_RwLockHideDataTwinSyncMoi(deserializer);
        return EnumOpaqueTwinSyncMoi_RwLock(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumOpaqueTwinSyncMoiArray5 sse_decode_enum_opaque_twin_sync_moi_array_5(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_enum_opaque_twin_sync_moi(deserializer);
    return EnumOpaqueTwinSyncMoiArray5(inner);
  }

  @protected
  EnumSimpleTwinNormal sse_decode_enum_simple_twin_normal(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinNormal.values[inner];
  }

  @protected
  EnumSimpleTwinRustAsync sse_decode_enum_simple_twin_rust_async(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinRustAsync.values[inner];
  }

  @protected
  EnumSimpleTwinSync sse_decode_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return EnumSimpleTwinSync.values[inner];
  }

  @protected
  EnumWithItemMixedTwinNormal sse_decode_enum_with_item_mixed_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinNormal_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinNormal_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinNormal_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinRustAsync
      sse_decode_enum_with_item_mixed_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinRustAsync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinRustAsync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinRustAsync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemMixedTwinSync sse_decode_enum_with_item_mixed_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return EnumWithItemMixedTwinSync_A();
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemMixedTwinSync_B(var_field0);
      case 2:
        var var_cField = sse_decode_String(deserializer);
        return EnumWithItemMixedTwinSync_C(cField: var_cField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinNormal sse_decode_enum_with_item_struct_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinNormal_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinNormal_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinRustAsync
      sse_decode_enum_with_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinRustAsync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemStructTwinSync sse_decode_enum_with_item_struct_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_aField = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemStructTwinSync_A(aField: var_aField);
      case 1:
        var var_bField = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemStructTwinSync_B(bField: var_bField);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinNormal sse_decode_enum_with_item_tuple_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinNormal_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinNormal_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinRustAsync
      sse_decode_enum_with_item_tuple_twin_rust_async(
          SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinRustAsync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinRustAsync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EnumWithItemTupleTwinSync sse_decode_enum_with_item_tuple_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return EnumWithItemTupleTwinSync_A(var_field0);
      case 1:
        var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
        return EnumWithItemTupleTwinSync_B(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  EventTwinNormal sse_decode_event_twin_normal(SseDeserializer deserializer) {
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinNormal(address: var_address, payload: var_payload);
  }

  @protected
  EventTwinRustAsync sse_decode_event_twin_rust_async(
      SseDeserializer deserializer) {
    var var_address = sse_decode_String(deserializer);
    var var_payload = sse_decode_String(deserializer);
    return EventTwinRustAsync(address: var_address, payload: var_payload);
  }

  @protected
  ExoticOptionalsTwinNormal sse_decode_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_normal(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_normal(deserializer);
    return ExoticOptionalsTwinNormal(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinRustAsync sse_decode_exotic_optionals_twin_rust_async(
      SseDeserializer deserializer) {
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes =
        sse_decode_opt_list_attribute_twin_rust_async(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
            deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(deserializer);
    return ExoticOptionalsTwinRustAsync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  ExoticOptionalsTwinSync sse_decode_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    var var_int32 = sse_decode_opt_box_autoadd_i_32(deserializer);
    var var_int64 = sse_decode_opt_box_autoadd_i_64(deserializer);
    var var_float64 = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_boolean = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_zerocopy = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int8List = sse_decode_opt_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_opt_list_prim_u_8_strict(deserializer);
    var var_int32List = sse_decode_opt_list_prim_i_32_strict(deserializer);
    var var_float32List = sse_decode_opt_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_opt_list_prim_f_64_strict(deserializer);
    var var_attributes = sse_decode_opt_list_attribute_twin_sync(deserializer);
    var var_attributesNullable =
        sse_decode_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_nullableAttributes =
        sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(deserializer);
    var var_newtypeint =
        sse_decode_opt_box_autoadd_new_type_int_twin_sync(deserializer);
    return ExoticOptionalsTwinSync(
        int32: var_int32,
        int64: var_int64,
        float64: var_float64,
        boolean: var_boolean,
        zerocopy: var_zerocopy,
        int8List: var_int8List,
        uint8List: var_uint8List,
        int32List: var_int32List,
        float32List: var_float32List,
        float64List: var_float64List,
        attributes: var_attributes,
        attributesNullable: var_attributesNullable,
        nullableAttributes: var_nullableAttributes,
        newtypeint: var_newtypeint);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    return deserializer.buffer.getFloat64();
  }

  @protected
  F64Array16 sse_decode_f_64_array_16(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_f_64_strict(deserializer);
    return F64Array16(inner);
  }

  @protected
  FeedIdTwinNormal sse_decode_feed_id_twin_normal(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinNormal(field0: var_field0);
  }

  @protected
  FeedIdTwinRustAsync sse_decode_feed_id_twin_rust_async(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinRustAsync(field0: var_field0);
  }

  @protected
  FeedIdTwinSync sse_decode_feed_id_twin_sync(SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_8(deserializer);
    return FeedIdTwinSync(field0: var_field0);
  }

  @protected
  int sse_decode_i_16(SseDeserializer deserializer) {
    return deserializer.buffer.getInt16();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  I32Array2 sse_decode_i_32_array_2(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_i_32_strict(deserializer);
    return I32Array2(inner);
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    return deserializer.buffer.getInt8();
  }

  @protected
  int sse_decode_isize(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  KitchenSinkTwinNormal sse_decode_kitchen_sink_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinNormal_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinNormal_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinNormal_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinNormal_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_normal(deserializer);
        return KitchenSinkTwinNormal_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinRustAsync sse_decode_kitchen_sink_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinRustAsync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinRustAsync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 =
            sse_decode_box_kitchen_sink_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinRustAsync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinRustAsync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_rust_async(deserializer);
        return KitchenSinkTwinRustAsync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KitchenSinkTwinSync sse_decode_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return KitchenSinkTwinSync_Empty();
      case 1:
        var var_int32 = sse_decode_i_32(deserializer);
        var var_float64 = sse_decode_f_64(deserializer);
        var var_boolean = sse_decode_bool(deserializer);
        return KitchenSinkTwinSync_Primitives(
            int32: var_int32, float64: var_float64, boolean: var_boolean);
      case 2:
        var var_field0 = sse_decode_i_32(deserializer);
        var var_field1 = sse_decode_box_kitchen_sink_twin_sync(deserializer);
        return KitchenSinkTwinSync_Nested(var_field0, var_field1);
      case 3:
        var var_field0 = sse_decode_opt_box_autoadd_i_32(deserializer);
        var var_field1 = sse_decode_opt_box_autoadd_i_32(deserializer);
        return KitchenSinkTwinSync_Optional(var_field0, var_field1);
      case 4:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return KitchenSinkTwinSync_Buffer(var_field0);
      case 5:
        var var_field0 = sse_decode_weekdays_twin_sync(deserializer);
        return KitchenSinkTwinSync_Enums(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  List<Object> sse_decode_list_DartOpaque(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Object>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_DartOpaque(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinMoi> sse_decode_list_RustOpaque_hide_data_twin_moi(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_hide_data_twin_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinNormal> sse_decode_list_RustOpaque_hide_data_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_hide_data_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinRustAsync>
      sse_decode_list_RustOpaque_hide_data_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_hide_data_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinRustAsyncMoi>
      sse_decode_list_RustOpaque_hide_data_twin_rust_async_moi(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinRustAsyncMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_RustOpaque_hide_data_twin_rust_async_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinSync> sse_decode_list_RustOpaque_hide_data_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_hide_data_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<HideDataTwinSyncMoi> sse_decode_list_RustOpaque_hide_data_twin_sync_moi(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <HideDataTwinSyncMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_RustOpaque_hide_data_twin_sync_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationEnvVar> sse_decode_list_application_env_var(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationEnvVar>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_env_var(deserializer));
    }
    return ans_;
  }

  @protected
  List<ApplicationSettings> sse_decode_list_application_settings(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ApplicationSettings>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_application_settings(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal> sse_decode_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync> sse_decode_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync> sse_decode_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinNormal>
      sse_decode_list_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinRustAsync>
      sse_decode_list_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicGeneralEnumTwinSync> sse_decode_list_basic_general_enum_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicGeneralEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinNormal>
      sse_decode_list_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinRustAsync>
      sse_decode_list_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicPrimitiveEnumTwinSync>
      sse_decode_list_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicPrimitiveEnumTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinNormal> sse_decode_list_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinRustAsync> sse_decode_list_basic_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<BasicStructTwinSync> sse_decode_list_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BasicStructTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<bool> sse_decode_list_bool(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <bool>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinNormal> sse_decode_list_element_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinRustAsync> sse_decode_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<ElementTwinSync> sse_decode_list_element_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ElementTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_element_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinMoi> sse_decode_list_enum_opaque_twin_moi(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinNormal> sse_decode_list_enum_opaque_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinRustAsync> sse_decode_list_enum_opaque_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinRustAsyncMoi>
      sse_decode_list_enum_opaque_twin_rust_async_moi(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinRustAsyncMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_rust_async_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinSync> sse_decode_list_enum_opaque_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<EnumOpaqueTwinSyncMoi> sse_decode_list_enum_opaque_twin_sync_moi(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EnumOpaqueTwinSyncMoi>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_enum_opaque_twin_sync_moi(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyEnum> sse_decode_list_my_enum(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyEnum>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_enum(deserializer));
    }
    return ans_;
  }

  @protected
  List<MySize> sse_decode_list_my_size(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MySize>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinNormal> sse_decode_list_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinRustAsync> sse_decode_list_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<MyTreeNodeTwinSync> sse_decode_list_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MyTreeNodeTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_my_tree_node_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<NestedRawStringMirrored> sse_decode_list_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <NestedRawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_nested_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  ListOfNestedRawStringMirrored sse_decode_list_of_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var var_raw = sse_decode_list_nested_raw_string_mirrored(deserializer);
    return ListOfNestedRawStringMirrored(raw: var_raw);
  }

  @protected
  List<String?> sse_decode_list_opt_String(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinNormal?>
      sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_attribute_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttributeTwinSync?> sse_decode_list_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttributeTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_attribute_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<int?> sse_decode_list_opt_box_autoadd_i_32(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <int?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync?>
      sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_opt_box_autoadd_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync?> sse_decode_list_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_box_autoadd_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<Int32List?> sse_decode_list_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Int32List?>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_opt_list_prim_i_32_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinNormal> sse_decode_list_point_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinRustAsync> sse_decode_list_point_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<PointTwinSync> sse_decode_list_point_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PointTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_point_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<double> sse_decode_list_prim_f_32_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  Float32List sse_decode_list_prim_f_32_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat32List(len_);
  }

  @protected
  List<double> sse_decode_list_prim_f_64_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  Float64List sse_decode_list_prim_f_64_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getFloat64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_16_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  Int16List sse_decode_list_prim_i_16_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_32_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int32List sse_decode_list_prim_i_32_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt32List(len_);
  }

  @protected
  Int64List sse_decode_list_prim_i_64_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_i_8_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  Int8List sse_decode_list_prim_i_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getInt8List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_16_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  Uint16List sse_decode_list_prim_u_16_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint16List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_32_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint32List(len_);
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<RawStringEnumMirrored> sse_decode_list_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringEnumMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_enum_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<RawStringMirrored> sse_decode_list_raw_string_mirrored(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RawStringMirrored>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_raw_string_mirrored(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicGeneralEnumTwinSync)>
      sse_decode_list_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicGeneralEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_general_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinNormal)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinRustAsync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicPrimitiveEnumTwinSync)>
      sse_decode_list_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicPrimitiveEnumTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_primitive_enum_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinNormal)>
      sse_decode_list_record_i_32_basic_struct_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinRustAsync)>
      sse_decode_list_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_i_32_basic_struct_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, BasicStructTwinSync)>
      sse_decode_list_record_i_32_basic_struct_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, BasicStructTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_basic_struct_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, bool)> sse_decode_list_record_i_32_bool(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, bool)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_bool(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_32(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, double)> sse_decode_list_record_i_32_f_64(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, double)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_f_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_16(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_32(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_64(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_i_8(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_i_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_isize(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_isize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, Uint8List)> sse_decode_list_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, String)> sse_decode_list_record_i_32_string(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_16(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_16(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_32(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_64(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_64(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_u_8(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_u_8(deserializer));
    }
    return ans_;
  }

  @protected
  List<(int, int)> sse_decode_list_record_i_32_usize(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(int, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_i_32_usize(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinNormal)>
      sse_decode_list_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinRustAsync)>
      sse_decode_list_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_enum_simple_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, EnumSimpleTwinSync)>
      sse_decode_list_record_string_enum_simple_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, EnumSimpleTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_enum_simple_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, int)> sse_decode_list_record_string_i_32(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, int)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_i_32(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinNormal)>
      sse_decode_list_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinNormal)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinRustAsync)>
      sse_decode_list_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinRustAsync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_record_string_kitchen_sink_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, KitchenSinkTwinSync)>
      sse_decode_list_record_string_kitchen_sink_twin_sync(
          SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, KitchenSinkTwinSync)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_kitchen_sink_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, Uint8List)> sse_decode_list_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Uint8List)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, MySize)> sse_decode_list_record_string_my_size(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, MySize)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_my_size(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinNormal> sse_decode_list_sum_with_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinRustAsync> sse_decode_list_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<SumWithTwinSync> sse_decode_list_sum_with_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SumWithTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_sum_with_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinNormal> sse_decode_list_test_id_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinRustAsync> sse_decode_list_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<TestIdTwinSync> sse_decode_list_test_id_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestIdTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_id_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinNormal> sse_decode_list_weekdays_twin_normal(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinNormal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_normal(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinRustAsync> sse_decode_list_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinRustAsync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_rust_async(deserializer));
    }
    return ans_;
  }

  @protected
  List<WeekdaysTwinSync> sse_decode_list_weekdays_twin_sync(
      SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <WeekdaysTwinSync>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_weekdays_twin_sync(deserializer));
    }
    return ans_;
  }

  @protected
  Log2TwinNormal sse_decode_log_2_twin_normal(SseDeserializer deserializer) {
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinNormal(key: var_key, value: var_value);
  }

  @protected
  Log2TwinRustAsync sse_decode_log_2_twin_rust_async(
      SseDeserializer deserializer) {
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  Log2TwinSync sse_decode_log_2_twin_sync(SseDeserializer deserializer) {
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Log2TwinSync(key: var_key, value: var_value);
  }

  @protected
  LogTwinNormal sse_decode_log_twin_normal(SseDeserializer deserializer) {
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinNormal(key: var_key, value: var_value);
  }

  @protected
  LogTwinRustAsync sse_decode_log_twin_rust_async(
      SseDeserializer deserializer) {
    var var_key = sse_decode_u_32(deserializer);
    var var_value = sse_decode_u_32(deserializer);
    return LogTwinRustAsync(key: var_key, value: var_value);
  }

  @protected
  MacroStruct sse_decode_macro_struct(SseDeserializer deserializer) {
    var var_data = sse_decode_i_32(deserializer);
    return MacroStruct(data: var_data);
  }

  @protected
  MeasureTwinNormal sse_decode_measure_twin_normal(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_normal(deserializer);
        return MeasureTwinNormal_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_normal(deserializer);
        return MeasureTwinNormal_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinRustAsync sse_decode_measure_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_rust_async(deserializer);
        return MeasureTwinRustAsync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MeasureTwinSync sse_decode_measure_twin_sync(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_speed_twin_sync(deserializer);
        return MeasureTwinSync_Speed(var_field0);
      case 1:
        var var_field0 = sse_decode_box_distance_twin_sync(deserializer);
        return MeasureTwinSync_Distance(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  MessageIdTwinNormal sse_decode_message_id_twin_normal(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinNormal(field0: var_field0);
  }

  @protected
  MessageIdTwinRustAsync sse_decode_message_id_twin_rust_async(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinRustAsync(field0: var_field0);
  }

  @protected
  MessageIdTwinSync sse_decode_message_id_twin_sync(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_u_8_array_32(deserializer);
    return MessageIdTwinSync(field0: var_field0);
  }

  @protected
  MirrorStructTwinNormal sse_decode_mirror_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinNormal(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinRustAsync sse_decode_mirror_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinRustAsync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MirrorStructTwinSync sse_decode_mirror_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_a = sse_decode_application_settings(deserializer);
    var var_b = sse_decode_my_struct(deserializer);
    var var_c = sse_decode_list_my_enum(deserializer);
    var var_d = sse_decode_list_application_settings(deserializer);
    return MirrorStructTwinSync(a: var_a, b: var_b, c: var_c, d: var_d);
  }

  @protected
  MoreThanJustOneRawStringStructTwinNormal
      sse_decode_more_than_just_one_raw_string_struct_twin_normal(
          SseDeserializer deserializer) {
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinNormal(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinRustAsync
      sse_decode_more_than_just_one_raw_string_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinRustAsync(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MoreThanJustOneRawStringStructTwinSync
      sse_decode_more_than_just_one_raw_string_struct_twin_sync(
          SseDeserializer deserializer) {
    var var_regular = sse_decode_String(deserializer);
    var var_type = sse_decode_String(deserializer);
    var var_async = sse_decode_bool(deserializer);
    var var_another = sse_decode_String(deserializer);
    return MoreThanJustOneRawStringStructTwinSync(
        regular: var_regular,
        type: var_type,
        async: var_async,
        another: var_another);
  }

  @protected
  MyEnum sse_decode_my_enum(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return MyEnum.values[inner];
  }

  @protected
  MyNestedStructTwinNormal sse_decode_my_nested_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_treeNode = sse_decode_my_tree_node_twin_normal(deserializer);
    var var_weekday = sse_decode_weekdays_twin_normal(deserializer);
    return MyNestedStructTwinNormal(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinRustAsync sse_decode_my_nested_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var var_treeNode = sse_decode_my_tree_node_twin_rust_async(deserializer);
    var var_weekday = sse_decode_weekdays_twin_rust_async(deserializer);
    return MyNestedStructTwinRustAsync(
        treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MyNestedStructTwinSync sse_decode_my_nested_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_treeNode = sse_decode_my_tree_node_twin_sync(deserializer);
    var var_weekday = sse_decode_weekdays_twin_sync(deserializer);
    return MyNestedStructTwinSync(treeNode: var_treeNode, weekday: var_weekday);
  }

  @protected
  MySize sse_decode_my_size(SseDeserializer deserializer) {
    var var_width = sse_decode_i_32(deserializer);
    var var_height = sse_decode_i_32(deserializer);
    return MySize(width: var_width, height: var_height);
  }

  @protected
  MyStreamEntryTwinNormal sse_decode_my_stream_entry_twin_normal(
      SseDeserializer deserializer) {
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinNormal(hello: var_hello);
  }

  @protected
  MyStreamEntryTwinRustAsync sse_decode_my_stream_entry_twin_rust_async(
      SseDeserializer deserializer) {
    var var_hello = sse_decode_String(deserializer);
    return MyStreamEntryTwinRustAsync(hello: var_hello);
  }

  @protected
  MyStruct sse_decode_my_struct(SseDeserializer deserializer) {
    var var_content = sse_decode_bool(deserializer);
    return MyStruct(content: var_content);
  }

  @protected
  MyTreeNodeTwinNormal sse_decode_my_tree_node_twin_normal(
      SseDeserializer deserializer) {
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_normal(deserializer);
    return MyTreeNodeTwinNormal(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinRustAsync sse_decode_my_tree_node_twin_rust_async(
      SseDeserializer deserializer) {
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children =
        sse_decode_list_my_tree_node_twin_rust_async(deserializer);
    return MyTreeNodeTwinRustAsync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  MyTreeNodeTwinSync sse_decode_my_tree_node_twin_sync(
      SseDeserializer deserializer) {
    var var_valueI32 = sse_decode_i_32(deserializer);
    var var_valueVecU8 = sse_decode_list_prim_u_8_strict(deserializer);
    var var_valueBoolean = sse_decode_bool(deserializer);
    var var_children = sse_decode_list_my_tree_node_twin_sync(deserializer);
    return MyTreeNodeTwinSync(
        valueI32: var_valueI32,
        valueVecU8: var_valueVecU8,
        valueBoolean: var_valueBoolean,
        children: var_children);
  }

  @protected
  NestedRawStringMirrored sse_decode_nested_raw_string_mirrored(
      SseDeserializer deserializer) {
    var var_raw = sse_decode_raw_string_mirrored(deserializer);
    return NestedRawStringMirrored(raw: var_raw);
  }

  @protected
  NewSimpleStruct sse_decode_new_simple_struct(SseDeserializer deserializer) {
    var var_field = sse_decode_i_32(deserializer);
    return NewSimpleStruct(field: var_field);
  }

  @protected
  NewTypeIntTwinNormal sse_decode_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinNormal(field0: var_field0);
  }

  @protected
  NewTypeIntTwinRustAsync sse_decode_new_type_int_twin_rust_async(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinRustAsync(field0: var_field0);
  }

  @protected
  NewTypeIntTwinSync sse_decode_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_64(deserializer);
    return NewTypeIntTwinSync(field0: var_field0);
  }

  @protected
  NoteTwinNormal sse_decode_note_twin_normal(SseDeserializer deserializer) {
    var var_day = sse_decode_box_weekdays_twin_normal(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinNormal(day: var_day, body: var_body);
  }

  @protected
  NoteTwinRustAsync sse_decode_note_twin_rust_async(
      SseDeserializer deserializer) {
    var var_day = sse_decode_box_weekdays_twin_rust_async(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinRustAsync(day: var_day, body: var_body);
  }

  @protected
  NoteTwinSync sse_decode_note_twin_sync(SseDeserializer deserializer) {
    var var_day = sse_decode_box_weekdays_twin_sync(deserializer);
    var var_body = sse_decode_String(deserializer);
    return NoteTwinSync(day: var_day, body: var_body);
  }

  @protected
  Numbers sse_decode_numbers(SseDeserializer deserializer) {
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Numbers(field0: var_field0);
  }

  @protected
  OldSimpleStruct sse_decode_old_simple_struct(SseDeserializer deserializer) {
    var var_field = sse_decode_i_32(deserializer);
    return OldSimpleStruct(field: var_field);
  }

  @protected
  OpaqueNestedTwinMoi sse_decode_opaque_nested_twin_moi(
      SseDeserializer deserializer) {
    var var_first = sse_decode_RustOpaque_hide_data_twin_moi(deserializer);
    var var_second = sse_decode_RustOpaque_hide_data_twin_moi(deserializer);
    return OpaqueNestedTwinMoi(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinNormal sse_decode_opaque_nested_twin_normal(
      SseDeserializer deserializer) {
    var var_first = sse_decode_RustOpaque_hide_data_twin_normal(deserializer);
    var var_second = sse_decode_RustOpaque_hide_data_twin_normal(deserializer);
    return OpaqueNestedTwinNormal(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinRustAsync sse_decode_opaque_nested_twin_rust_async(
      SseDeserializer deserializer) {
    var var_first =
        sse_decode_RustOpaque_hide_data_twin_rust_async(deserializer);
    var var_second =
        sse_decode_RustOpaque_hide_data_twin_rust_async(deserializer);
    return OpaqueNestedTwinRustAsync(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinRustAsyncMoi sse_decode_opaque_nested_twin_rust_async_moi(
      SseDeserializer deserializer) {
    var var_first =
        sse_decode_RustOpaque_hide_data_twin_rust_async_moi(deserializer);
    var var_second =
        sse_decode_RustOpaque_hide_data_twin_rust_async_moi(deserializer);
    return OpaqueNestedTwinRustAsyncMoi(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinSync sse_decode_opaque_nested_twin_sync(
      SseDeserializer deserializer) {
    var var_first = sse_decode_RustOpaque_hide_data_twin_sync(deserializer);
    var var_second = sse_decode_RustOpaque_hide_data_twin_sync(deserializer);
    return OpaqueNestedTwinSync(first: var_first, second: var_second);
  }

  @protected
  OpaqueNestedTwinSyncMoi sse_decode_opaque_nested_twin_sync_moi(
      SseDeserializer deserializer) {
    var var_first = sse_decode_RustOpaque_hide_data_twin_sync_moi(deserializer);
    var var_second =
        sse_decode_RustOpaque_hide_data_twin_sync_moi(deserializer);
    return OpaqueNestedTwinSyncMoi(first: var_first, second: var_second);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Object? sse_decode_opt_box_autoadd_DartOpaque(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_DartOpaque(deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataAnotherTwinMoi?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_another_twin_moi(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_another_twin_moi(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataAnotherTwinNormal?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_another_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_another_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinMoi? sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_moi(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_moi(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinNormal?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinRustAsync?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinRustAsyncMoi?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinSync? sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  HideDataTwinSyncMoi?
      sse_decode_opt_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ApplicationEnv? sse_decode_opt_box_autoadd_application_env(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_application_env(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinNormal? sse_decode_opt_box_autoadd_attribute_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinRustAsync? sse_decode_opt_box_autoadd_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AttributeTwinSync? sse_decode_opt_box_autoadd_attribute_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicGeneralEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_general_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinNormal?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicPrimitiveEnumTwinSync?
      sse_decode_opt_box_autoadd_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_primitive_enum_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinNormal? sse_decode_opt_box_autoadd_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinRustAsync?
      sse_decode_opt_box_autoadd_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BasicStructTwinSync? sse_decode_opt_box_autoadd_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_basic_struct_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinNormal? sse_decode_opt_box_autoadd_element_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinRustAsync? sse_decode_opt_box_autoadd_element_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ElementTwinSync? sse_decode_opt_box_autoadd_element_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync?
      sse_decode_opt_box_autoadd_exotic_optionals_twin_sync(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_32(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_16(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_32(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_i_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_isize(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_isize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinNormal? sse_decode_opt_box_autoadd_measure_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinRustAsync? sse_decode_opt_box_autoadd_measure_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  MeasureTwinSync? sse_decode_opt_box_autoadd_measure_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_measure_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinNormal? sse_decode_opt_box_autoadd_new_type_int_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinRustAsync?
      sse_decode_opt_box_autoadd_new_type_int_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  NewTypeIntTwinSync? sse_decode_opt_box_autoadd_new_type_int_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_new_type_int_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  (String, int)? sse_decode_opt_box_autoadd_record_string_i_32(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_record_string_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_16(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_16(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_usize(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_usize(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinNormal? sse_decode_opt_box_autoadd_weekdays_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinRustAsync? sse_decode_opt_box_autoadd_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  WeekdaysTwinSync? sse_decode_opt_box_autoadd_weekdays_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_weekdays_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinNormal?
      sse_decode_opt_box_benchmark_binary_tree_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinRustAsync?
      sse_decode_opt_box_benchmark_binary_tree_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  BenchmarkBinaryTreeTwinSync?
      sse_decode_opt_box_benchmark_binary_tree_twin_sync(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_benchmark_binary_tree_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_bool(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinNormal? sse_decode_opt_box_exotic_optionals_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinRustAsync?
      sse_decode_opt_box_exotic_optionals_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ExoticOptionalsTwinSync? sse_decode_opt_box_exotic_optionals_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_exotic_optionals_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_f_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_32(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_64(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_i_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_i_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_u_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal>? sse_decode_opt_list_attribute_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync>? sse_decode_opt_list_attribute_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync>? sse_decode_opt_list_attribute_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_attribute_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinNormal>? sse_decode_opt_list_element_twin_normal(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_normal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinRustAsync>? sse_decode_opt_list_element_twin_rust_async(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_rust_async(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ElementTwinSync>? sse_decode_opt_list_element_twin_sync(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_element_twin_sync(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinNormal?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_normal(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_normal(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinRustAsync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_rust_async(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<AttributeTwinSync?>?
      sse_decode_opt_list_opt_box_autoadd_attribute_twin_sync(
          SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_opt_box_autoadd_attribute_twin_sync(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float32List? sse_decode_opt_list_prim_f_32_strict(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Float64List? sse_decode_opt_list_prim_f_64_strict(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_f_64_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int32List? sse_decode_opt_list_prim_i_32_strict(
      SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_32_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Int8List? sse_decode_opt_list_prim_i_8_strict(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_i_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OptVecsTwinNormal sse_decode_opt_vecs_twin_normal(
      SseDeserializer deserializer) {
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_normal(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinNormal(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinRustAsync sse_decode_opt_vecs_twin_rust_async(
      SseDeserializer deserializer) {
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_rust_async(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinRustAsync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  OptVecsTwinSync sse_decode_opt_vecs_twin_sync(SseDeserializer deserializer) {
    var var_i32 = sse_decode_list_opt_box_autoadd_i_32(deserializer);
    var var_enums =
        sse_decode_list_opt_box_autoadd_weekdays_twin_sync(deserializer);
    var var_strings = sse_decode_list_opt_String(deserializer);
    var var_buffers = sse_decode_list_opt_list_prim_i_32_strict(deserializer);
    return OptVecsTwinSync(
        i32: var_i32,
        enums: var_enums,
        strings: var_strings,
        buffers: var_buffers);
  }

  @protected
  PointTwinNormal sse_decode_point_twin_normal(SseDeserializer deserializer) {
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinNormal(x: var_x, y: var_y);
  }

  @protected
  PointTwinNormalArray2 sse_decode_point_twin_normal_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_point_twin_normal(deserializer);
    return PointTwinNormalArray2(inner);
  }

  @protected
  PointTwinRustAsync sse_decode_point_twin_rust_async(
      SseDeserializer deserializer) {
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinRustAsync(x: var_x, y: var_y);
  }

  @protected
  PointTwinRustAsyncArray2 sse_decode_point_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_point_twin_rust_async(deserializer);
    return PointTwinRustAsyncArray2(inner);
  }

  @protected
  PointTwinSync sse_decode_point_twin_sync(SseDeserializer deserializer) {
    var var_x = sse_decode_f_32(deserializer);
    var var_y = sse_decode_f_32(deserializer);
    return PointTwinSync(x: var_x, y: var_y);
  }

  @protected
  PointTwinSyncArray2 sse_decode_point_twin_sync_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_point_twin_sync(deserializer);
    return PointTwinSyncArray2(inner);
  }

  @protected
  RawStringEnumMirrored sse_decode_raw_string_enum_mirrored(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 =
            sse_decode_box_autoadd_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Raw(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_nested_raw_string_mirrored(deserializer);
        return RawStringEnumMirrored_Nested(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_list_of_nested_raw_string_mirrored(
                deserializer);
        return RawStringEnumMirrored_ListOfNested(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  RawStringItemStructTwinNormal sse_decode_raw_string_item_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinNormal(type: var_type);
  }

  @protected
  RawStringItemStructTwinRustAsync
      sse_decode_raw_string_item_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinRustAsync(type: var_type);
  }

  @protected
  RawStringItemStructTwinSync sse_decode_raw_string_item_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_type = sse_decode_String(deserializer);
    return RawStringItemStructTwinSync(type: var_type);
  }

  @protected
  RawStringMirrored sse_decode_raw_string_mirrored(
      SseDeserializer deserializer) {
    var var_value = sse_decode_String(deserializer);
    return RawStringMirrored(value: var_value);
  }

  @protected
  (ApplicationSettings, RawStringEnumMirrored)
      sse_decode_record_application_settings_raw_string_enum_mirrored(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_application_settings(deserializer);
    var var_field1 = sse_decode_raw_string_enum_mirrored(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinNormal)
      sse_decode_record_i_32_basic_general_enum_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinRustAsync)
      sse_decode_record_i_32_basic_general_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_general_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicGeneralEnumTwinSync)
      sse_decode_record_i_32_basic_general_enum_twin_sync(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_general_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinNormal)
      sse_decode_record_i_32_basic_primitive_enum_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinRustAsync)
      sse_decode_record_i_32_basic_primitive_enum_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 =
        sse_decode_basic_primitive_enum_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicPrimitiveEnumTwinSync)
      sse_decode_record_i_32_basic_primitive_enum_twin_sync(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_primitive_enum_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinNormal) sse_decode_record_i_32_basic_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinRustAsync)
      sse_decode_record_i_32_basic_struct_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, BasicStructTwinSync) sse_decode_record_i_32_basic_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_basic_struct_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, bool) sse_decode_record_i_32_bool(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_bool(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_32(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, double) sse_decode_record_i_32_f_64(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_f_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_16(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_32(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_64(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_i_8(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_isize(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_isize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, Uint8List) sse_decode_record_i_32_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, String) sse_decode_record_i_32_string(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_16(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_16(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_32(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_64(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_64(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_u_8(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_u_8(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (int, int) sse_decode_record_i_32_usize(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_usize(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinNormal)
      sse_decode_record_string_enum_simple_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinRustAsync)
      sse_decode_record_string_enum_simple_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, EnumSimpleTwinSync) sse_decode_record_string_enum_simple_twin_sync(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_enum_simple_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, int) sse_decode_record_string_i_32(SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinNormal)
      sse_decode_record_string_kitchen_sink_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_normal(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinRustAsync)
      sse_decode_record_string_kitchen_sink_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_rust_async(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, KitchenSinkTwinSync) sse_decode_record_string_kitchen_sink_twin_sync(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_kitchen_sink_twin_sync(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Uint8List) sse_decode_record_string_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_list_prim_u_8_strict(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, MySize) sse_decode_record_string_my_size(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_my_size(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Sequences sse_decode_sequences(SseDeserializer deserializer) {
    var var_field0 = sse_decode_list_prim_i_32_strict(deserializer);
    return Sequences(field0: var_field0);
  }

  @protected
  SomeStructTwinNormal sse_decode_some_struct_twin_normal(
      SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinNormal(value: var_value);
  }

  @protected
  SomeStructTwinRustAsync sse_decode_some_struct_twin_rust_async(
      SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinRustAsync(value: var_value);
  }

  @protected
  SomeStructTwinSync sse_decode_some_struct_twin_sync(
      SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return SomeStructTwinSync(value: var_value);
  }

  @protected
  SpeedTwinNormal sse_decode_speed_twin_normal(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinNormal_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinNormal_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinRustAsync sse_decode_speed_twin_rust_async(
      SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinRustAsync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinRustAsync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SpeedTwinSync sse_decode_speed_twin_sync(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SpeedTwinSync_Unknown();
      case 1:
        var var_field0 = sse_decode_f_64(deserializer);
        return SpeedTwinSync_GPS(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  StructWithCommentsTwinNormal sse_decode_struct_with_comments_twin_normal(
      SseDeserializer deserializer) {
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinNormal(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinRustAsync
      sse_decode_struct_with_comments_twin_rust_async(
          SseDeserializer deserializer) {
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinRustAsync(
        fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithCommentsTwinSync sse_decode_struct_with_comments_twin_sync(
      SseDeserializer deserializer) {
    var var_fieldWithComments = sse_decode_i_32(deserializer);
    return StructWithCommentsTwinSync(fieldWithComments: var_fieldWithComments);
  }

  @protected
  StructWithEnumTwinNormal sse_decode_struct_with_enum_twin_normal(
      SseDeserializer deserializer) {
    var var_abc1 = sse_decode_abc_twin_normal(deserializer);
    var var_abc2 = sse_decode_abc_twin_normal(deserializer);
    return StructWithEnumTwinNormal(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinRustAsync sse_decode_struct_with_enum_twin_rust_async(
      SseDeserializer deserializer) {
    var var_abc1 = sse_decode_abc_twin_rust_async(deserializer);
    var var_abc2 = sse_decode_abc_twin_rust_async(deserializer);
    return StructWithEnumTwinRustAsync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithEnumTwinSync sse_decode_struct_with_enum_twin_sync(
      SseDeserializer deserializer) {
    var var_abc1 = sse_decode_abc_twin_sync(deserializer);
    var var_abc2 = sse_decode_abc_twin_sync(deserializer);
    return StructWithEnumTwinSync(abc1: var_abc1, abc2: var_abc2);
  }

  @protected
  StructWithOneFieldTwinNormal sse_decode_struct_with_one_field_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinNormal(a: var_a);
  }

  @protected
  StructWithOneFieldTwinRustAsync
      sse_decode_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinRustAsync(a: var_a);
  }

  @protected
  StructWithOneFieldTwinSync sse_decode_struct_with_one_field_twin_sync(
      SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    return StructWithOneFieldTwinSync(a: var_a);
  }

  @protected
  StructWithTwoFieldTwinNormal sse_decode_struct_with_two_field_twin_normal(
      SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinNormal(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinRustAsync
      sse_decode_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinRustAsync(a: var_a, b: var_b);
  }

  @protected
  StructWithTwoFieldTwinSync sse_decode_struct_with_two_field_twin_sync(
      SseDeserializer deserializer) {
    var var_a = sse_decode_i_32(deserializer);
    var var_b = sse_decode_i_32(deserializer);
    return StructWithTwoFieldTwinSync(a: var_a, b: var_b);
  }

  @protected
  StructWithZeroFieldTwinNormal sse_decode_struct_with_zero_field_twin_normal(
      SseDeserializer deserializer) {
    return StructWithZeroFieldTwinNormal();
  }

  @protected
  StructWithZeroFieldTwinRustAsync
      sse_decode_struct_with_zero_field_twin_rust_async(
          SseDeserializer deserializer) {
    return StructWithZeroFieldTwinRustAsync();
  }

  @protected
  StructWithZeroFieldTwinSync sse_decode_struct_with_zero_field_twin_sync(
      SseDeserializer deserializer) {
    return StructWithZeroFieldTwinSync();
  }

  @protected
  SumWithTwinNormal sse_decode_sum_with_twin_normal(
      SseDeserializer deserializer) {
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinNormal(x: var_x);
  }

  @protected
  SumWithTwinNormalArray3 sse_decode_sum_with_twin_normal_array_3(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_sum_with_twin_normal(deserializer);
    return SumWithTwinNormalArray3(inner);
  }

  @protected
  SumWithTwinRustAsync sse_decode_sum_with_twin_rust_async(
      SseDeserializer deserializer) {
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinRustAsync(x: var_x);
  }

  @protected
  SumWithTwinRustAsyncArray3 sse_decode_sum_with_twin_rust_async_array_3(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_sum_with_twin_rust_async(deserializer);
    return SumWithTwinRustAsyncArray3(inner);
  }

  @protected
  SumWithTwinSync sse_decode_sum_with_twin_sync(SseDeserializer deserializer) {
    var var_x = sse_decode_u_32(deserializer);
    return SumWithTwinSync(x: var_x);
  }

  @protected
  SumWithTwinSyncArray3 sse_decode_sum_with_twin_sync_array_3(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_sum_with_twin_sync(deserializer);
    return SumWithTwinSyncArray3(inner);
  }

  @protected
  TestIdTwinNormal sse_decode_test_id_twin_normal(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinNormal(field0: var_field0);
  }

  @protected
  TestIdTwinNormalArray2 sse_decode_test_id_twin_normal_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray2(inner);
  }

  @protected
  TestIdTwinNormalArray4 sse_decode_test_id_twin_normal_array_4(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_normal(deserializer);
    return TestIdTwinNormalArray4(inner);
  }

  @protected
  TestIdTwinRustAsync sse_decode_test_id_twin_rust_async(
      SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinRustAsync(field0: var_field0);
  }

  @protected
  TestIdTwinRustAsyncArray2 sse_decode_test_id_twin_rust_async_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray2(inner);
  }

  @protected
  TestIdTwinRustAsyncArray4 sse_decode_test_id_twin_rust_async_array_4(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_rust_async(deserializer);
    return TestIdTwinRustAsyncArray4(inner);
  }

  @protected
  TestIdTwinSync sse_decode_test_id_twin_sync(SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32_array_2(deserializer);
    return TestIdTwinSync(field0: var_field0);
  }

  @protected
  TestIdTwinSyncArray2 sse_decode_test_id_twin_sync_array_2(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray2(inner);
  }

  @protected
  TestIdTwinSyncArray4 sse_decode_test_id_twin_sync_array_4(
      SseDeserializer deserializer) {
    var inner = sse_decode_list_test_id_twin_sync(deserializer);
    return TestIdTwinSyncArray4(inner);
  }

  @protected
  TestModelTwinNormal sse_decode_test_model_twin_normal(
      SseDeserializer deserializer) {
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinNormal(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinRustAsync sse_decode_test_model_twin_rust_async(
      SseDeserializer deserializer) {
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinRustAsync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TestModelTwinSync sse_decode_test_model_twin_sync(
      SseDeserializer deserializer) {
    var var_id = sse_decode_u_64(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_aliasEnum = sse_decode_my_enum(deserializer);
    var var_aliasStruct = sse_decode_my_struct(deserializer);
    return TestModelTwinSync(
        id: var_id,
        name: var_name,
        aliasEnum: var_aliasEnum,
        aliasStruct: var_aliasStruct);
  }

  @protected
  TupleStructWithOneFieldTwinNormal
      sse_decode_tuple_struct_with_one_field_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinNormal(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinRustAsync
      sse_decode_tuple_struct_with_one_field_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinRustAsync(field0: var_field0);
  }

  @protected
  TupleStructWithOneFieldTwinSync
      sse_decode_tuple_struct_with_one_field_twin_sync(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    return TupleStructWithOneFieldTwinSync(field0: var_field0);
  }

  @protected
  TupleStructWithTwoFieldTwinNormal
      sse_decode_tuple_struct_with_two_field_twin_normal(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinNormal(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinRustAsync
      sse_decode_tuple_struct_with_two_field_twin_rust_async(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinRustAsync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  TupleStructWithTwoFieldTwinSync
      sse_decode_tuple_struct_with_two_field_twin_sync(
          SseDeserializer deserializer) {
    var var_field0 = sse_decode_i_32(deserializer);
    var var_field1 = sse_decode_i_32(deserializer);
    return TupleStructWithTwoFieldTwinSync(
        field0: var_field0, field1: var_field1);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array1600 sse_decode_u_8_array_1600(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array1600(inner);
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  U8Array5 sse_decode_u_8_array_5(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array5(inner);
  }

  @protected
  U8Array8 sse_decode_u_8_array_8(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array8(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  UserIdTwinNormal sse_decode_user_id_twin_normal(
      SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinNormal(value: var_value);
  }

  @protected
  UserIdTwinRustAsync sse_decode_user_id_twin_rust_async(
      SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinRustAsync(value: var_value);
  }

  @protected
  UserIdTwinSync sse_decode_user_id_twin_sync(SseDeserializer deserializer) {
    var var_value = sse_decode_u_32(deserializer);
    return UserIdTwinSync(value: var_value);
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  VecOfPrimitivePackTwinNormal sse_decode_vec_of_primitive_pack_twin_normal(
      SseDeserializer deserializer) {
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinNormal(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinRustAsync
      sse_decode_vec_of_primitive_pack_twin_rust_async(
          SseDeserializer deserializer) {
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinRustAsync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  VecOfPrimitivePackTwinSync sse_decode_vec_of_primitive_pack_twin_sync(
      SseDeserializer deserializer) {
    var var_int8List = sse_decode_list_prim_i_8_strict(deserializer);
    var var_uint8List = sse_decode_list_prim_u_8_strict(deserializer);
    var var_int16List = sse_decode_list_prim_i_16_strict(deserializer);
    var var_uint16List = sse_decode_list_prim_u_16_strict(deserializer);
    var var_uint32List = sse_decode_list_prim_u_32_strict(deserializer);
    var var_int32List = sse_decode_list_prim_i_32_strict(deserializer);
    var var_uint64List = sse_decode_list_prim_u_64_strict(deserializer);
    var var_int64List = sse_decode_list_prim_i_64_strict(deserializer);
    var var_float32List = sse_decode_list_prim_f_32_strict(deserializer);
    var var_float64List = sse_decode_list_prim_f_64_strict(deserializer);
    var var_boolList = sse_decode_list_bool(deserializer);
    return VecOfPrimitivePackTwinSync(
        int8List: var_int8List,
        uint8List: var_uint8List,
        int16List: var_int16List,
        uint16List: var_uint16List,
        uint32List: var_uint32List,
        int32List: var_int32List,
        uint64List: var_uint64List,
        int64List: var_int64List,
        float32List: var_float32List,
        float64List: var_float64List,
        boolList: var_boolList);
  }

  @protected
  WeekdaysTwinNormal sse_decode_weekdays_twin_normal(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinNormal.values[inner];
  }

  @protected
  WeekdaysTwinRustAsync sse_decode_weekdays_twin_rust_async(
      SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinRustAsync.values[inner];
  }

  @protected
  WeekdaysTwinSync sse_decode_weekdays_twin_sync(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return WeekdaysTwinSync.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          BoxHelloTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          BoxHelloTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          BoxHelloTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
          BoxMyTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
          BoxMyTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
          BoxMyTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          NonCloneSimpleTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          NonCloneSimpleTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          NonCloneSimpleTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          StructWithGoodAndOpaqueFieldTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          StructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          StructWithGoodAndOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          StructWithGoodAndOpaqueFieldTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          StructWithGoodAndOpaqueFieldTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          OpaqueOneTwinMoiOpaqueTwoTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          OpaqueTwoTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          OpaqueTwoTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          OpaqueOneTwinSyncOpaqueTwoTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          OpaqueTwoTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          OpaqueOneTwinNormalOpaqueTwoTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          BoxHelloTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          BoxHelloTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          BoxHelloTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          NonCloneSimpleTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          NonCloneSimpleTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          NonCloneSimpleTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          StructWithGoodAndOpaqueFieldTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          StructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          StructWithGoodAndOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          StructWithGoodAndOpaqueFieldTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          StructWithGoodAndOpaqueFieldTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          BoxHelloTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          BoxHelloTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          BoxHelloTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          NonCloneSimpleTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          NonCloneSimpleTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          NonCloneSimpleTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          StructWithGoodAndOpaqueFieldTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          StructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          StructWithGoodAndOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          StructWithGoodAndOpaqueFieldTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          StructWithGoodAndOpaqueFieldTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Backtrace(String self, SseSerializer serializer) {
    throw UnimplementedError(
        'not yet supported in serialized mode, please use full_dep mode, and feel free to create an issue');
  }

  @protected
  void sse_encode_DartFn_Inputs_DartOpaque_Output_unit(
      FutureOr<void> Function(Object) self, SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_DartOpaque_Output_unit(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_unit(
      FutureOr<void> Function(String) self, SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_unit(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
          FutureOr<void> Function(String, DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_normal_Output_unit(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
          FutureOr<void> Function(
                  String, DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_demo_struct_for_rust_call_dart_twin_rust_async_Output_unit(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_DartOpaque(
      FutureOr<Object> Function() self, SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_DartOpaque(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_String(
      FutureOr<String> Function() self, SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_String(self), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_unit(
      FutureOr<void> Function() self, SseSerializer serializer) {
    sse_encode_DartOpaque(encode_DartFn_Inputs__Output_unit(self), serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
          FutureOr<DemoStructForRustCallDartTwinNormal> Function(
                  DemoStructForRustCallDartTwinNormal)
              self,
          SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_normal_Output_demo_struct_for_rust_call_dart_twin_normal(
            self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
          FutureOr<DemoStructForRustCallDartTwinRustAsync> Function(
                  DemoStructForRustCallDartTwinRustAsync)
              self,
          SseSerializer serializer) {
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_demo_struct_for_rust_call_dart_twin_rust_async_Output_demo_struct_for_rust_call_dart_twin_rust_async(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque_array_1(
      ObjectArray1 self, SseSerializer serializer) {
    sse_encode_list_DartOpaque(self.inner, serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_normal(
      Map<String, EnumSimpleTwinNormal> self, SseSerializer serializer) {
    sse_encode_list_record_string_enum_simple_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_rust_async(
      Map<String, EnumSimpleTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_list_record_string_enum_simple_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_enum_simple_twin_sync(
      Map<String, EnumSimpleTwinSync> self, SseSerializer serializer) {
    sse_encode_list_record_string_enum_simple_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_normal(
      Map<String, KitchenSinkTwinNormal> self, SseSerializer serializer) {
    sse_encode_list_record_string_kitchen_sink_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_rust_async(
      Map<String, KitchenSinkTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_list_record_string_kitchen_sink_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_kitchen_sink_twin_sync(
      Map<String, KitchenSinkTwinSync> self, SseSerializer serializer) {
    sse_encode_list_record_string_kitchen_sink_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_list_prim_u_8_strict(
      Map<String, Uint8List> self, SseSerializer serializer) {
    sse_encode_list_record_string_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_String_my_size(
      Map<String, MySize> self, SseSerializer serializer) {
    sse_encode_list_record_string_my_size(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_String(
      Map<int, String> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_normal(
      Map<int, BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_general_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_rust_async(
      Map<int, BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_general_enum_twin_sync(
      Map<int, BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_general_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_normal(
      Map<int, BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_rust_async(
      Map<int, BasicPrimitiveEnumTwinRustAsync> self,
      SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_primitive_enum_twin_sync(
      Map<int, BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_normal(
      Map<int, BasicStructTwinNormal> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_struct_twin_normal(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_rust_async(
      Map<int, BasicStructTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_struct_twin_rust_async(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_basic_struct_twin_sync(
      Map<int, BasicStructTwinSync> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_basic_struct_twin_sync(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_bool(Map<int, bool> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_bool(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_32(
      Map<int, double> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_f_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_f_64(
      Map<int, double> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_f_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_16(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_i_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_32(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_i_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_64(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_i_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_i_8(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_i_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_isize(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_isize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_list_prim_u_8_strict(
      Map<int, Uint8List> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_list_prim_u_8_strict(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_16(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_u_16(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_32(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_u_32(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_64(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_u_64(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_u_8(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_u_8(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_i_32_usize(Map<int, int> self, SseSerializer serializer) {
    sse_encode_list_record_i_32_usize(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinMoi(
      MutexHideDataTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinNormal(
      MutexHideDataTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinRustAsync(
      MutexHideDataTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinRustAsyncMoi(
      MutexHideDataTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinSync(
      MutexHideDataTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_MutexHideDataTwinSyncMoi(
      MutexHideDataTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinMoi(
      RwLockHideDataTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinNormal(
      RwLockHideDataTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(
      RwLockHideDataTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinRustAsyncMoi(
      RwLockHideDataTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinSync(
      RwLockHideDataTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_RwLockHideDataTwinSyncMoi(
      RwLockHideDataTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinMoi(
      BoxDartDebugTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinNormal(
      BoxDartDebugTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinRustAsync(
      BoxDartDebugTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinRustAsyncMoi(
      BoxDartDebugTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinSync(
      BoxDartDebugTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_box_dynDartDebugTwinSyncMoi(
      BoxDartDebugTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynFnStringStringSendSync(
          BoxFnStringString self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinMoi(
          BoxHelloTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinNormal(
          BoxHelloTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsync(
          BoxHelloTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinRustAsyncMoi(
          BoxHelloTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSync(
          BoxHelloTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynHelloTraitTwinSyncMoi(
          BoxHelloTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinMoiSendSync(
          BoxMyTraitTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinNormalSendSync(
          BoxMyTraitTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncMoiSendSync(
          BoxMyTraitTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinRustAsyncSendSync(
          BoxMyTraitTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncMoiSendSync(
          BoxMyTraitTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBoxdynMyTraitTwinSyncSendSync(
          BoxMyTraitTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinMoi(
          NonCloneSimpleTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinNormal(
          NonCloneSimpleTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsync(
          NonCloneSimpleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinRustAsyncMoi(
          NonCloneSimpleTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSync(
          NonCloneSimpleTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNonCloneSimpleTwinSyncMoi(
          NonCloneSimpleTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleA(
          StructInMiscNoTwinExampleA self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructInMiscNoTwinExampleB(
          StructInMiscNoTwinExampleB self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinMoi(
          StructWithGoodAndOpaqueFieldTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinNormal(
          StructWithGoodAndOpaqueFieldTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsync(
          StructWithGoodAndOpaqueFieldTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinRustAsyncMoi(
          StructWithGoodAndOpaqueFieldTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSync(
          StructWithGoodAndOpaqueFieldTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithGoodAndOpaqueFieldTwinSyncMoi(
          StructWithGoodAndOpaqueFieldTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockStructWithImplBlockInMultiFile(
          StructWithImplBlockInMultiFile self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueOneTwinMoicrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          OpaqueOneTwinMoiOpaqueTwoTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_moiOpaqueTwoTwinMoi(
          OpaqueTwoTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueOneTwinRustAsynccrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          OpaqueOneTwinRustAsyncOpaqueTwoTwinRustAsync self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_asyncOpaqueTwoTwinRustAsync(
          OpaqueTwoTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueOneTwinRustAsyncMoicrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          OpaqueOneTwinRustAsyncMoiOpaqueTwoTwinRustAsyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_rust_async_moiOpaqueTwoTwinRustAsyncMoi(
          OpaqueTwoTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueOneTwinSynccrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          OpaqueOneTwinSyncOpaqueTwoTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_syncOpaqueTwoTwinSync(
          OpaqueTwoTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueOneTwinSyncMoicrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          OpaqueOneTwinSyncMoiOpaqueTwoTwinSyncMoi self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapipseudo_manualrust_auto_opaque_twin_sync_moiOpaqueTwoTwinSyncMoi(
          OpaqueTwoTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueOneTwinNormalcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          OpaqueOneTwinNormalOpaqueTwoTwinNormal self,
          SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockcrateapirust_auto_opaqueOpaqueTwoTwinNormal(
          OpaqueTwoTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_moi(
      FrbOpaqueReturnTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_normal(
      FrbOpaqueReturnTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_rust_async(
      FrbOpaqueReturnTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_rust_async_moi(
      FrbOpaqueReturnTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_sync(
      FrbOpaqueReturnTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_return_twin_sync_moi(
      FrbOpaqueReturnTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_sync_return_twin_moi(
      FrbOpaqueSyncReturnTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_frb_opaque_sync_return_twin_normal(
      FrbOpaqueSyncReturnTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_another_twin_moi(
      HideDataAnotherTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_another_twin_normal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_moi(
      HideDataTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_moi_array_2(
      HideDataTwinMoiArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_moi(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_normal(
      HideDataTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_normal_array_2(
      HideDataTwinNormalArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_rust_async(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_rust_async_array_2(
      HideDataTwinRustAsyncArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_rust_async(
        self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_rust_async_moi(
      HideDataTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_rust_async_moi_array_2(
      HideDataTwinRustAsyncMoiArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_rust_async_moi(
        self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_sync(
      HideDataTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_sync_array_2(
      HideDataTwinSyncArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_sync_moi(
      HideDataTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_hide_data_twin_sync_moi_array_2(
      HideDataTwinSyncMoiArray2 self, SseSerializer serializer) {
    sse_encode_list_RustOpaque_hide_data_twin_sync_moi(self.inner, serializer);
  }

  @protected
  void sse_encode_RustOpaque_i_16(I16 self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_i_32(I32 self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_moi(
      NonCloneDataTwinMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_normal(
      NonCloneDataTwinNormal self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_rust_async(
      NonCloneDataTwinRustAsync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_rust_async_moi(
      NonCloneDataTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_sync(
      NonCloneDataTwinSync self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_non_clone_data_twin_sync_moi(
      NonCloneDataTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_Set_String(Set<String> self, SseSerializer serializer) {
    sse_encode_list_String(self.toList(), serializer);
  }

  @protected
  void sse_encode_Set_i_32(Set<int> self, SseSerializer serializer) {
    sse_encode_list_prim_i_32_strict(
        Int32List.fromList(self.toList()), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_a_twin_normal(ATwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_a_twin_sync(ATwinSync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_normal(field0, serializer);
      case AbcTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_normal(field0, serializer);
      case AbcTwinNormal_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_normal(field0, serializer);
      case AbcTwinNormal_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_rust_async(field0, serializer);
      case AbcTwinRustAsync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_abc_twin_sync(AbcTwinSync self, SseSerializer serializer) {
    switch (self) {
      case AbcTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_a_twin_sync(field0, serializer);
      case AbcTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_b_twin_sync(field0, serializer);
      case AbcTwinSync_C(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_c_twin_sync(field0, serializer);
      case AbcTwinSync_JustInt(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_i_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_another_macro_struct_twin_normal(
      AnotherMacroStructTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.data, serializer);
    sse_encode_i_32(self.nonFinalData, serializer);
  }

  @protected
  void sse_encode_another_twin_normal(
      AnotherTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_rust_async(
      AnotherTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_another_twin_sync(
      AnotherTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    sse_encode_list_application_env_var(self.vars, serializer);
  }

  @protected
  void sse_encode_application_env_var(
      ApplicationEnvVar self, SseSerializer serializer) {
    sse_encode_String(self.field0, serializer);
    sse_encode_bool(self.field1, serializer);
  }

  @protected
  void sse_encode_application_message(
      ApplicationMessage self, SseSerializer serializer) {
    switch (self) {
      case ApplicationMessage_DisplayMessage(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case ApplicationMessage_RenderPixel(x: final x, y: final y):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(x, serializer);
        sse_encode_i_32(y, serializer);
      case ApplicationMessage_Exit():
        sse_encode_i_32(2, serializer);
    }
  }

  @protected
  void sse_encode_application_mode(
      ApplicationMode self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_application_mode(self.mode, serializer);
    sse_encode_box_application_env(self.env, serializer);
    sse_encode_opt_box_autoadd_application_env(self.envOptional, serializer);
  }

  @protected
  void sse_encode_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_b_twin_normal(BTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_b_twin_sync(BTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case BasicGeneralEnumTwinNormal_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinNormal_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case BasicGeneralEnumTwinRustAsync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinRustAsync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    switch (self) {
      case BasicGeneralEnumTwinSync_Apple(field: final field):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field, serializer);
      case BasicGeneralEnumTwinSync_Orange():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    sse_encode_opt_String(self.apple, serializer);
    sse_encode_opt_box_autoadd_i_32(self.orange, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_normal(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
        self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.left, serializer);
    sse_encode_opt_box_benchmark_binary_tree_twin_sync(self.right, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.first, serializer);
    sse_encode_list_prim_u_8_strict(self.second, serializer);
    sse_encode_list_prim_u_8_strict(self.third, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_normal(
      BigBuffersTwinNormal self, SseSerializer serializer) {
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_rust_async(
      BigBuffersTwinRustAsync self, SseSerializer serializer) {
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_big_buffers_twin_sync(
      BigBuffersTwinSync self, SseSerializer serializer) {
    sse_encode_list_prim_i_64_strict(self.int64, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64, serializer);
  }

  @protected
  void sse_encode_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_blob_twin_sync(BlobTwinSync self, SseSerializer serializer) {
    sse_encode_u_8_array_1600(self.field0, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    sse_encode_application_env(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_DartOpaque(
      Object self, SseSerializer serializer) {
    sse_encode_DartOpaque(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_another_twin_moi(
      HideDataAnotherTwinMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_another_twin_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_another_twin_normal(
      HideDataAnotherTwinNormal self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_another_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_moi(
      HideDataTwinMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_normal(
      HideDataTwinNormal self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_rust_async(
      HideDataTwinRustAsync self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
      HideDataTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_rust_async_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_sync(
      HideDataTwinSync self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
      HideDataTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_sync_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_normal(
      ATwinNormal self, SseSerializer serializer) {
    sse_encode_a_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_rust_async(
      ATwinRustAsync self, SseSerializer serializer) {
    sse_encode_a_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_a_twin_sync(
      ATwinSync self, SseSerializer serializer) {
    sse_encode_a_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_normal(
      AbcTwinNormal self, SseSerializer serializer) {
    sse_encode_abc_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_rust_async(
      AbcTwinRustAsync self, SseSerializer serializer) {
    sse_encode_abc_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_abc_twin_sync(
      AbcTwinSync self, SseSerializer serializer) {
    sse_encode_abc_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_env(
      ApplicationEnv self, SseSerializer serializer) {
    sse_encode_application_env(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_application_settings(
      ApplicationSettings self, SseSerializer serializer) {
    sse_encode_application_settings(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal self, SseSerializer serializer) {
    sse_encode_attribute_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_attribute_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_attribute_twin_sync(
      AttributeTwinSync self, SseSerializer serializer) {
    sse_encode_attribute_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_normal(
      BTwinNormal self, SseSerializer serializer) {
    sse_encode_b_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_rust_async(
      BTwinRustAsync self, SseSerializer serializer) {
    sse_encode_b_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_b_twin_sync(
      BTwinSync self, SseSerializer serializer) {
    sse_encode_b_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal self, SseSerializer serializer) {
    sse_encode_basic_general_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync self, SseSerializer serializer) {
    sse_encode_basic_general_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync self, SseSerializer serializer) {
    sse_encode_basic_general_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal self, SseSerializer serializer) {
    sse_encode_basic_primitive_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync self, SseSerializer serializer) {
    sse_encode_basic_primitive_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync self, SseSerializer serializer) {
    sse_encode_basic_primitive_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal self, SseSerializer serializer) {
    sse_encode_basic_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_basic_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync self, SseSerializer serializer) {
    sse_encode_basic_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_normal(
      BenchmarkBlobTwinNormal self, SseSerializer serializer) {
    sse_encode_benchmark_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_rust_async(
      BenchmarkBlobTwinRustAsync self, SseSerializer serializer) {
    sse_encode_benchmark_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_benchmark_blob_twin_sync(
      BenchmarkBlobTwinSync self, SseSerializer serializer) {
    sse_encode_benchmark_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_normal(
      CTwinNormal self, SseSerializer serializer) {
    sse_encode_c_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    sse_encode_c_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_c_twin_sync(
      CTwinSync self, SseSerializer serializer) {
    sse_encode_c_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    sse_encode_concatenate_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    sse_encode_concatenate_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    sse_encode_concatenate_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    sse_encode_custom_nested_error_2_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_2_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_2_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    sse_encode_custom_nested_error_inner_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_inner_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_inner_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    sse_encode_custom_nested_error_outer_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_outer_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    sse_encode_custom_nested_error_outer_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    sse_encode_custom_struct_error_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    sse_encode_custom_struct_error_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    sse_encode_custom_struct_error_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    sse_encode_custom_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_custom_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    sse_encode_custom_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    sse_encode_customized_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_customized_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    sse_encode_customized_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    sse_encode_dart_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_dart_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    sse_encode_dart_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    sse_encode_element_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    sse_encode_element_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    sse_encode_element_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {
    sse_encode_empty_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {
    sse_encode_empty_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {
    sse_encode_empty_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    sse_encode_enum_dart_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    sse_encode_enum_dart_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    sse_encode_enum_dart_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_moi(
      EnumOpaqueTwinMoi self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_rust_async_moi(
      EnumOpaqueTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_rust_async_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_opaque_twin_sync_moi(
      EnumOpaqueTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_enum_opaque_twin_sync_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    sse_encode_enum_with_item_mixed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_enum_with_item_mixed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    sse_encode_enum_with_item_mixed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    sse_encode_enum_with_item_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_enum_with_item_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    sse_encode_enum_with_item_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    sse_encode_enum_with_item_tuple_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_enum_with_item_tuple_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    sse_encode_enum_with_item_tuple_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    sse_encode_event_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    sse_encode_event_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_32(double self, SseSerializer serializer) {
    sse_encode_f_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_16(int self, SseSerializer serializer) {
    sse_encode_i_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_32(int self, SseSerializer serializer) {
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_64(int self, SseSerializer serializer) {
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_i_8(int self, SseSerializer serializer) {
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_isize(int self, SseSerializer serializer) {
    sse_encode_isize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    sse_encode_list_of_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_macro_struct(
      MacroStruct self, SseSerializer serializer) {
    sse_encode_macro_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    sse_encode_measure_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    sse_encode_measure_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    sse_encode_measure_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    sse_encode_message_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_message_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    sse_encode_message_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    sse_encode_my_nested_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_my_nested_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    sse_encode_my_nested_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_size(MySize self, SseSerializer serializer) {
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_struct(
      MyStruct self, SseSerializer serializer) {
    sse_encode_my_struct(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    sse_encode_nested_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    sse_encode_new_type_int_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    sse_encode_new_type_int_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    sse_encode_new_type_int_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    sse_encode_note_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    sse_encode_note_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_note_twin_sync(
      NoteTwinSync self, SseSerializer serializer) {
    sse_encode_note_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_numbers(Numbers self, SseSerializer serializer) {
    sse_encode_numbers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_moi(
      OpaqueNestedTwinMoi self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_rust_async_moi(
      OpaqueNestedTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_rust_async_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opaque_nested_twin_sync_moi(
      OpaqueNestedTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_opaque_nested_twin_sync_moi(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    sse_encode_opt_vecs_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_opt_vecs_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    sse_encode_opt_vecs_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    sse_encode_raw_string_mirrored(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    sse_encode_record_string_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sequences(
      Sequences self, SseSerializer serializer) {
    sse_encode_sequences(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    sse_encode_some_struct_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_some_struct_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    sse_encode_some_struct_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    sse_encode_struct_with_comments_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_struct_with_comments_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    sse_encode_struct_with_comments_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    sse_encode_struct_with_enum_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    sse_encode_struct_with_enum_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    sse_encode_struct_with_enum_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    sse_encode_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    sse_encode_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_struct_with_zero_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_struct_with_zero_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {
    sse_encode_struct_with_zero_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    sse_encode_sum_with_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    sse_encode_sum_with_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    sse_encode_sum_with_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    sse_encode_test_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_test_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    sse_encode_test_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_one_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_one_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_one_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_two_field_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_two_field_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    sse_encode_tuple_struct_with_two_field_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_16(int self, SseSerializer serializer) {
    sse_encode_u_16(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(int self, SseSerializer serializer) {
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    sse_encode_user_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_user_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    sse_encode_user_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_usize(int self, SseSerializer serializer) {
    sse_encode_usize(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync self, SseSerializer serializer) {
    sse_encode_benchmark_binary_tree_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_normal(
      BlobTwinNormal self, SseSerializer serializer) {
    sse_encode_blob_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_rust_async(
      BlobTwinRustAsync self, SseSerializer serializer) {
    sse_encode_blob_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_blob_twin_sync(
      BlobTwinSync self, SseSerializer serializer) {
    sse_encode_blob_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_bool(bool self, SseSerializer serializer) {
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    sse_encode_distance_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    sse_encode_distance_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    sse_encode_distance_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    sse_encode_exotic_optionals_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_f_64(double self, SseSerializer serializer) {
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    sse_encode_feed_id_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_feed_id_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    sse_encode_feed_id_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_i_32(int self, SseSerializer serializer) {
    sse_encode_i_32(self, serializer);
  }

  @protected
  void sse_encode_box_i_64(int self, SseSerializer serializer) {
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_box_i_8(int self, SseSerializer serializer) {
    sse_encode_i_8(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    sse_encode_kitchen_sink_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_my_size(MySize self, SseSerializer serializer) {
    sse_encode_my_size(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    sse_encode_speed_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_speed_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    sse_encode_speed_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_box_u_8(int self, SseSerializer serializer) {
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_1600(
      U8Array1600 self, SseSerializer serializer) {
    sse_encode_u_8_array_1600(self, serializer);
  }

  @protected
  void sse_encode_box_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    sse_encode_u_8_array_8(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    sse_encode_weekdays_twin_normal(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    sse_encode_weekdays_twin_rust_async(self, serializer);
  }

  @protected
  void sse_encode_box_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    sse_encode_weekdays_twin_sync(self, serializer);
  }

  @protected
  void sse_encode_c_twin_normal(CTwinNormal self, SseSerializer serializer) {
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_rust_async(
      CTwinRustAsync self, SseSerializer serializer) {
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_c_twin_sync(CTwinSync self, SseSerializer serializer) {
    sse_encode_bool(self.c, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_normal(
      ConcatenateWithTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_rust_async(
      ConcatenateWithTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_concatenate_with_twin_sync(
      ConcatenateWithTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_normal(
      ContainsMirroredSubStructTwinNormal self, SseSerializer serializer) {
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_normal(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_rust_async(
      ContainsMirroredSubStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_rust_async(self.test2, serializer);
  }

  @protected
  void sse_encode_contains_mirrored_sub_struct_twin_sync(
      ContainsMirroredSubStructTwinSync self, SseSerializer serializer) {
    sse_encode_raw_string_mirrored(self.test, serializer);
    sse_encode_another_twin_sync(self.test2, serializer);
  }

  @protected
  void sse_encode_custom_enum_error_twin_normal(
      CustomEnumErrorTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomEnumErrorTwinNormal_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinNormal_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_rust_async(
      CustomEnumErrorTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomEnumErrorTwinRustAsync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinRustAsync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_enum_error_twin_sync(
      CustomEnumErrorTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomEnumErrorTwinSync_One(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomEnumErrorTwinSync_Two(
          message: final message,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(message, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_normal(
      CustomErrorTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomErrorTwinNormal_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinNormal_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_rust_async(
      CustomErrorTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomErrorTwinRustAsync_Error0(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinRustAsync_Error1(
          e: final e,
          backtrace: final backtrace
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_error_twin_sync(
      CustomErrorTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomErrorTwinSync_Error0(e: final e, backtrace: final backtrace):
        sse_encode_i_32(0, serializer);
        sse_encode_String(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
      case CustomErrorTwinSync_Error1(e: final e, backtrace: final backtrace):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(e, serializer);
        sse_encode_Backtrace(backtrace, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_normal(
      CustomNestedError1TwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError1TwinNormal_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinNormal_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_rust_async(
      CustomNestedError1TwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError1TwinRustAsync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinRustAsync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_1_twin_sync(
      CustomNestedError1TwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError1TwinSync_CustomNested1(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError1TwinSync_ErrorNested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_2_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_normal(
      CustomNestedError2TwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError2TwinNormal_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinNormal_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_rust_async(
      CustomNestedError2TwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError2TwinRustAsync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinRustAsync_CustomNested2Number(
          field0: final field0
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_2_twin_sync(
      CustomNestedError2TwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedError2TwinSync_CustomNested2(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedError2TwinSync_CustomNested2Number(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_normal(
      CustomNestedErrorInnerTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinNormal_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinNormal_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_rust_async(
      CustomNestedErrorInnerTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinRustAsync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinRustAsync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_inner_twin_sync(
      CustomNestedErrorInnerTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorInnerTwinSync_Three(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorInnerTwinSync_Four(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_u_32(field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_normal(
      CustomNestedErrorOuterTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinNormal_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinNormal_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_normal(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_rust_async(
      CustomNestedErrorOuterTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinRustAsync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinRustAsync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_rust_async(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_nested_error_outer_twin_sync(
      CustomNestedErrorOuterTwinSync self, SseSerializer serializer) {
    switch (self) {
      case CustomNestedErrorOuterTwinSync_One(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case CustomNestedErrorOuterTwinSync_Two(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_custom_nested_error_inner_twin_sync(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_normal(
      CustomStructErrorAnotherTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_rust_async(
      CustomStructErrorAnotherTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_another_twin_sync(
      CustomStructErrorAnotherTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_normal(
      CustomStructErrorTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_rust_async(
      CustomStructErrorTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_error_twin_sync(
      CustomStructErrorTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.a, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_normal(
      CustomStructTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_rust_async(
      CustomStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_custom_struct_twin_sync(
      CustomStructTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_customized_twin_normal(
      CustomizedTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_rust_async(
      CustomizedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_customized_twin_sync(
      CustomizedTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.finalField, serializer);
    sse_encode_opt_String(self.nonFinalField, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_normal(
      DartOpaqueNestedTwinNormal self, SseSerializer serializer) {
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_rust_async(
      DartOpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_dart_opaque_nested_twin_sync(
      DartOpaqueNestedTwinSync self, SseSerializer serializer) {
    sse_encode_DartOpaque(self.first, serializer);
    sse_encode_DartOpaque(self.second, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_normal(
      DemoStructForRustCallDartTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_demo_struct_for_rust_call_dart_twin_rust_async(
      DemoStructForRustCallDartTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_distance_twin_normal(
      DistanceTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinNormal_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_rust_async(
      DistanceTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinRustAsync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_distance_twin_sync(
      DistanceTwinSync self, SseSerializer serializer) {
    switch (self) {
      case DistanceTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case DistanceTwinSync_Map(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_element_twin_normal(
      ElementTwinNormal self, SseSerializer serializer) {
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_opt_list_element_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_rust_async(
      ElementTwinRustAsync self, SseSerializer serializer) {
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_opt_list_element_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_element_twin_sync(
      ElementTwinSync self, SseSerializer serializer) {
    sse_encode_opt_String(self.tag, serializer);
    sse_encode_opt_String(self.text, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_opt_list_element_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_empty_twin_normal(
      EmptyTwinNormal self, SseSerializer serializer) {}

  @protected
  void sse_encode_empty_twin_rust_async(
      EmptyTwinRustAsync self, SseSerializer serializer) {}

  @protected
  void sse_encode_empty_twin_sync(
      EmptyTwinSync self, SseSerializer serializer) {}

  @protected
  void sse_encode_enum_dart_opaque_twin_normal(
      EnumDartOpaqueTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinNormal_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_rust_async(
      EnumDartOpaqueTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinRustAsync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_dart_opaque_twin_sync(
      EnumDartOpaqueTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumDartOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_i_32(field0, serializer);
      case EnumDartOpaqueTwinSync_Opaque(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_DartOpaque(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_moi(
      EnumOpaqueTwinMoi self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinMoi_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_moi(field0, serializer);
      case EnumOpaqueTwinMoi_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_16(field0, serializer);
      case EnumOpaqueTwinMoi_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinMoi(field0, serializer);
      case EnumOpaqueTwinMoi_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinMoi(field0, serializer);
      case EnumOpaqueTwinMoi_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinMoi(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_moi_array_5(
      EnumOpaqueTwinMoiArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_moi(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_normal(
      EnumOpaqueTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinNormal_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_normal(field0, serializer);
      case EnumOpaqueTwinNormal_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinNormal_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinNormal(field0, serializer);
      case EnumOpaqueTwinNormal_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinNormal(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_normal_array_5(
      EnumOpaqueTwinNormalArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async(
      EnumOpaqueTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinRustAsync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_rust_async(field0, serializer);
      case EnumOpaqueTwinRustAsync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinRustAsync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinRustAsync(field0, serializer);
      case EnumOpaqueTwinRustAsync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinRustAsync(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async_array_5(
      EnumOpaqueTwinRustAsyncArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async_moi(
      EnumOpaqueTwinRustAsyncMoi self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinRustAsyncMoi_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_rust_async_moi(field0, serializer);
      case EnumOpaqueTwinRustAsyncMoi_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_16(field0, serializer);
      case EnumOpaqueTwinRustAsyncMoi_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinRustAsyncMoi(
            field0, serializer);
      case EnumOpaqueTwinRustAsyncMoi_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinRustAsyncMoi(field0, serializer);
      case EnumOpaqueTwinRustAsyncMoi_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinRustAsyncMoi(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_rust_async_moi_array_5(
      EnumOpaqueTwinRustAsyncMoiArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_rust_async_moi(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_sync(
      EnumOpaqueTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinSync_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_sync(field0, serializer);
      case EnumOpaqueTwinSync_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_32(field0, serializer);
      case EnumOpaqueTwinSync_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinSync(field0, serializer);
      case EnumOpaqueTwinSync_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinSync(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_sync_array_5(
      EnumOpaqueTwinSyncArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_opaque_twin_sync_moi(
      EnumOpaqueTwinSyncMoi self, SseSerializer serializer) {
    switch (self) {
      case EnumOpaqueTwinSyncMoi_Struct(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_RustOpaque_hide_data_twin_sync_moi(field0, serializer);
      case EnumOpaqueTwinSyncMoi_Primitive(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_RustOpaque_i_16(field0, serializer);
      case EnumOpaqueTwinSyncMoi_TraitObj(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_RustOpaque_box_dynDartDebugTwinSyncMoi(field0, serializer);
      case EnumOpaqueTwinSyncMoi_Mutex(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_RustOpaque_MutexHideDataTwinSyncMoi(field0, serializer);
      case EnumOpaqueTwinSyncMoi_RwLock(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_RustOpaque_RwLockHideDataTwinSyncMoi(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_opaque_twin_sync_moi_array_5(
      EnumOpaqueTwinSyncMoiArray5 self, SseSerializer serializer) {
    sse_encode_list_enum_opaque_twin_sync_moi(self.inner, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_normal(
      EnumSimpleTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_rust_async(
      EnumSimpleTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_simple_twin_sync(
      EnumSimpleTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_normal(
      EnumWithItemMixedTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinNormal_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinNormal_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_rust_async(
      EnumWithItemMixedTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinRustAsync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinRustAsync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_mixed_twin_sync(
      EnumWithItemMixedTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemMixedTwinSync_A():
        sse_encode_i_32(0, serializer);
      case EnumWithItemMixedTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemMixedTwinSync_C(cField: final cField):
        sse_encode_i_32(2, serializer);
        sse_encode_String(cField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_normal(
      EnumWithItemStructTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinNormal_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinNormal_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_rust_async(
      EnumWithItemStructTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinRustAsync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinRustAsync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_struct_twin_sync(
      EnumWithItemStructTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemStructTwinSync_A(aField: final aField):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(aField, serializer);
      case EnumWithItemStructTwinSync_B(bField: final bField):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(bField, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_normal(
      EnumWithItemTupleTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinNormal_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinNormal_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_rust_async(
      EnumWithItemTupleTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinRustAsync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinRustAsync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_enum_with_item_tuple_twin_sync(
      EnumWithItemTupleTwinSync self, SseSerializer serializer) {
    switch (self) {
      case EnumWithItemTupleTwinSync_A(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case EnumWithItemTupleTwinSync_B(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_i_32_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_event_twin_normal(
      EventTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_event_twin_rust_async(
      EventTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.address, serializer);
    sse_encode_String(self.payload, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal self, SseSerializer serializer) {
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_normal(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_normal(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_normal(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_rust_async(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync self, SseSerializer serializer) {
    sse_encode_opt_box_autoadd_i_32(self.int32, serializer);
    sse_encode_opt_box_autoadd_i_64(self.int64, serializer);
    sse_encode_opt_box_autoadd_f_64(self.float64, serializer);
    sse_encode_opt_box_autoadd_bool(self.boolean, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.zerocopy, serializer);
    sse_encode_opt_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_opt_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_opt_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_opt_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_opt_list_attribute_twin_sync(self.attributes, serializer);
    sse_encode_list_opt_box_autoadd_attribute_twin_sync(
        self.attributesNullable, serializer);
    sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
        self.nullableAttributes, serializer);
    sse_encode_opt_box_autoadd_new_type_int_twin_sync(
        self.newtypeint, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_f_64_array_16(F64Array16 self, SseSerializer serializer) {
    sse_encode_list_prim_f_64_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_normal(
      FeedIdTwinNormal self, SseSerializer serializer) {
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_rust_async(
      FeedIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_feed_id_twin_sync(
      FeedIdTwinSync self, SseSerializer serializer) {
    sse_encode_u_8_array_8(self.field0, serializer);
  }

  @protected
  void sse_encode_i_16(int self, SseSerializer serializer) {
    serializer.buffer.putInt16(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_32_array_2(I32Array2 self, SseSerializer serializer) {
    sse_encode_list_prim_i_32_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_isize(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_kitchen_sink_twin_normal(
      KitchenSinkTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinNormal_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinNormal_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinNormal_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_normal(field1, serializer);
      case KitchenSinkTwinNormal_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinNormal_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinNormal_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_rust_async(
      KitchenSinkTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinRustAsync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinRustAsync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinRustAsync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_rust_async(field1, serializer);
      case KitchenSinkTwinRustAsync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinRustAsync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinRustAsync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_kitchen_sink_twin_sync(
      KitchenSinkTwinSync self, SseSerializer serializer) {
    switch (self) {
      case KitchenSinkTwinSync_Empty():
        sse_encode_i_32(0, serializer);
      case KitchenSinkTwinSync_Primitives(
          int32: final int32,
          float64: final float64,
          boolean: final boolean
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_i_32(int32, serializer);
        sse_encode_f_64(float64, serializer);
        sse_encode_bool(boolean, serializer);
      case KitchenSinkTwinSync_Nested(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_i_32(field0, serializer);
        sse_encode_box_kitchen_sink_twin_sync(field1, serializer);
      case KitchenSinkTwinSync_Optional(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_opt_box_autoadd_i_32(field0, serializer);
        sse_encode_opt_box_autoadd_i_32(field1, serializer);
      case KitchenSinkTwinSync_Buffer(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
      case KitchenSinkTwinSync_Enums(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_weekdays_twin_sync(field0, serializer);
    }
  }

  @protected
  void sse_encode_list_DartOpaque(List<Object> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_DartOpaque(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_moi(
      List<HideDataTwinMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_normal(
      List<HideDataTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_rust_async(
      List<HideDataTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_rust_async_moi(
      List<HideDataTwinRustAsyncMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_rust_async_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_sync(
      List<HideDataTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_RustOpaque_hide_data_twin_sync_moi(
      List<HideDataTwinSyncMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_RustOpaque_hide_data_twin_sync_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_env_var(
      List<ApplicationEnvVar> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_env_var(item, serializer);
    }
  }

  @protected
  void sse_encode_list_application_settings(
      List<ApplicationSettings> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_application_settings(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_normal(
      List<AttributeTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attribute_twin_sync(
      List<AttributeTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_normal(
      List<BasicGeneralEnumTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_rust_async(
      List<BasicGeneralEnumTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_general_enum_twin_sync(
      List<BasicGeneralEnumTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_normal(
      List<BasicPrimitiveEnumTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_rust_async(
      List<BasicPrimitiveEnumTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_primitive_enum_twin_sync(
      List<BasicPrimitiveEnumTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_normal(
      List<BasicStructTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_rust_async(
      List<BasicStructTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_basic_struct_twin_sync(
      List<BasicStructTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bool(List<bool> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_normal(
      List<ElementTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_rust_async(
      List<ElementTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_element_twin_sync(
      List<ElementTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_element_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_moi(
      List<EnumOpaqueTwinMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_normal(
      List<EnumOpaqueTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_rust_async(
      List<EnumOpaqueTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_rust_async_moi(
      List<EnumOpaqueTwinRustAsyncMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_rust_async_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_sync(
      List<EnumOpaqueTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_enum_opaque_twin_sync_moi(
      List<EnumOpaqueTwinSyncMoi> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_enum_opaque_twin_sync_moi(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_enum(List<MyEnum> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_enum(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_size(List<MySize> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_normal(
      List<MyTreeNodeTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_rust_async(
      List<MyTreeNodeTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_my_tree_node_twin_sync(
      List<MyTreeNodeTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_my_tree_node_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_nested_raw_string_mirrored(
      List<NestedRawStringMirrored> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_nested_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_of_nested_raw_string_mirrored(
      ListOfNestedRawStringMirrored self, SseSerializer serializer) {
    sse_encode_list_nested_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_list_opt_String(
      List<String?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_attribute_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_i_32(
      List<int?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
      List<WeekdaysTwinNormal?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_box_autoadd_weekdays_twin_sync(
      List<WeekdaysTwinSync?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_box_autoadd_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_opt_list_prim_i_32_strict(
      List<Int32List?> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_opt_list_prim_i_32_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_normal(
      List<PointTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_rust_async(
      List<PointTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_point_twin_sync(
      List<PointTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_point_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_f_32_loose(
      List<double> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(
        self is Float32List ? self : Float32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_32_strict(
      Float32List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat32List(self);
  }

  @protected
  void sse_encode_list_prim_f_64_loose(
      List<double> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(
        self is Float64List ? self : Float64List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_f_64_strict(
      Float64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putFloat64List(self);
  }

  @protected
  void sse_encode_list_prim_i_16_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt16List(self is Int16List ? self : Int16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_16_strict(
      Int16List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt16List(self);
  }

  @protected
  void sse_encode_list_prim_i_32_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt32List(self is Int32List ? self : Int32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_32_strict(
      Int32List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt32List(self);
  }

  @protected
  void sse_encode_list_prim_i_64_strict(
      Int64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt64List(self);
  }

  @protected
  void sse_encode_list_prim_i_8_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putInt8List(self is Int8List ? self : Int8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_i_8_strict(
      Int8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putInt8List(self);
  }

  @protected
  void sse_encode_list_prim_u_16_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint16List(self is Uint16List ? self : Uint16List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_16_strict(
      Uint16List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint16List(self);
  }

  @protected
  void sse_encode_list_prim_u_32_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint32List(self is Uint32List ? self : Uint32List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_32_strict(
      Uint32List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint32List(self);
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_raw_string_enum_mirrored(
      List<RawStringEnumMirrored> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_enum_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_raw_string_mirrored(
      List<RawStringMirrored> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_raw_string_mirrored(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_normal(
      List<(int, BasicGeneralEnumTwinNormal)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_rust_async(
      List<(int, BasicGeneralEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_general_enum_twin_sync(
      List<(int, BasicGeneralEnumTwinSync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_general_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_normal(
      List<(int, BasicPrimitiveEnumTwinNormal)> self,
      SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_rust_async(
      List<(int, BasicPrimitiveEnumTwinRustAsync)> self,
      SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_primitive_enum_twin_sync(
      List<(int, BasicPrimitiveEnumTwinSync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_primitive_enum_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_normal(
      List<(int, BasicStructTwinNormal)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_rust_async(
      List<(int, BasicStructTwinRustAsync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_basic_struct_twin_sync(
      List<(int, BasicStructTwinSync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_basic_struct_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_bool(
      List<(int, bool)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_bool(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_32(
      List<(int, double)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_f_64(
      List<(int, double)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_f_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_16(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_32(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_64(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_i_8(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_i_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_isize(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_isize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_list_prim_u_8_strict(
      List<(int, Uint8List)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_string(
      List<(int, String)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_16(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_16(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_32(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_64(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_64(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_u_8(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_u_8(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_i_32_usize(
      List<(int, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_i_32_usize(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_normal(
      List<(String, EnumSimpleTwinNormal)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_rust_async(
      List<(String, EnumSimpleTwinRustAsync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_enum_simple_twin_sync(
      List<(String, EnumSimpleTwinSync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_enum_simple_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_i_32(
      List<(String, int)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_i_32(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_normal(
      List<(String, KitchenSinkTwinNormal)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_rust_async(
      List<(String, KitchenSinkTwinRustAsync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_kitchen_sink_twin_sync(
      List<(String, KitchenSinkTwinSync)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_kitchen_sink_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_list_prim_u_8_strict(
      List<(String, Uint8List)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_my_size(
      List<(String, MySize)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_my_size(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_normal(
      List<SumWithTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_rust_async(
      List<SumWithTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_sum_with_twin_sync(
      List<SumWithTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_sum_with_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_normal(
      List<TestIdTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_rust_async(
      List<TestIdTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_test_id_twin_sync(
      List<TestIdTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_id_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_normal(
      List<WeekdaysTwinNormal> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_normal(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_rust_async(
      List<WeekdaysTwinRustAsync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_rust_async(item, serializer);
    }
  }

  @protected
  void sse_encode_list_weekdays_twin_sync(
      List<WeekdaysTwinSync> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_weekdays_twin_sync(item, serializer);
    }
  }

  @protected
  void sse_encode_log_2_twin_normal(
      Log2TwinNormal self, SseSerializer serializer) {
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_rust_async(
      Log2TwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_2_twin_sync(Log2TwinSync self, SseSerializer serializer) {
    sse_encode_u_32(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_normal(
      LogTwinNormal self, SseSerializer serializer) {
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_log_twin_rust_async(
      LogTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_32(self.key, serializer);
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_macro_struct(MacroStruct self, SseSerializer serializer) {
    sse_encode_i_32(self.data, serializer);
  }

  @protected
  void sse_encode_measure_twin_normal(
      MeasureTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinNormal_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_normal(field0, serializer);
      case MeasureTwinNormal_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_normal(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_rust_async(
      MeasureTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinRustAsync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_rust_async(field0, serializer);
      case MeasureTwinRustAsync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_rust_async(field0, serializer);
    }
  }

  @protected
  void sse_encode_measure_twin_sync(
      MeasureTwinSync self, SseSerializer serializer) {
    switch (self) {
      case MeasureTwinSync_Speed(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_speed_twin_sync(field0, serializer);
      case MeasureTwinSync_Distance(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_distance_twin_sync(field0, serializer);
    }
  }

  @protected
  void sse_encode_message_id_twin_normal(
      MessageIdTwinNormal self, SseSerializer serializer) {
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_rust_async(
      MessageIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_message_id_twin_sync(
      MessageIdTwinSync self, SseSerializer serializer) {
    sse_encode_u_8_array_32(self.field0, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_normal(
      MirrorStructTwinNormal self, SseSerializer serializer) {
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_rust_async(
      MirrorStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_mirror_struct_twin_sync(
      MirrorStructTwinSync self, SseSerializer serializer) {
    sse_encode_application_settings(self.a, serializer);
    sse_encode_my_struct(self.b, serializer);
    sse_encode_list_my_enum(self.c, serializer);
    sse_encode_list_application_settings(self.d, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_normal(
      MoreThanJustOneRawStringStructTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_rust_async(
      MoreThanJustOneRawStringStructTwinRustAsync self,
      SseSerializer serializer) {
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_more_than_just_one_raw_string_struct_twin_sync(
      MoreThanJustOneRawStringStructTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.regular, serializer);
    sse_encode_String(self.type, serializer);
    sse_encode_bool(self.async, serializer);
    sse_encode_String(self.another, serializer);
  }

  @protected
  void sse_encode_my_enum(MyEnum self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_normal(
      MyNestedStructTwinNormal self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_normal(self.treeNode, serializer);
    sse_encode_weekdays_twin_normal(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_rust_async(
      MyNestedStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_rust_async(self.treeNode, serializer);
    sse_encode_weekdays_twin_rust_async(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_nested_struct_twin_sync(
      MyNestedStructTwinSync self, SseSerializer serializer) {
    sse_encode_my_tree_node_twin_sync(self.treeNode, serializer);
    sse_encode_weekdays_twin_sync(self.weekday, serializer);
  }

  @protected
  void sse_encode_my_size(MySize self, SseSerializer serializer) {
    sse_encode_i_32(self.width, serializer);
    sse_encode_i_32(self.height, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_normal(
      MyStreamEntryTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_stream_entry_twin_rust_async(
      MyStreamEntryTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.hello, serializer);
  }

  @protected
  void sse_encode_my_struct(MyStruct self, SseSerializer serializer) {
    sse_encode_bool(self.content, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_normal(
      MyTreeNodeTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_normal(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_rust_async(
      MyTreeNodeTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_rust_async(self.children, serializer);
  }

  @protected
  void sse_encode_my_tree_node_twin_sync(
      MyTreeNodeTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.valueI32, serializer);
    sse_encode_list_prim_u_8_strict(self.valueVecU8, serializer);
    sse_encode_bool(self.valueBoolean, serializer);
    sse_encode_list_my_tree_node_twin_sync(self.children, serializer);
  }

  @protected
  void sse_encode_nested_raw_string_mirrored(
      NestedRawStringMirrored self, SseSerializer serializer) {
    sse_encode_raw_string_mirrored(self.raw, serializer);
  }

  @protected
  void sse_encode_new_simple_struct(
      NewSimpleStruct self, SseSerializer serializer) {
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_normal(
      NewTypeIntTwinNormal self, SseSerializer serializer) {
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_new_type_int_twin_sync(
      NewTypeIntTwinSync self, SseSerializer serializer) {
    sse_encode_i_64(self.field0, serializer);
  }

  @protected
  void sse_encode_note_twin_normal(
      NoteTwinNormal self, SseSerializer serializer) {
    sse_encode_box_weekdays_twin_normal(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_rust_async(
      NoteTwinRustAsync self, SseSerializer serializer) {
    sse_encode_box_weekdays_twin_rust_async(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_note_twin_sync(NoteTwinSync self, SseSerializer serializer) {
    sse_encode_box_weekdays_twin_sync(self.day, serializer);
    sse_encode_String(self.body, serializer);
  }

  @protected
  void sse_encode_numbers(Numbers self, SseSerializer serializer) {
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_old_simple_struct(
      OldSimpleStruct self, SseSerializer serializer) {
    sse_encode_i_32(self.field, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_moi(
      OpaqueNestedTwinMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_moi(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_moi(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_normal(
      OpaqueNestedTwinNormal self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_normal(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_normal(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_rust_async(
      OpaqueNestedTwinRustAsync self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_rust_async(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_rust_async(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_rust_async_moi(
      OpaqueNestedTwinRustAsyncMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_rust_async_moi(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_rust_async_moi(
        self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_sync(
      OpaqueNestedTwinSync self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_sync(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_sync(self.second, serializer);
  }

  @protected
  void sse_encode_opaque_nested_twin_sync_moi(
      OpaqueNestedTwinSyncMoi self, SseSerializer serializer) {
    sse_encode_RustOpaque_hide_data_twin_sync_moi(self.first, serializer);
    sse_encode_RustOpaque_hide_data_twin_sync_moi(self.second, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_DartOpaque(
      Object? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_DartOpaque(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_another_twin_moi(
      HideDataAnotherTwinMoi? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_another_twin_moi(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_another_twin_normal(
      HideDataAnotherTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_another_twin_normal(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_moi(
      HideDataTwinMoi? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_moi(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_normal(
      HideDataTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async(
      HideDataTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
      HideDataTwinRustAsyncMoi? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_rust_async_moi(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_sync(
      HideDataTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
      HideDataTwinSyncMoi? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_RustOpaque_hide_data_twin_sync_moi(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_application_env(
      ApplicationEnv? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_application_env(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_normal(
      AttributeTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_rust_async(
      AttributeTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_attribute_twin_sync(
      AttributeTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_normal(
      BasicGeneralEnumTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_rust_async(
      BasicGeneralEnumTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_general_enum_twin_sync(
      BasicGeneralEnumTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_general_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_normal(
      BasicPrimitiveEnumTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_rust_async(
      BasicPrimitiveEnumTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_primitive_enum_twin_sync(
      BasicPrimitiveEnumTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_primitive_enum_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_normal(
      BasicStructTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_rust_async(
      BasicStructTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_basic_struct_twin_sync(
      BasicStructTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_basic_struct_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_normal(
      ElementTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_rust_async(
      ElementTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_element_twin_sync(
      ElementTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_32(double? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_16(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_32(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_8(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_isize(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_isize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_normal(
      MeasureTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_rust_async(
      MeasureTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_measure_twin_sync(
      MeasureTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_measure_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_normal(
      NewTypeIntTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_rust_async(
      NewTypeIntTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_new_type_int_twin_sync(
      NewTypeIntTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_new_type_int_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_record_string_i_32(
      (String, int)? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_record_string_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_16(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_16(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_usize(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_usize(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_normal(
      WeekdaysTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_weekdays_twin_sync(
      WeekdaysTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_weekdays_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_normal(
      BenchmarkBinaryTreeTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_rust_async(
      BenchmarkBinaryTreeTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_benchmark_binary_tree_twin_sync(
      BenchmarkBinaryTreeTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_benchmark_binary_tree_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_bool(bool? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_normal(
      ExoticOptionalsTwinNormal? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_rust_async(
      ExoticOptionalsTwinRustAsync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_exotic_optionals_twin_sync(
      ExoticOptionalsTwinSync? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_exotic_optionals_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_f_64(double? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_32(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_64(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_i_8(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_i_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_u_8(int? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_normal(
      List<AttributeTwinNormal>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_rust_async(
      List<AttributeTwinRustAsync>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_attribute_twin_sync(
      List<AttributeTwinSync>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_normal(
      List<ElementTwinNormal>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_rust_async(
      List<ElementTwinRustAsync>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_rust_async(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_element_twin_sync(
      List<ElementTwinSync>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_element_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_normal(
      List<AttributeTwinNormal?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_normal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_rust_async(
      List<AttributeTwinRustAsync?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_rust_async(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_opt_box_autoadd_attribute_twin_sync(
      List<AttributeTwinSync?>? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_opt_box_autoadd_attribute_twin_sync(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_32_strict(
      Float32List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_f_64_strict(
      Float64List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_f_64_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_32_strict(
      Int32List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_32_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_i_8_strict(
      Int8List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_i_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_vecs_twin_normal(
      OptVecsTwinNormal self, SseSerializer serializer) {
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_normal(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_rust_async(
      OptVecsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_rust_async(
        self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_opt_vecs_twin_sync(
      OptVecsTwinSync self, SseSerializer serializer) {
    sse_encode_list_opt_box_autoadd_i_32(self.i32, serializer);
    sse_encode_list_opt_box_autoadd_weekdays_twin_sync(self.enums, serializer);
    sse_encode_list_opt_String(self.strings, serializer);
    sse_encode_list_opt_list_prim_i_32_strict(self.buffers, serializer);
  }

  @protected
  void sse_encode_point_twin_normal(
      PointTwinNormal self, SseSerializer serializer) {
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_normal_array_2(
      PointTwinNormalArray2 self, SseSerializer serializer) {
    sse_encode_list_point_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async(
      PointTwinRustAsync self, SseSerializer serializer) {
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_rust_async_array_2(
      PointTwinRustAsyncArray2 self, SseSerializer serializer) {
    sse_encode_list_point_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_point_twin_sync(
      PointTwinSync self, SseSerializer serializer) {
    sse_encode_f_32(self.x, serializer);
    sse_encode_f_32(self.y, serializer);
  }

  @protected
  void sse_encode_point_twin_sync_array_2(
      PointTwinSyncArray2 self, SseSerializer serializer) {
    sse_encode_list_point_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_raw_string_enum_mirrored(
      RawStringEnumMirrored self, SseSerializer serializer) {
    switch (self) {
      case RawStringEnumMirrored_Raw(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_Nested(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_nested_raw_string_mirrored(field0, serializer);
      case RawStringEnumMirrored_ListOfNested(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_list_of_nested_raw_string_mirrored(
            field0, serializer);
    }
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_normal(
      RawStringItemStructTwinNormal self, SseSerializer serializer) {
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_rust_async(
      RawStringItemStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_item_struct_twin_sync(
      RawStringItemStructTwinSync self, SseSerializer serializer) {
    sse_encode_String(self.type, serializer);
  }

  @protected
  void sse_encode_raw_string_mirrored(
      RawStringMirrored self, SseSerializer serializer) {
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_record_application_settings_raw_string_enum_mirrored(
      (ApplicationSettings, RawStringEnumMirrored) self,
      SseSerializer serializer) {
    sse_encode_application_settings(self.$1, serializer);
    sse_encode_raw_string_enum_mirrored(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_normal(
      (int, BasicGeneralEnumTwinNormal) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_rust_async(
      (int, BasicGeneralEnumTwinRustAsync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_general_enum_twin_sync(
      (int, BasicGeneralEnumTwinSync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_general_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_normal(
      (int, BasicPrimitiveEnumTwinNormal) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_rust_async(
      (int, BasicPrimitiveEnumTwinRustAsync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_primitive_enum_twin_sync(
      (int, BasicPrimitiveEnumTwinSync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_primitive_enum_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_normal(
      (int, BasicStructTwinNormal) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_rust_async(
      (int, BasicStructTwinRustAsync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_basic_struct_twin_sync(
      (int, BasicStructTwinSync) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_basic_struct_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_bool((int, bool) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_bool(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_32(
      (int, double) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_f_64(
      (int, double) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_f_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_16((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_32((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_64((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_i_8((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_i_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_isize((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_isize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_list_prim_u_8_strict(
      (int, Uint8List) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_string(
      (int, String) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_16((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_16(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_32((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_64((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_64(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_u_8((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_u_8(self.$2, serializer);
  }

  @protected
  void sse_encode_record_i_32_usize((int, int) self, SseSerializer serializer) {
    sse_encode_i_32(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_normal(
      (String, EnumSimpleTwinNormal) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_rust_async(
      (String, EnumSimpleTwinRustAsync) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_enum_simple_twin_sync(
      (String, EnumSimpleTwinSync) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_enum_simple_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_i_32(
      (String, int) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_i_32(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_normal(
      (String, KitchenSinkTwinNormal) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_normal(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_rust_async(
      (String, KitchenSinkTwinRustAsync) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_rust_async(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_kitchen_sink_twin_sync(
      (String, KitchenSinkTwinSync) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_kitchen_sink_twin_sync(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_list_prim_u_8_strict(
      (String, Uint8List) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_list_prim_u_8_strict(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_my_size(
      (String, MySize) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_my_size(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_sequences(Sequences self, SseSerializer serializer) {
    sse_encode_list_prim_i_32_strict(self.field0, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_normal(
      SomeStructTwinNormal self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_rust_async(
      SomeStructTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_some_struct_twin_sync(
      SomeStructTwinSync self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_speed_twin_normal(
      SpeedTwinNormal self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinNormal_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinNormal_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_rust_async(
      SpeedTwinRustAsync self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinRustAsync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinRustAsync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_speed_twin_sync(
      SpeedTwinSync self, SseSerializer serializer) {
    switch (self) {
      case SpeedTwinSync_Unknown():
        sse_encode_i_32(0, serializer);
      case SpeedTwinSync_GPS(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_f_64(field0, serializer);
    }
  }

  @protected
  void sse_encode_struct_with_comments_twin_normal(
      StructWithCommentsTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_rust_async(
      StructWithCommentsTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_comments_twin_sync(
      StructWithCommentsTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.fieldWithComments, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_normal(
      StructWithEnumTwinNormal self, SseSerializer serializer) {
    sse_encode_abc_twin_normal(self.abc1, serializer);
    sse_encode_abc_twin_normal(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_rust_async(
      StructWithEnumTwinRustAsync self, SseSerializer serializer) {
    sse_encode_abc_twin_rust_async(self.abc1, serializer);
    sse_encode_abc_twin_rust_async(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_enum_twin_sync(
      StructWithEnumTwinSync self, SseSerializer serializer) {
    sse_encode_abc_twin_sync(self.abc1, serializer);
    sse_encode_abc_twin_sync(self.abc2, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_normal(
      StructWithOneFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_rust_async(
      StructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_one_field_twin_sync(
      StructWithOneFieldTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_normal(
      StructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_rust_async(
      StructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_two_field_twin_sync(
      StructWithTwoFieldTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.a, serializer);
    sse_encode_i_32(self.b, serializer);
  }

  @protected
  void sse_encode_struct_with_zero_field_twin_normal(
      StructWithZeroFieldTwinNormal self, SseSerializer serializer) {}

  @protected
  void sse_encode_struct_with_zero_field_twin_rust_async(
      StructWithZeroFieldTwinRustAsync self, SseSerializer serializer) {}

  @protected
  void sse_encode_struct_with_zero_field_twin_sync(
      StructWithZeroFieldTwinSync self, SseSerializer serializer) {}

  @protected
  void sse_encode_sum_with_twin_normal(
      SumWithTwinNormal self, SseSerializer serializer) {
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_normal_array_3(
      SumWithTwinNormalArray3 self, SseSerializer serializer) {
    sse_encode_list_sum_with_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async(
      SumWithTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_rust_async_array_3(
      SumWithTwinRustAsyncArray3 self, SseSerializer serializer) {
    sse_encode_list_sum_with_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync(
      SumWithTwinSync self, SseSerializer serializer) {
    sse_encode_u_32(self.x, serializer);
  }

  @protected
  void sse_encode_sum_with_twin_sync_array_3(
      SumWithTwinSyncArray3 self, SseSerializer serializer) {
    sse_encode_list_sum_with_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal(
      TestIdTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_2(
      TestIdTwinNormalArray2 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_normal_array_4(
      TestIdTwinNormalArray4 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_normal(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async(
      TestIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_2(
      TestIdTwinRustAsyncArray2 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_rust_async_array_4(
      TestIdTwinRustAsyncArray4 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_rust_async(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync(
      TestIdTwinSync self, SseSerializer serializer) {
    sse_encode_i_32_array_2(self.field0, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_2(
      TestIdTwinSyncArray2 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_id_twin_sync_array_4(
      TestIdTwinSyncArray4 self, SseSerializer serializer) {
    sse_encode_list_test_id_twin_sync(self.inner, serializer);
  }

  @protected
  void sse_encode_test_model_twin_normal(
      TestModelTwinNormal self, SseSerializer serializer) {
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_rust_async(
      TestModelTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_test_model_twin_sync(
      TestModelTwinSync self, SseSerializer serializer) {
    sse_encode_u_64(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_my_enum(self.aliasEnum, serializer);
    sse_encode_my_struct(self.aliasStruct, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_normal(
      TupleStructWithOneFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_rust_async(
      TupleStructWithOneFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_one_field_twin_sync(
      TupleStructWithOneFieldTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_normal(
      TupleStructWithTwoFieldTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_rust_async(
      TupleStructWithTwoFieldTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_tuple_struct_with_two_field_twin_sync(
      TupleStructWithTwoFieldTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.field0, serializer);
    sse_encode_i_32(self.field1, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_1600(U8Array1600 self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_5(U8Array5 self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_u_8_array_8(U8Array8 self, SseSerializer serializer) {
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_user_id_twin_normal(
      UserIdTwinNormal self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_rust_async(
      UserIdTwinRustAsync self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_user_id_twin_sync(
      UserIdTwinSync self, SseSerializer serializer) {
    sse_encode_u_32(self.value, serializer);
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_normal(
      VecOfPrimitivePackTwinNormal self, SseSerializer serializer) {
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_rust_async(
      VecOfPrimitivePackTwinRustAsync self, SseSerializer serializer) {
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_vec_of_primitive_pack_twin_sync(
      VecOfPrimitivePackTwinSync self, SseSerializer serializer) {
    sse_encode_list_prim_i_8_strict(self.int8List, serializer);
    sse_encode_list_prim_u_8_strict(self.uint8List, serializer);
    sse_encode_list_prim_i_16_strict(self.int16List, serializer);
    sse_encode_list_prim_u_16_strict(self.uint16List, serializer);
    sse_encode_list_prim_u_32_strict(self.uint32List, serializer);
    sse_encode_list_prim_i_32_strict(self.int32List, serializer);
    sse_encode_list_prim_u_64_strict(self.uint64List, serializer);
    sse_encode_list_prim_i_64_strict(self.int64List, serializer);
    sse_encode_list_prim_f_32_strict(self.float32List, serializer);
    sse_encode_list_prim_f_64_strict(self.float64List, serializer);
    sse_encode_list_bool(self.boolList, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_normal(
      WeekdaysTwinNormal self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_rust_async(
      WeekdaysTwinRustAsync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_weekdays_twin_sync(
      WeekdaysTwinSync self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }
}
