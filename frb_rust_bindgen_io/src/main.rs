use std::{fs, path::Path, process::Command};

fn main() -> std::io::Result<()> {
    let frb_dart_dirname = "../frb_dart";
    // tempfile won't work because ffigen relies on the file having .h extension
    let header_filename = "io_dartcobject.h";
    let header_path = format!("{}/{}", frb_dart_dirname, header_filename);
    let _ = fs::remove_file(&header_path);

    {
        let status = Command::new("cbindgen")
            .arg("-o")
            .arg(&header_path)
            .spawn()?
            .wait()?;
        if !status.success() {
            panic!("cbindgen failed")
        }
    }

    // Config must be placed in its dart project in order for the paths it defines
    // to be actually relative to the dart project.
    let mut config_file = tempfile::NamedTempFile::new_in(frb_dart_dirname)?;
    let config = format!(
        "
        output: 'lib/src/ffi/io_dartcobject.dart'
        name: 'DartCObject'
        description: 'generated by flutter_rust_bridge_bindgen_io'
        headers:
          entry-points:
            - '{}'
        ",
        header_filename
    );
    std::io::Write::write_all(&mut config_file, config.as_bytes())?;
    {
        let status = Command::new("dart")
            .args(vec![
                "run",
                "ffigen",
                "--config",
                config_file.path().canonicalize()?.to_str().unwrap(),
            ])
            .current_dir(Path::new(frb_dart_dirname).canonicalize()?)
            .spawn()?
            .wait()?;
        if !status.success() {
            panic!("ffigen failed")
        }
    }

    fs::remove_file(&header_path)?;
    fs::remove_file(config_file)?;
    Ok(())
}
