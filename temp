 
     var intLen = raw[0] ~/ 8;
		 print('WOT $intLen - ${raw.length}');
		 var ptrList = List.filled(intLen, 0);
		 var dropList = List.filled(intLen, 0);
		 var lendList = List.filled(intLen, 0);
		 // 0 [1, 2, 3, 4] [1, 2, 3, 4] [1, 2,  3,  4]
		 // 0  1  2  3  4   5, 6, 7, 8   9, 10, 11, 12
		 var j = 0;
		 for (var i = 1; i < 1 + intLen; ++i, ++j) {
			 ptrList[j] = raw[i];
		 }
		 j = 0;
		 for (var i = 1 + intLen; i < 1 + intLen*2; ++i, ++j) {
			 ptrList[j] = raw[i];
		 }
		 j = 0;
		 for (var i = 1 + intLen*2; i < 1 + intLen*3; ++i, ++j) {
			 ptrList[j] = raw[i];
		 }
 
		 print(ByteData.view(Uint8List.fromList(ptrList).buffer).getUint64(0, Endian.host));
		 var a = (ptrList as dynamic) as int;
		 // print('WAU $a');
		 var b = (dropList as dynamic) as int;
		 var c = (lendList as dynamic) as int;
		 return OpaqueStruct.fromRaw(a, b, c);
 
 
 
 
 
 WTF Path(
   TypePath {
     qself: None,
     path: Path {
       leading_colon: None,
       segments: [
         PathSegment {
           ident: Ident(
             SyncReturn,
           ),
           arguments: AngleBracketed(
             AngleBracketedGenericArguments {
               colon2_token: None,
               lt_token: Lt,
               args: [
                 Type(
                   Path(
                     TypePath {
                       qself: None,
                       path: Path {
                         leading_colon: None,
                         segments: [
                           PathSegment {
                             ident: Ident(
                               Opaque,
                             ),
                             arguments: AngleBracketed(
                               AngleBracketedGenericArguments {
                                 colon2_token: None,
                                 lt_token: Lt,
                                 args: [
                                   Type(
                                     Path(
                                       TypePath {
                                         qself: None,
                                         path: Path {
                                           leading_colon: None,
                                           segments: [
                                             PathSegment {
                                               ident: Ident(
                                                 OpaqueStruct,
                                               ),
                                               arguments: None,
                                             },
                                           ],
                                         },
                                       },
                                     ),
                                   ),
                                 ],
                                 gt_token: Gt,
                               },
                             ),
                           },
                         ],
                       },
                     },
                   ),
                 ),
               ],
               gt_token: Gt,
             },
           ),
         },
       ],
     },
   },
 )