import 'dart:io';

// ignore: implementation_imports
import 'package:flutter_rust_bridge/src/cli/run_command.dart';
import 'package:glob/glob.dart';
import 'package:glob/list_local_fs.dart';
import 'package:path/path.dart' as path;

Future<void> generateDartWebTestEntrypoint({required Uri dartRoot}) async {
  final dirTest = dartRoot.resolve('test/');
  final dirInterest = dirTest.resolve('api/');
  final files = [
    for (final file in Glob('${dirInterest.toFilePath()}**.dart').listSync())
      file.path
  ];

  final imports = [
    for (final file in files) //
      "import '${path.relative(file, from: dirTest.toFilePath())}' as ${path.basenameWithoutExtension(file)};\n"
  ];
  final calls = [
    for (final file in files) //
      "await ${path.basenameWithoutExtension(file)}.main(skipRustLibInit: true);\n"
  ];

  final code = '''
/// NOTE: This file is auto-generated by frb_internal. Please do not manually modify it.

import 'package:flutter_rust_bridge_utils/flutter_rust_bridge_utils_web.dart';
import 'package:frb_example_pure_dart/src/rust/frb_generated.dart';

${imports.join("")}

void main() {
  dartWebTestEntrypoint(() async {
    await RustLib.init();

    ${calls.join("")}
  });
}
  ''';

  final pathOutput =
      dartRoot.resolve('test/dart_web_test_entrypoint.dart').toFilePath();
  File(pathOutput).writeAsStringSync(code);
  await runCommand('dart', ['format', pathOutput]);
}
